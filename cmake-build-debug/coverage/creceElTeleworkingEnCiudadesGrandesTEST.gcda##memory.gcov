        -:    0:Source:/Library/Developer/CommandLineTools/usr/bin/../include/c++/v1/memory
        -:    0:Graph:/Users/delficomerso/template-alumnos 2/cmake-build-debug/CMakeFiles/tpi.dir/test/creceElTeleworkingEnCiudadesGrandesTEST.gcno
        -:    0:Data:/Users/delficomerso/template-alumnos 2/cmake-build-debug/CMakeFiles/tpi.dir/test/creceElTeleworkingEnCiudadesGrandesTEST.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===-------------------------- memory ------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_MEMORY
        -:   11:#define _LIBCPP_MEMORY
        -:   12:
        -:   13:/*
        -:   14:    memory synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:struct allocator_arg_t { };
        -:   20:inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();
        -:   21:
        -:   22:template <class T, class Alloc> struct uses_allocator;
        -:   23:
        -:   24:template <class Ptr>
        -:   25:struct pointer_traits
        -:   26:{
        -:   27:    typedef Ptr pointer;
        -:   28:    typedef <details> element_type;
        -:   29:    typedef <details> difference_type;
        -:   30:
        -:   31:    template <class U> using rebind = <details>;
        -:   32:
        -:   33:    static pointer pointer_to(<details>);
        -:   34:};
        -:   35:
        -:   36:template <class T>
        -:   37:struct pointer_traits<T*>
        -:   38:{
        -:   39:    typedef T* pointer;
        -:   40:    typedef T element_type;
        -:   41:    typedef ptrdiff_t difference_type;
        -:   42:
        -:   43:    template <class U> using rebind = U*;
        -:   44:
        -:   45:    static pointer pointer_to(<details>) noexcept; // constexpr in C++20
        -:   46:};
        -:   47:
        -:   48:template <class T> constexpr T* to_address(T* p) noexcept; // C++20
        -:   49:template <class Ptr> auto to_address(const Ptr& p) noexcept; // C++20
        -:   50:
        -:   51:template <class Alloc>
        -:   52:struct allocator_traits
        -:   53:{
        -:   54:    typedef Alloc                        allocator_type;
        -:   55:    typedef typename allocator_type::value_type
        -:   56:                                         value_type;
        -:   57:
        -:   58:    typedef Alloc::pointer | value_type* pointer;
        -:   59:    typedef Alloc::const_pointer
        -:   60:          | pointer_traits<pointer>::rebind<const value_type>
        -:   61:                                         const_pointer;
        -:   62:    typedef Alloc::void_pointer
        -:   63:          | pointer_traits<pointer>::rebind<void>
        -:   64:                                         void_pointer;
        -:   65:    typedef Alloc::const_void_pointer
        -:   66:          | pointer_traits<pointer>::rebind<const void>
        -:   67:                                         const_void_pointer;
        -:   68:    typedef Alloc::difference_type
        -:   69:          | pointer_traits<pointer>::difference_type
        -:   70:                                         difference_type;
        -:   71:    typedef Alloc::size_type
        -:   72:          | make_unsigned<difference_type>::type
        -:   73:                                         size_type;
        -:   74:    typedef Alloc::propagate_on_container_copy_assignment
        -:   75:          | false_type                   propagate_on_container_copy_assignment;
        -:   76:    typedef Alloc::propagate_on_container_move_assignment
        -:   77:          | false_type                   propagate_on_container_move_assignment;
        -:   78:    typedef Alloc::propagate_on_container_swap
        -:   79:          | false_type                   propagate_on_container_swap;
        -:   80:    typedef Alloc::is_always_equal
        -:   81:          | is_empty                     is_always_equal;
        -:   82:
        -:   83:    template <class T> using rebind_alloc  = Alloc::rebind<U>::other | Alloc<T, Args...>;
        -:   84:    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
        -:   85:
        -:   86:    static pointer allocate(allocator_type& a, size_type n);                          // [[nodiscard]] in C++20
        -:   87:    static pointer allocate(allocator_type& a, size_type n, const_void_pointer hint); // [[nodiscard]] in C++20
        -:   88:
        -:   89:    static void deallocate(allocator_type& a, pointer p, size_type n) noexcept;
        -:   90:
        -:   91:    template <class T, class... Args>
        -:   92:        static void construct(allocator_type& a, T* p, Args&&... args);
        -:   93:
        -:   94:    template <class T>
        -:   95:        static void destroy(allocator_type& a, T* p);
        -:   96:
        -:   97:    static size_type max_size(const allocator_type& a); // noexcept in C++14
        -:   98:
        -:   99:    static allocator_type
        -:  100:        select_on_container_copy_construction(const allocator_type& a);
        -:  101:};
        -:  102:
        -:  103:template <>
        -:  104:class allocator<void>
        -:  105:{
        -:  106:public:
        -:  107:    typedef void*                                 pointer;
        -:  108:    typedef const void*                           const_pointer;
        -:  109:    typedef void                                  value_type;
        -:  110:
        -:  111:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  112:};
        -:  113:
        -:  114:template <class T>
        -:  115:class allocator
        -:  116:{
        -:  117:public:
        -:  118:    typedef size_t                                size_type;
        -:  119:    typedef ptrdiff_t                             difference_type;
        -:  120:    typedef T*                                    pointer;
        -:  121:    typedef const T*                              const_pointer;
        -:  122:    typedef typename add_lvalue_reference<T>::type       reference;
        -:  123:    typedef typename add_lvalue_reference<const T>::type const_reference;
        -:  124:    typedef T                                     value_type;
        -:  125:
        -:  126:    template <class U> struct rebind {typedef allocator<U> other;};
        -:  127:
        -:  128:    constexpr allocator() noexcept;                      // constexpr in C++20
        -:  129:    constexpr allocator(const allocator&) noexcept;      // constexpr in C++20
        -:  130:    template <class U>
        -:  131:      constexpr allocator(const allocator<U>&) noexcept; // constexpr in C++20
        -:  132:    ~allocator();
        -:  133:    pointer address(reference x) const noexcept;
        -:  134:    const_pointer address(const_reference x) const noexcept;
        -:  135:    pointer allocate(size_type, allocator<void>::const_pointer hint = 0);
        -:  136:    void deallocate(pointer p, size_type n) noexcept;
        -:  137:    size_type max_size() const noexcept;
        -:  138:    template<class U, class... Args>
        -:  139:        void construct(U* p, Args&&... args);
        -:  140:    template <class U>
        -:  141:        void destroy(U* p);
        -:  142:};
        -:  143:
        -:  144:template <class T, class U>
        -:  145:bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
        -:  146:
        -:  147:template <class T, class U>
        -:  148:bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;
        -:  149:
        -:  150:template <class OutputIterator, class T>
        -:  151:class raw_storage_iterator
        -:  152:    : public iterator<output_iterator_tag,
        -:  153:                      T,                               // purposefully not C++03
        -:  154:                      ptrdiff_t,                       // purposefully not C++03
        -:  155:                      T*,                              // purposefully not C++03
        -:  156:                      raw_storage_iterator&>           // purposefully not C++03
        -:  157:{
        -:  158:public:
        -:  159:    explicit raw_storage_iterator(OutputIterator x);
        -:  160:    raw_storage_iterator& operator*();
        -:  161:    raw_storage_iterator& operator=(const T& element);
        -:  162:    raw_storage_iterator& operator++();
        -:  163:    raw_storage_iterator  operator++(int);
        -:  164:};
        -:  165:
        -:  166:template <class T> pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) noexcept;
        -:  167:template <class T> void               return_temporary_buffer(T* p) noexcept;
        -:  168:
        -:  169:template <class T> T* addressof(T& r) noexcept;
        -:  170:template <class T> T* addressof(const T&& r) noexcept = delete;
        -:  171:
        -:  172:template <class InputIterator, class ForwardIterator>
        -:  173:ForwardIterator
        -:  174:uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result);
        -:  175:
        -:  176:template <class InputIterator, class Size, class ForwardIterator>
        -:  177:ForwardIterator
        -:  178:uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
        -:  179:
        -:  180:template <class ForwardIterator, class T>
        -:  181:void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
        -:  182:
        -:  183:template <class ForwardIterator, class Size, class T>
        -:  184:ForwardIterator
        -:  185:uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
        -:  186:
        -:  187:template <class T>
        -:  188:void destroy_at(T* location);
        -:  189:
        -:  190:template <class ForwardIterator>
        -:  191: void destroy(ForwardIterator first, ForwardIterator last);
        -:  192:
        -:  193:template <class ForwardIterator, class Size>
        -:  194: ForwardIterator destroy_n(ForwardIterator first, Size n);
        -:  195:
        -:  196:template <class InputIterator, class ForwardIterator>
        -:  197: ForwardIterator uninitialized_move(InputIterator first, InputIterator last, ForwardIterator result);
        -:  198:
        -:  199:template <class InputIterator, class Size, class ForwardIterator>
        -:  200: pair<InputIterator,ForwardIterator> uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);
        -:  201:
        -:  202:template <class ForwardIterator>
        -:  203: void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);
        -:  204:
        -:  205:template <class ForwardIterator, class Size>
        -:  206: ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
        -:  207:
        -:  208:template <class ForwardIterator>
        -:  209: void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
        -:  210:
        -:  211:template <class ForwardIterator, class Size>
        -:  212: ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
        -:  213:
        -:  214:template <class Y> struct auto_ptr_ref {};      // deprecated in C++11, removed in C++17
        -:  215:
        -:  216:template<class X>
        -:  217:class auto_ptr                                  // deprecated in C++11, removed in C++17
        -:  218:{
        -:  219:public:
        -:  220:    typedef X element_type;
        -:  221:
        -:  222:    explicit auto_ptr(X* p =0) throw();
        -:  223:    auto_ptr(auto_ptr&) throw();
        -:  224:    template<class Y> auto_ptr(auto_ptr<Y>&) throw();
        -:  225:    auto_ptr& operator=(auto_ptr&) throw();
        -:  226:    template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
        -:  227:    auto_ptr& operator=(auto_ptr_ref<X> r) throw();
        -:  228:    ~auto_ptr() throw();
        -:  229:
        -:  230:    typename add_lvalue_reference<X>::type operator*() const throw();
        -:  231:    X* operator->() const throw();
        -:  232:    X* get() const throw();
        -:  233:    X* release() throw();
        -:  234:    void reset(X* p =0) throw();
        -:  235:
        -:  236:    auto_ptr(auto_ptr_ref<X>) throw();
        -:  237:    template<class Y> operator auto_ptr_ref<Y>() throw();
        -:  238:    template<class Y> operator auto_ptr<Y>() throw();
        -:  239:};
        -:  240:
        -:  241:template <class T>
        -:  242:struct default_delete
        -:  243:{
        -:  244:    constexpr default_delete() noexcept = default;
        -:  245:    template <class U> default_delete(const default_delete<U>&) noexcept;
        -:  246:
        -:  247:    void operator()(T*) const noexcept;
        -:  248:};
        -:  249:
        -:  250:template <class T>
        -:  251:struct default_delete<T[]>
        -:  252:{
        -:  253:    constexpr default_delete() noexcept = default;
        -:  254:    void operator()(T*) const noexcept;
        -:  255:    template <class U> void operator()(U*) const = delete;
        -:  256:};
        -:  257:
        -:  258:template <class T, class D = default_delete<T>>
        -:  259:class unique_ptr
        -:  260:{
        -:  261:public:
        -:  262:    typedef see below pointer;
        -:  263:    typedef T element_type;
        -:  264:    typedef D deleter_type;
        -:  265:
        -:  266:    // constructors
        -:  267:    constexpr unique_ptr() noexcept;
        -:  268:    explicit unique_ptr(pointer p) noexcept;
        -:  269:    unique_ptr(pointer p, see below d1) noexcept;
        -:  270:    unique_ptr(pointer p, see below d2) noexcept;
        -:  271:    unique_ptr(unique_ptr&& u) noexcept;
        -:  272:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  273:    template <class U, class E>
        -:  274:        unique_ptr(unique_ptr<U, E>&& u) noexcept;
        -:  275:    template <class U>
        -:  276:        unique_ptr(auto_ptr<U>&& u) noexcept;       // removed in C++17
        -:  277:
        -:  278:    // destructor
        -:  279:    ~unique_ptr();
        -:  280:
        -:  281:    // assignment
        -:  282:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  283:    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
        -:  284:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  285:
        -:  286:    // observers
        -:  287:    typename add_lvalue_reference<T>::type operator*() const;
        -:  288:    pointer operator->() const noexcept;
        -:  289:    pointer get() const noexcept;
        -:  290:    deleter_type& get_deleter() noexcept;
        -:  291:    const deleter_type& get_deleter() const noexcept;
        -:  292:    explicit operator bool() const noexcept;
        -:  293:
        -:  294:    // modifiers
        -:  295:    pointer release() noexcept;
        -:  296:    void reset(pointer p = pointer()) noexcept;
        -:  297:    void swap(unique_ptr& u) noexcept;
        -:  298:};
        -:  299:
        -:  300:template <class T, class D>
        -:  301:class unique_ptr<T[], D>
        -:  302:{
        -:  303:public:
        -:  304:    typedef implementation-defined pointer;
        -:  305:    typedef T element_type;
        -:  306:    typedef D deleter_type;
        -:  307:
        -:  308:    // constructors
        -:  309:    constexpr unique_ptr() noexcept;
        -:  310:    explicit unique_ptr(pointer p) noexcept;
        -:  311:    unique_ptr(pointer p, see below d) noexcept;
        -:  312:    unique_ptr(pointer p, see below d) noexcept;
        -:  313:    unique_ptr(unique_ptr&& u) noexcept;
        -:  314:    unique_ptr(nullptr_t) noexcept : unique_ptr() { }
        -:  315:
        -:  316:    // destructor
        -:  317:    ~unique_ptr();
        -:  318:
        -:  319:    // assignment
        -:  320:    unique_ptr& operator=(unique_ptr&& u) noexcept;
        -:  321:    unique_ptr& operator=(nullptr_t) noexcept;
        -:  322:
        -:  323:    // observers
        -:  324:    T& operator[](size_t i) const;
        -:  325:    pointer get() const noexcept;
        -:  326:    deleter_type& get_deleter() noexcept;
        -:  327:    const deleter_type& get_deleter() const noexcept;
        -:  328:    explicit operator bool() const noexcept;
        -:  329:
        -:  330:    // modifiers
        -:  331:    pointer release() noexcept;
        -:  332:    void reset(pointer p = pointer()) noexcept;
        -:  333:    void reset(nullptr_t) noexcept;
        -:  334:    template <class U> void reset(U) = delete;
        -:  335:    void swap(unique_ptr& u) noexcept;
        -:  336:};
        -:  337:
        -:  338:template <class T, class D>
        -:  339:    void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
        -:  340:
        -:  341:template <class T1, class D1, class T2, class D2>
        -:  342:    bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  343:template <class T1, class D1, class T2, class D2>
        -:  344:    bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  345:template <class T1, class D1, class T2, class D2>
        -:  346:    bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  347:template <class T1, class D1, class T2, class D2>
        -:  348:    bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  349:template <class T1, class D1, class T2, class D2>
        -:  350:    bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  351:template <class T1, class D1, class T2, class D2>
        -:  352:    bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
        -:  353:
        -:  354:template <class T, class D>
        -:  355:    bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  356:template <class T, class D>
        -:  357:    bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  358:template <class T, class D>
        -:  359:    bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
        -:  360:template <class T, class D>
        -:  361:    bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
        -:  362:
        -:  363:template <class T, class D>
        -:  364:    bool operator<(const unique_ptr<T, D>& x, nullptr_t);
        -:  365:template <class T, class D>
        -:  366:    bool operator<(nullptr_t, const unique_ptr<T, D>& y);
        -:  367:template <class T, class D>
        -:  368:    bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
        -:  369:template <class T, class D>
        -:  370:    bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
        -:  371:template <class T, class D>
        -:  372:    bool operator>(const unique_ptr<T, D>& x, nullptr_t);
        -:  373:template <class T, class D>
        -:  374:    bool operator>(nullptr_t, const unique_ptr<T, D>& y);
        -:  375:template <class T, class D>
        -:  376:    bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
        -:  377:template <class T, class D>
        -:  378:    bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
        -:  379:
        -:  380:class bad_weak_ptr
        -:  381:    : public std::exception
        -:  382:{
        -:  383:    bad_weak_ptr() noexcept;
        -:  384:};
        -:  385:
        -:  386:template<class T, class... Args> unique_ptr<T> make_unique(Args&&... args);     // C++14
        -:  387:template<class T>                unique_ptr<T> make_unique(size_t n);           // C++14
        -:  388:template<class T, class... Args> unspecified   make_unique(Args&&...) = delete; // C++14, T == U[N]
        -:  389:
        -:  390:template<class E, class T, class Y, class D>
        -:  391:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, unique_ptr<Y, D> const& p);
        -:  392:
        -:  393:template<class T>
        -:  394:class shared_ptr
        -:  395:{
        -:  396:public:
        -:  397:    typedef T element_type;
        -:  398:    typedef weak_ptr<T> weak_type; // C++17
        -:  399:
        -:  400:    // constructors:
        -:  401:    constexpr shared_ptr() noexcept;
        -:  402:    template<class Y> explicit shared_ptr(Y* p);
        -:  403:    template<class Y, class D> shared_ptr(Y* p, D d);
        -:  404:    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
        -:  405:    template <class D> shared_ptr(nullptr_t p, D d);
        -:  406:    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
        -:  407:    template<class Y> shared_ptr(const shared_ptr<Y>& r, T *p) noexcept;
        -:  408:    shared_ptr(const shared_ptr& r) noexcept;
        -:  409:    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
        -:  410:    shared_ptr(shared_ptr&& r) noexcept;
        -:  411:    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
        -:  412:    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
        -:  413:    template<class Y> shared_ptr(auto_ptr<Y>&& r);          // removed in C++17
        -:  414:    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
        -:  415:    shared_ptr(nullptr_t) : shared_ptr() { }
        -:  416:
        -:  417:    // destructor:
        -:  418:    ~shared_ptr();
        -:  419:
        -:  420:    // assignment:
        -:  421:    shared_ptr& operator=(const shared_ptr& r) noexcept;
        -:  422:    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
        -:  423:    shared_ptr& operator=(shared_ptr&& r) noexcept;
        -:  424:    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r);
        -:  425:    template<class Y> shared_ptr& operator=(auto_ptr<Y>&& r); // removed in C++17
        -:  426:    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
        -:  427:
        -:  428:    // modifiers:
        -:  429:    void swap(shared_ptr& r) noexcept;
        -:  430:    void reset() noexcept;
        -:  431:    template<class Y> void reset(Y* p);
        -:  432:    template<class Y, class D> void reset(Y* p, D d);
        -:  433:    template<class Y, class D, class A> void reset(Y* p, D d, A a);
        -:  434:
        -:  435:    // observers:
        -:  436:    T* get() const noexcept;
        -:  437:    T& operator*() const noexcept;
        -:  438:    T* operator->() const noexcept;
        -:  439:    long use_count() const noexcept;
        -:  440:    bool unique() const noexcept;
        -:  441:    explicit operator bool() const noexcept;
        -:  442:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  443:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  444:};
        -:  445:
        -:  446:// shared_ptr comparisons:
        -:  447:template<class T, class U>
        -:  448:    bool operator==(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  449:template<class T, class U>
        -:  450:    bool operator!=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  451:template<class T, class U>
        -:  452:    bool operator<(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  453:template<class T, class U>
        -:  454:    bool operator>(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  455:template<class T, class U>
        -:  456:    bool operator<=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  457:template<class T, class U>
        -:  458:    bool operator>=(shared_ptr<T> const& a, shared_ptr<U> const& b) noexcept;
        -:  459:
        -:  460:template <class T>
        -:  461:    bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  462:template <class T>
        -:  463:    bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  464:template <class T>
        -:  465:    bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  466:template <class T>
        -:  467:    bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  468:template <class T>
        -:  469:    bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  470:template <class T>
        -:  471:bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  472:template <class T>
        -:  473:    bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  474:template <class T>
        -:  475:    bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  476:template <class T>
        -:  477:    bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  478:template <class T>
        -:  479:    bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  480:template <class T>
        -:  481:    bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
        -:  482:template <class T>
        -:  483:    bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
        -:  484:
        -:  485:// shared_ptr specialized algorithms:
        -:  486:template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
        -:  487:
        -:  488:// shared_ptr casts:
        -:  489:template<class T, class U>
        -:  490:    shared_ptr<T> static_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  491:template<class T, class U>
        -:  492:    shared_ptr<T> dynamic_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  493:template<class T, class U>
        -:  494:    shared_ptr<T> const_pointer_cast(shared_ptr<U> const& r) noexcept;
        -:  495:
        -:  496:// shared_ptr I/O:
        -:  497:template<class E, class T, class Y>
        -:  498:    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, shared_ptr<Y> const& p);
        -:  499:
        -:  500:// shared_ptr get_deleter:
        -:  501:template<class D, class T> D* get_deleter(shared_ptr<T> const& p) noexcept;
        -:  502:
        -:  503:template<class T, class... Args>
        -:  504:    shared_ptr<T> make_shared(Args&&... args);
        -:  505:template<class T, class A, class... Args>
        -:  506:    shared_ptr<T> allocate_shared(const A& a, Args&&... args);
        -:  507:
        -:  508:template<class T>
        -:  509:class weak_ptr
        -:  510:{
        -:  511:public:
        -:  512:    typedef T element_type;
        -:  513:
        -:  514:    // constructors
        -:  515:    constexpr weak_ptr() noexcept;
        -:  516:    template<class Y> weak_ptr(shared_ptr<Y> const& r) noexcept;
        -:  517:    weak_ptr(weak_ptr const& r) noexcept;
        -:  518:    template<class Y> weak_ptr(weak_ptr<Y> const& r) noexcept;
        -:  519:    weak_ptr(weak_ptr&& r) noexcept;                      // C++14
        -:  520:    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept; // C++14
        -:  521:
        -:  522:    // destructor
        -:  523:    ~weak_ptr();
        -:  524:
        -:  525:    // assignment
        -:  526:    weak_ptr& operator=(weak_ptr const& r) noexcept;
        -:  527:    template<class Y> weak_ptr& operator=(weak_ptr<Y> const& r) noexcept;
        -:  528:    template<class Y> weak_ptr& operator=(shared_ptr<Y> const& r) noexcept;
        -:  529:    weak_ptr& operator=(weak_ptr&& r) noexcept;                      // C++14
        -:  530:    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept; // C++14
        -:  531:
        -:  532:    // modifiers
        -:  533:    void swap(weak_ptr& r) noexcept;
        -:  534:    void reset() noexcept;
        -:  535:
        -:  536:    // observers
        -:  537:    long use_count() const noexcept;
        -:  538:    bool expired() const noexcept;
        -:  539:    shared_ptr<T> lock() const noexcept;
        -:  540:    template<class U> bool owner_before(shared_ptr<U> const& b) const noexcept;
        -:  541:    template<class U> bool owner_before(weak_ptr<U> const& b) const noexcept;
        -:  542:};
        -:  543:
        -:  544:// weak_ptr specialized algorithms:
        -:  545:template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
        -:  546:
        -:  547:// class owner_less:
        -:  548:template<class T> struct owner_less;
        -:  549:
        -:  550:template<class T>
        -:  551:struct owner_less<shared_ptr<T> >
        -:  552:    : binary_function<shared_ptr<T>, shared_ptr<T>, bool>
        -:  553:{
        -:  554:    typedef bool result_type;
        -:  555:    bool operator()(shared_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  556:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  557:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  558:};
        -:  559:
        -:  560:template<class T>
        -:  561:struct owner_less<weak_ptr<T> >
        -:  562:    : binary_function<weak_ptr<T>, weak_ptr<T>, bool>
        -:  563:{
        -:  564:    typedef bool result_type;
        -:  565:    bool operator()(weak_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  566:    bool operator()(shared_ptr<T> const&, weak_ptr<T> const&) const noexcept;
        -:  567:    bool operator()(weak_ptr<T> const&, shared_ptr<T> const&) const noexcept;
        -:  568:};
        -:  569:
        -:  570:template <>  // Added in C++14
        -:  571:struct owner_less<void>
        -:  572:{
        -:  573:    template <class _Tp, class _Up>
        -:  574:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  575:    template <class _Tp, class _Up>
        -:  576:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  577:    template <class _Tp, class _Up>
        -:  578:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const noexcept;
        -:  579:    template <class _Tp, class _Up>
        -:  580:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const noexcept;
        -:  581:
        -:  582:    typedef void is_transparent;
        -:  583:};
        -:  584:
        -:  585:template<class T>
        -:  586:class enable_shared_from_this
        -:  587:{
        -:  588:protected:
        -:  589:    constexpr enable_shared_from_this() noexcept;
        -:  590:    enable_shared_from_this(enable_shared_from_this const&) noexcept;
        -:  591:    enable_shared_from_this& operator=(enable_shared_from_this const&) noexcept;
        -:  592:    ~enable_shared_from_this();
        -:  593:public:
        -:  594:    shared_ptr<T> shared_from_this();
        -:  595:    shared_ptr<T const> shared_from_this() const;
        -:  596:};
        -:  597:
        -:  598:template<class T>
        -:  599:    bool atomic_is_lock_free(const shared_ptr<T>* p);
        -:  600:template<class T>
        -:  601:    shared_ptr<T> atomic_load(const shared_ptr<T>* p);
        -:  602:template<class T>
        -:  603:    shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
        -:  604:template<class T>
        -:  605:    void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
        -:  606:template<class T>
        -:  607:    void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  608:template<class T>
        -:  609:    shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
        -:  610:template<class T>
        -:  611:    shared_ptr<T>
        -:  612:    atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
        -:  613:template<class T>
        -:  614:    bool
        -:  615:    atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  616:template<class T>
        -:  617:    bool
        -:  618:    atomic_compare_exchange_strong( shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
        -:  619:template<class T>
        -:  620:    bool
        -:  621:    atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  622:                                          shared_ptr<T> w, memory_order success,
        -:  623:                                          memory_order failure);
        -:  624:template<class T>
        -:  625:    bool
        -:  626:    atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
        -:  627:                                            shared_ptr<T> w, memory_order success,
        -:  628:                                            memory_order failure);
        -:  629:// Hash support
        -:  630:template <class T> struct hash;
        -:  631:template <class T, class D> struct hash<unique_ptr<T, D> >;
        -:  632:template <class T> struct hash<shared_ptr<T> >;
        -:  633:
        -:  634:template <class T, class Alloc>
        -:  635:  inline constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;
        -:  636:
        -:  637:// Pointer safety
        -:  638:enum class pointer_safety { relaxed, preferred, strict };
        -:  639:void declare_reachable(void *p);
        -:  640:template <class T> T *undeclare_reachable(T *p);
        -:  641:void declare_no_pointers(char *p, size_t n);
        -:  642:void undeclare_no_pointers(char *p, size_t n);
        -:  643:pointer_safety get_pointer_safety() noexcept;
        -:  644:
        -:  645:void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
        -:  646:
        -:  647:}  // std
        -:  648:
        -:  649:*/
        -:  650:
        -:  651:#include <__config>
        -:  652:#include <type_traits>
        -:  653:#include <typeinfo>
        -:  654:#include <cstddef>
        -:  655:#include <cstdint>
        -:  656:#include <new>
        -:  657:#include <utility>
        -:  658:#include <limits>
        -:  659:#include <iterator>
        -:  660:#include <__functional_base>
        -:  661:#include <iosfwd>
        -:  662:#include <tuple>
        -:  663:#include <stdexcept>
        -:  664:#include <cstring>
        -:  665:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -:  666:#  include <atomic>
        -:  667:#endif
        -:  668:#include <__cxx_version>
        -:  669:
        -:  670:// TODO: We re-added #include <cassert> to <memory> to make the internal build
        -:  671://       pass, but we should remove it as soon as all internal clients have fixed
        -:  672://       their code.
        -:  673:#include <cassert>
        -:  674:
        -:  675:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  676:#pragma GCC system_header
        -:  677:#endif
        -:  678:
        -:  679:_LIBCPP_PUSH_MACROS
        -:  680:#include <__undef_macros>
        -:  681:
        -:  682:
        -:  683:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  684:
        -:  685:template <class _ValueType>
        -:  686:inline _LIBCPP_INLINE_VISIBILITY
        -:  687:_ValueType __libcpp_relaxed_load(_ValueType const* __value) {
        -:  688:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  689:    defined(__ATOMIC_RELAXED) &&        \
        -:  690:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:  691:    return __atomic_load_n(__value, __ATOMIC_RELAXED);
        -:  692:#else
        -:  693:    return *__value;
        -:  694:#endif
        -:  695:}
        -:  696:
        -:  697:template <class _ValueType>
        -:  698:inline _LIBCPP_INLINE_VISIBILITY
        -:  699:_ValueType __libcpp_acquire_load(_ValueType const* __value) {
        -:  700:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:  701:    defined(__ATOMIC_ACQUIRE) &&        \
        -:  702:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:  703:    return __atomic_load_n(__value, __ATOMIC_ACQUIRE);
        -:  704:#else
        -:  705:    return *__value;
        -:  706:#endif
        -:  707:}
        -:  708:
        -:  709:// addressof moved to <type_traits>
        -:  710:
        -:  711:template <class _Tp> class allocator;
        -:  712:
        -:  713:template <>
        -:  714:class _LIBCPP_TEMPLATE_VIS allocator<void>
        -:  715:{
        -:  716:public:
        -:  717:    typedef void*             pointer;
        -:  718:    typedef const void*       const_pointer;
        -:  719:    typedef void              value_type;
        -:  720:
        -:  721:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  722:};
        -:  723:
        -:  724:template <>
        -:  725:class _LIBCPP_TEMPLATE_VIS allocator<const void>
        -:  726:{
        -:  727:public:
        -:  728:    typedef const void*       pointer;
        -:  729:    typedef const void*       const_pointer;
        -:  730:    typedef const void        value_type;
        -:  731:
        -:  732:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -:  733:};
        -:  734:
        -:  735:// pointer_traits
        -:  736:
        -:  737:template <class _Tp, class = void>
        -:  738:struct __has_element_type : false_type {};
        -:  739:
        -:  740:template <class _Tp>
        -:  741:struct __has_element_type<_Tp,
        -:  742:              typename __void_t<typename _Tp::element_type>::type> : true_type {};
        -:  743:
        -:  744:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:  745:struct __pointer_traits_element_type;
        -:  746:
        -:  747:template <class _Ptr>
        -:  748:struct __pointer_traits_element_type<_Ptr, true>
        -:  749:{
        -:  750:    typedef _LIBCPP_NODEBUG_TYPE typename _Ptr::element_type type;
        -:  751:};
        -:  752:
        -:  753:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  754:
        -:  755:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  756:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:  757:{
        -:  758:    typedef _LIBCPP_NODEBUG_TYPE typename _Sp<_Tp, _Args...>::element_type type;
        -:  759:};
        -:  760:
        -:  761:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:  762:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:  763:{
        -:  764:    typedef _LIBCPP_NODEBUG_TYPE _Tp type;
        -:  765:};
        -:  766:
        -:  767:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  768:
        -:  769:template <template <class> class _Sp, class _Tp>
        -:  770:struct __pointer_traits_element_type<_Sp<_Tp>, true>
        -:  771:{
        -:  772:    typedef typename _Sp<_Tp>::element_type type;
        -:  773:};
        -:  774:
        -:  775:template <template <class> class _Sp, class _Tp>
        -:  776:struct __pointer_traits_element_type<_Sp<_Tp>, false>
        -:  777:{
        -:  778:    typedef _Tp type;
        -:  779:};
        -:  780:
        -:  781:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  782:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, true>
        -:  783:{
        -:  784:    typedef typename _Sp<_Tp, _A0>::element_type type;
        -:  785:};
        -:  786:
        -:  787:template <template <class, class> class _Sp, class _Tp, class _A0>
        -:  788:struct __pointer_traits_element_type<_Sp<_Tp, _A0>, false>
        -:  789:{
        -:  790:    typedef _Tp type;
        -:  791:};
        -:  792:
        -:  793:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  794:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, true>
        -:  795:{
        -:  796:    typedef typename _Sp<_Tp, _A0, _A1>::element_type type;
        -:  797:};
        -:  798:
        -:  799:template <template <class, class, class> class _Sp, class _Tp, class _A0, class _A1>
        -:  800:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1>, false>
        -:  801:{
        -:  802:    typedef _Tp type;
        -:  803:};
        -:  804:
        -:  805:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  806:                                                           class _A1, class _A2>
        -:  807:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, true>
        -:  808:{
        -:  809:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::element_type type;
        -:  810:};
        -:  811:
        -:  812:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  813:                                                           class _A1, class _A2>
        -:  814:struct __pointer_traits_element_type<_Sp<_Tp, _A0, _A1, _A2>, false>
        -:  815:{
        -:  816:    typedef _Tp type;
        -:  817:};
        -:  818:
        -:  819:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  820:
        -:  821:template <class _Tp, class = void>
        -:  822:struct __has_difference_type : false_type {};
        -:  823:
        -:  824:template <class _Tp>
        -:  825:struct __has_difference_type<_Tp,
        -:  826:            typename __void_t<typename _Tp::difference_type>::type> : true_type {};
        -:  827:
        -:  828:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:  829:struct __pointer_traits_difference_type
        -:  830:{
        -:  831:    typedef _LIBCPP_NODEBUG_TYPE ptrdiff_t type;
        -:  832:};
        -:  833:
        -:  834:template <class _Ptr>
        -:  835:struct __pointer_traits_difference_type<_Ptr, true>
        -:  836:{
        -:  837:    typedef _LIBCPP_NODEBUG_TYPE typename _Ptr::difference_type type;
        -:  838:};
        -:  839:
        -:  840:template <class _Tp, class _Up>
        -:  841:struct __has_rebind
        -:  842:{
        -:  843:private:
        -:  844:    struct __two {char __lx; char __lxx;};
        -:  845:    template <class _Xp> static __two __test(...);
        -:  846:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>* = 0);
        -:  847:public:
        -:  848:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -:  849:};
        -:  850:
        -:  851:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:  852:struct __pointer_traits_rebind
        -:  853:{
        -:  854:#ifndef _LIBCPP_CXX03_LANG
        -:  855:    typedef _LIBCPP_NODEBUG_TYPE typename _Tp::template rebind<_Up> type;
        -:  856:#else
        -:  857:    typedef _LIBCPP_NODEBUG_TYPE typename _Tp::template rebind<_Up>::other type;
        -:  858:#endif
        -:  859:};
        -:  860:
        -:  861:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -:  862:
        -:  863:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  864:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:  865:{
        -:  866:#ifndef _LIBCPP_CXX03_LANG
        -:  867:    typedef _LIBCPP_NODEBUG_TYPE typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:  868:#else
        -:  869:    typedef _LIBCPP_NODEBUG_TYPE typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  870:#endif
        -:  871:};
        -:  872:
        -:  873:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  874:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  875:{
        -:  876:    typedef _Sp<_Up, _Args...> type;
        -:  877:};
        -:  878:
        -:  879:#else  // _LIBCPP_HAS_NO_VARIADICS
        -:  880:
        -:  881:template <template <class> class _Sp, class _Tp, class _Up>
        -:  882:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, true>
        -:  883:{
        -:  884:#ifndef _LIBCPP_CXX03_LANG
        -:  885:    typedef typename _Sp<_Tp>::template rebind<_Up> type;
        -:  886:#else
        -:  887:    typedef typename _Sp<_Tp>::template rebind<_Up>::other type;
        -:  888:#endif
        -:  889:};
        -:  890:
        -:  891:template <template <class> class _Sp, class _Tp, class _Up>
        -:  892:struct __pointer_traits_rebind<_Sp<_Tp>, _Up, false>
        -:  893:{
        -:  894:    typedef _Sp<_Up> type;
        -:  895:};
        -:  896:
        -:  897:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  898:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, true>
        -:  899:{
        -:  900:#ifndef _LIBCPP_CXX03_LANG
        -:  901:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up> type;
        -:  902:#else
        -:  903:    typedef typename _Sp<_Tp, _A0>::template rebind<_Up>::other type;
        -:  904:#endif
        -:  905:};
        -:  906:
        -:  907:template <template <class, class> class _Sp, class _Tp, class _A0, class _Up>
        -:  908:struct __pointer_traits_rebind<_Sp<_Tp, _A0>, _Up, false>
        -:  909:{
        -:  910:    typedef _Sp<_Up, _A0> type;
        -:  911:};
        -:  912:
        -:  913:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  914:                                         class _A1, class _Up>
        -:  915:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, true>
        -:  916:{
        -:  917:#ifndef _LIBCPP_CXX03_LANG
        -:  918:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up> type;
        -:  919:#else
        -:  920:    typedef typename _Sp<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -:  921:#endif
        -:  922:};
        -:  923:
        -:  924:template <template <class, class, class> class _Sp, class _Tp, class _A0,
        -:  925:                                         class _A1, class _Up>
        -:  926:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1>, _Up, false>
        -:  927:{
        -:  928:    typedef _Sp<_Up, _A0, _A1> type;
        -:  929:};
        -:  930:
        -:  931:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  932:                                                class _A1, class _A2, class _Up>
        -:  933:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, true>
        -:  934:{
        -:  935:#ifndef _LIBCPP_CXX03_LANG
        -:  936:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up> type;
        -:  937:#else
        -:  938:    typedef typename _Sp<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -:  939:#endif
        -:  940:};
        -:  941:
        -:  942:template <template <class, class, class, class> class _Sp, class _Tp, class _A0,
        -:  943:                                                class _A1, class _A2, class _Up>
        -:  944:struct __pointer_traits_rebind<_Sp<_Tp, _A0, _A1, _A2>, _Up, false>
        -:  945:{
        -:  946:    typedef _Sp<_Up, _A0, _A1, _A2> type;
        -:  947:};
        -:  948:
        -:  949:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -:  950:
        -:  951:template <class _Ptr>
        -:  952:struct _LIBCPP_TEMPLATE_VIS pointer_traits
        -:  953:{
        -:  954:    typedef _Ptr                                                     pointer;
        -:  955:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  956:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  957:
        -:  958:#ifndef _LIBCPP_CXX03_LANG
        -:  959:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  960:#else
        -:  961:    template <class _Up> struct rebind
        -:  962:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  963:#endif  // _LIBCPP_CXX03_LANG
        -:  964:
        -:  965:private:
        -:  966:    struct __nat {};
        -:  967:public:
        -:  968:    _LIBCPP_INLINE_VISIBILITY
        -:  969:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  970:                                           __nat, element_type>::type& __r)
        -:  971:        {return pointer::pointer_to(__r);}
        -:  972:};
        -:  973:
        -:  974:template <class _Tp>
        -:  975:struct _LIBCPP_TEMPLATE_VIS pointer_traits<_Tp*>
        -:  976:{
        -:  977:    typedef _Tp*      pointer;
        -:  978:    typedef _Tp       element_type;
        -:  979:    typedef ptrdiff_t difference_type;
        -:  980:
        -:  981:#ifndef _LIBCPP_CXX03_LANG
        -:  982:    template <class _Up> using rebind = _Up*;
        -:  983:#else
        -:  984:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  985:#endif
        -:  986:
        -:  987:private:
        -:  988:    struct __nat {};
        -:  989:public:
        -:  990:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__114pointer_traitsIPKcE10pointer_toERS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPcE10pointer_toERc called 0 returned 0% blocks executed 0%
    #####:  991:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
    $$$$$:  991-block  0
    $$$$$:  991-block  1
        -:  992:                                      __nat, element_type>::type& __r) _NOEXCEPT
    #####:  993:        {return _VSTD::addressof(__r);}
    $$$$$:  993-block  0
    $$$$$:  993-block  1
        -:  994:};
        -:  995:
        -:  996:template <class _From, class _To>
        -:  997:struct __rebind_pointer {
        -:  998:#ifndef _LIBCPP_CXX03_LANG
        -:  999:    typedef typename pointer_traits<_From>::template rebind<_To>        type;
        -: 1000:#else
        -: 1001:    typedef typename pointer_traits<_From>::template rebind<_To>::other type;
        -: 1002:#endif
        -: 1003:};
        -: 1004:
        -: 1005:// allocator_traits
        -: 1006:
        -: 1007:template <class _Tp, class = void>
        -: 1008:struct __has_pointer_type : false_type {};
        -: 1009:
        -: 1010:template <class _Tp>
        -: 1011:struct __has_pointer_type<_Tp,
        -: 1012:          typename __void_t<typename _Tp::pointer>::type> : true_type {};
        -: 1013:
        -: 1014:namespace __pointer_type_imp
        -: 1015:{
        -: 1016:
        -: 1017:template <class _Tp, class _Dp, bool = __has_pointer_type<_Dp>::value>
        -: 1018:struct __pointer_type
        -: 1019:{
        -: 1020:    typedef _LIBCPP_NODEBUG_TYPE typename _Dp::pointer type;
        -: 1021:};
        -: 1022:
        -: 1023:template <class _Tp, class _Dp>
        -: 1024:struct __pointer_type<_Tp, _Dp, false>
        -: 1025:{
        -: 1026:    typedef _LIBCPP_NODEBUG_TYPE _Tp* type;
        -: 1027:};
        -: 1028:
        -: 1029:}  // __pointer_type_imp
        -: 1030:
        -: 1031:template <class _Tp, class _Dp>
        -: 1032:struct __pointer_type
        -: 1033:{
        -: 1034:    typedef _LIBCPP_NODEBUG_TYPE typename __pointer_type_imp::__pointer_type<_Tp, typename remove_reference<_Dp>::type>::type type;
        -: 1035:};
        -: 1036:
        -: 1037:template <class _Tp, class = void>
        -: 1038:struct __has_const_pointer : false_type {};
        -: 1039:
        -: 1040:template <class _Tp>
        -: 1041:struct __has_const_pointer<_Tp,
        -: 1042:            typename __void_t<typename _Tp::const_pointer>::type> : true_type {};
        -: 1043:
        -: 1044:template <class _Tp, class _Ptr, class _Alloc, bool = __has_const_pointer<_Alloc>::value>
        -: 1045:struct __const_pointer
        -: 1046:{
        -: 1047:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::const_pointer type;
        -: 1048:};
        -: 1049:
        -: 1050:template <class _Tp, class _Ptr, class _Alloc>
        -: 1051:struct __const_pointer<_Tp, _Ptr, _Alloc, false>
        -: 1052:{
        -: 1053:#ifndef _LIBCPP_CXX03_LANG
        -: 1054:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<const _Tp> type;
        -: 1055:#else
        -: 1056:    typedef typename pointer_traits<_Ptr>::template rebind<const _Tp>::other type;
        -: 1057:#endif
        -: 1058:};
        -: 1059:
        -: 1060:template <class _Tp, class = void>
        -: 1061:struct __has_void_pointer : false_type {};
        -: 1062:
        -: 1063:template <class _Tp>
        -: 1064:struct __has_void_pointer<_Tp,
        -: 1065:               typename __void_t<typename _Tp::void_pointer>::type> : true_type {};
        -: 1066:
        -: 1067:template <class _Ptr, class _Alloc, bool = __has_void_pointer<_Alloc>::value>
        -: 1068:struct __void_pointer
        -: 1069:{
        -: 1070:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::void_pointer type;
        -: 1071:};
        -: 1072:
        -: 1073:template <class _Ptr, class _Alloc>
        -: 1074:struct __void_pointer<_Ptr, _Alloc, false>
        -: 1075:{
        -: 1076:#ifndef _LIBCPP_CXX03_LANG
        -: 1077:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<void> type;
        -: 1078:#else
        -: 1079:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<void>::other type;
        -: 1080:#endif
        -: 1081:};
        -: 1082:
        -: 1083:template <class _Tp, class = void>
        -: 1084:struct __has_const_void_pointer : false_type {};
        -: 1085:
        -: 1086:template <class _Tp>
        -: 1087:struct __has_const_void_pointer<_Tp,
        -: 1088:            typename __void_t<typename _Tp::const_void_pointer>::type> : true_type {};
        -: 1089:
        -: 1090:template <class _Ptr, class _Alloc, bool = __has_const_void_pointer<_Alloc>::value>
        -: 1091:struct __const_void_pointer
        -: 1092:{
        -: 1093:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::const_void_pointer type;
        -: 1094:};
        -: 1095:
        -: 1096:template <class _Ptr, class _Alloc>
        -: 1097:struct __const_void_pointer<_Ptr, _Alloc, false>
        -: 1098:{
        -: 1099:#ifndef _LIBCPP_CXX03_LANG
        -: 1100:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<const void> type;
        -: 1101:#else
        -: 1102:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::template rebind<const void>::other type;
        -: 1103:#endif
        -: 1104:};
        -: 1105:
        -: 1106:
        -: 1107:template <bool _UsePointerTraits> struct __to_address_helper;
        -: 1108:
        -: 1109:template <> struct __to_address_helper<true> {
        -: 1110:    template <class _Pointer>
        -: 1111:    using __return_type = decltype(pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()));
        -: 1112:
        -: 1113:    template <class _Pointer>
        -: 1114:    _LIBCPP_CONSTEXPR
        -: 1115:    static __return_type<_Pointer>
        -: 1116:    __do_it(const _Pointer &__p) _NOEXCEPT { return pointer_traits<_Pointer>::to_address(__p); }
        -: 1117:};
        -: 1118:
        -: 1119:template <class _Pointer, bool _Dummy = true>
        -: 1120:using __choose_to_address = __to_address_helper<_IsValidExpansion<__to_address_helper<_Dummy>::template __return_type, _Pointer>::value>;
        -: 1121:
        -: 1122:
        -: 1123:template <class _Tp>
        -: 1124:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1125:_Tp*
function _ZNSt3__1L12__to_addressIKcEEPT_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L12__to_addressIiEEPT_S2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1L12__to_addressINS_6vectorIiNS_9allocatorIiEEEEEEPT_S6_ called 0 returned 0% blocks executed 0%
    #####: 1126:__to_address(_Tp* __p) _NOEXCEPT
    $$$$$: 1126-block  0
    $$$$$: 1126-block  1
    $$$$$: 1126-block  2
        -: 1127:{
        -: 1128:    static_assert(!is_function<_Tp>::value, "_Tp is a function type");
    #####: 1129:    return __p;
    $$$$$: 1129-block  0
    $$$$$: 1129-block  1
    $$$$$: 1129-block  2
        -: 1130:}
        -: 1131:
        -: 1132:template <class _Pointer>
        -: 1133:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1134:typename __choose_to_address<_Pointer>::template __return_type<_Pointer>
        -: 1135:__to_address(const _Pointer& __p) _NOEXCEPT {
        -: 1136:  return __choose_to_address<_Pointer>::__do_it(__p);
        -: 1137:}
        -: 1138:
        -: 1139:template <> struct __to_address_helper<false> {
        -: 1140:    template <class _Pointer>
        -: 1141:    using __return_type = typename pointer_traits<_Pointer>::element_type*;
        -: 1142:
        -: 1143:    template <class _Pointer>
        -: 1144:    _LIBCPP_CONSTEXPR
        -: 1145:    static __return_type<_Pointer>
        -: 1146:    __do_it(const _Pointer &__p) _NOEXCEPT { return std::__to_address(__p.operator->()); }
        -: 1147:};
        -: 1148:
        -: 1149:
        -: 1150:#if _LIBCPP_STD_VER > 17
        -: 1151:template <class _Tp>
        -: 1152:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -: 1153:_Tp*
        -: 1154:to_address(_Tp* __p) _NOEXCEPT
        -: 1155:{
        -: 1156:    static_assert(!is_function_v<_Tp>, "_Tp is a function type");
        -: 1157:    return __p;
        -: 1158:}
        -: 1159:
        -: 1160:template <class _Pointer>
        -: 1161:inline _LIBCPP_INLINE_VISIBILITY
        -: 1162:auto
        -: 1163:to_address(const _Pointer& __p) _NOEXCEPT
        -: 1164:{
        -: 1165:    return _VSTD::__to_address(__p);
        -: 1166:}
        -: 1167:#endif
        -: 1168:
        -: 1169:template <class _Tp, class = void>
        -: 1170:struct __has_size_type : false_type {};
        -: 1171:
        -: 1172:template <class _Tp>
        -: 1173:struct __has_size_type<_Tp,
        -: 1174:               typename __void_t<typename _Tp::size_type>::type> : true_type {};
        -: 1175:
        -: 1176:template <class _Alloc, class _DiffType, bool = __has_size_type<_Alloc>::value>
        -: 1177:struct __size_type
        -: 1178:{
        -: 1179:    typedef _LIBCPP_NODEBUG_TYPE typename make_unsigned<_DiffType>::type type;
        -: 1180:};
        -: 1181:
        -: 1182:template <class _Alloc, class _DiffType>
        -: 1183:struct __size_type<_Alloc, _DiffType, true>
        -: 1184:{
        -: 1185:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::size_type type;
        -: 1186:};
        -: 1187:
        -: 1188:template <class _Tp, class = void>
        -: 1189:struct __has_propagate_on_container_copy_assignment : false_type {};
        -: 1190:
        -: 1191:template <class _Tp>
        -: 1192:struct __has_propagate_on_container_copy_assignment<_Tp,
        -: 1193:    typename __void_t<typename _Tp::propagate_on_container_copy_assignment>::type>
        -: 1194:        : true_type {};
        -: 1195:
        -: 1196:template <class _Alloc, bool = __has_propagate_on_container_copy_assignment<_Alloc>::value>
        -: 1197:struct __propagate_on_container_copy_assignment
        -: 1198:{
        -: 1199:    typedef _LIBCPP_NODEBUG_TYPE false_type type;
        -: 1200:};
        -: 1201:
        -: 1202:template <class _Alloc>
        -: 1203:struct __propagate_on_container_copy_assignment<_Alloc, true>
        -: 1204:{
        -: 1205:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::propagate_on_container_copy_assignment type;
        -: 1206:};
        -: 1207:
        -: 1208:template <class _Tp, class = void>
        -: 1209:struct __has_propagate_on_container_move_assignment : false_type {};
        -: 1210:
        -: 1211:template <class _Tp>
        -: 1212:struct __has_propagate_on_container_move_assignment<_Tp,
        -: 1213:           typename __void_t<typename _Tp::propagate_on_container_move_assignment>::type>
        -: 1214:               : true_type {};
        -: 1215:
        -: 1216:template <class _Alloc, bool = __has_propagate_on_container_move_assignment<_Alloc>::value>
        -: 1217:struct __propagate_on_container_move_assignment
        -: 1218:{
        -: 1219:    typedef false_type type;
        -: 1220:};
        -: 1221:
        -: 1222:template <class _Alloc>
        -: 1223:struct __propagate_on_container_move_assignment<_Alloc, true>
        -: 1224:{
        -: 1225:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::propagate_on_container_move_assignment type;
        -: 1226:};
        -: 1227:
        -: 1228:template <class _Tp, class = void>
        -: 1229:struct __has_propagate_on_container_swap : false_type {};
        -: 1230:
        -: 1231:template <class _Tp>
        -: 1232:struct __has_propagate_on_container_swap<_Tp,
        -: 1233:           typename __void_t<typename _Tp::propagate_on_container_swap>::type>
        -: 1234:               : true_type {};
        -: 1235:
        -: 1236:template <class _Alloc, bool = __has_propagate_on_container_swap<_Alloc>::value>
        -: 1237:struct __propagate_on_container_swap
        -: 1238:{
        -: 1239:    typedef false_type type;
        -: 1240:};
        -: 1241:
        -: 1242:template <class _Alloc>
        -: 1243:struct __propagate_on_container_swap<_Alloc, true>
        -: 1244:{
        -: 1245:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::propagate_on_container_swap type;
        -: 1246:};
        -: 1247:
        -: 1248:template <class _Tp, class = void>
        -: 1249:struct __has_is_always_equal : false_type {};
        -: 1250:
        -: 1251:template <class _Tp>
        -: 1252:struct __has_is_always_equal<_Tp,
        -: 1253:           typename __void_t<typename _Tp::is_always_equal>::type>
        -: 1254:               : true_type {};
        -: 1255:
        -: 1256:template <class _Alloc, bool = __has_is_always_equal<_Alloc>::value>
        -: 1257:struct __is_always_equal
        -: 1258:{
        -: 1259:    typedef _LIBCPP_NODEBUG_TYPE typename _VSTD::is_empty<_Alloc>::type type;
        -: 1260:};
        -: 1261:
        -: 1262:template <class _Alloc>
        -: 1263:struct __is_always_equal<_Alloc, true>
        -: 1264:{
        -: 1265:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::is_always_equal type;
        -: 1266:};
        -: 1267:
        -: 1268:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -: 1269:struct __has_rebind_other
        -: 1270:{
        -: 1271:private:
        -: 1272:    struct __two {char __lx; char __lxx;};
        -: 1273:    template <class _Xp> static __two __test(...);
        -: 1274:    template <class _Xp> static char __test(typename _Xp::template rebind<_Up>::other* = 0);
        -: 1275:public:
        -: 1276:    static const bool value = sizeof(__test<_Tp>(0)) == 1;
        -: 1277:};
        -: 1278:
        -: 1279:template <class _Tp, class _Up>
        -: 1280:struct __has_rebind_other<_Tp, _Up, false>
        -: 1281:{
        -: 1282:    static const bool value = false;
        -: 1283:};
        -: 1284:
        -: 1285:template <class _Tp, class _Up, bool = __has_rebind_other<_Tp, _Up>::value>
        -: 1286:struct __allocator_traits_rebind
        -: 1287:{
        -: 1288:    typedef _LIBCPP_NODEBUG_TYPE typename _Tp::template rebind<_Up>::other type;
        -: 1289:};
        -: 1290:
        -: 1291:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1292:
        -: 1293:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1294:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, true>
        -: 1295:{
        -: 1296:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc<_Tp, _Args...>::template rebind<_Up>::other type;
        -: 1297:};
        -: 1298:
        -: 1299:template <template <class, class...> class _Alloc, class _Tp, class ..._Args, class _Up>
        -: 1300:struct __allocator_traits_rebind<_Alloc<_Tp, _Args...>, _Up, false>
        -: 1301:{
        -: 1302:    typedef _LIBCPP_NODEBUG_TYPE _Alloc<_Up, _Args...> type;
        -: 1303:};
        -: 1304:
        -: 1305:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1306:
        -: 1307:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1308:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, true>
        -: 1309:{
        -: 1310:    typedef typename _Alloc<_Tp>::template rebind<_Up>::other type;
        -: 1311:};
        -: 1312:
        -: 1313:template <template <class> class _Alloc, class _Tp, class _Up>
        -: 1314:struct __allocator_traits_rebind<_Alloc<_Tp>, _Up, false>
        -: 1315:{
        -: 1316:    typedef _Alloc<_Up> type;
        -: 1317:};
        -: 1318:
        -: 1319:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1320:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, true>
        -: 1321:{
        -: 1322:    typedef typename _Alloc<_Tp, _A0>::template rebind<_Up>::other type;
        -: 1323:};
        -: 1324:
        -: 1325:template <template <class, class> class _Alloc, class _Tp, class _A0, class _Up>
        -: 1326:struct __allocator_traits_rebind<_Alloc<_Tp, _A0>, _Up, false>
        -: 1327:{
        -: 1328:    typedef _Alloc<_Up, _A0> type;
        -: 1329:};
        -: 1330:
        -: 1331:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1332:                                         class _A1, class _Up>
        -: 1333:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, true>
        -: 1334:{
        -: 1335:    typedef typename _Alloc<_Tp, _A0, _A1>::template rebind<_Up>::other type;
        -: 1336:};
        -: 1337:
        -: 1338:template <template <class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1339:                                         class _A1, class _Up>
        -: 1340:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1>, _Up, false>
        -: 1341:{
        -: 1342:    typedef _Alloc<_Up, _A0, _A1> type;
        -: 1343:};
        -: 1344:
        -: 1345:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1346:                                                class _A1, class _A2, class _Up>
        -: 1347:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, true>
        -: 1348:{
        -: 1349:    typedef typename _Alloc<_Tp, _A0, _A1, _A2>::template rebind<_Up>::other type;
        -: 1350:};
        -: 1351:
        -: 1352:template <template <class, class, class, class> class _Alloc, class _Tp, class _A0,
        -: 1353:                                                class _A1, class _A2, class _Up>
        -: 1354:struct __allocator_traits_rebind<_Alloc<_Tp, _A0, _A1, _A2>, _Up, false>
        -: 1355:{
        -: 1356:    typedef _Alloc<_Up, _A0, _A1, _A2> type;
        -: 1357:};
        -: 1358:
        -: 1359:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1360:
        -: 1361:#ifndef _LIBCPP_CXX03_LANG
        -: 1362:
        -: 1363:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1364:auto
        -: 1365:__has_allocate_hint_test(_Alloc&& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1366:    -> decltype((void)__a.allocate(__sz, __p), true_type());
        -: 1367:
        -: 1368:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1369:auto
        -: 1370:__has_allocate_hint_test(const _Alloc& __a, _SizeType&& __sz, _ConstVoidPtr&& __p)
        -: 1371:    -> false_type;
        -: 1372:
        -: 1373:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1374:struct __has_allocate_hint
        -: 1375:    : integral_constant<bool,
        -: 1376:        is_same<
        -: 1377:            decltype(_VSTD::__has_allocate_hint_test(declval<_Alloc>(),
        -: 1378:                                          declval<_SizeType>(),
        -: 1379:                                          declval<_ConstVoidPtr>())),
        -: 1380:            true_type>::value>
        -: 1381:{
        -: 1382:};
        -: 1383:
        -: 1384:#else  // _LIBCPP_CXX03_LANG
        -: 1385:
        -: 1386:template <class _Alloc, class _SizeType, class _ConstVoidPtr>
        -: 1387:struct __has_allocate_hint
        -: 1388:    : true_type
        -: 1389:{
        -: 1390:};
        -: 1391:
        -: 1392:#endif  // _LIBCPP_CXX03_LANG
        -: 1393:
        -: 1394:#if !defined(_LIBCPP_CXX03_LANG)
        -: 1395:
        -: 1396:template <class _Alloc, class _Tp, class ..._Args>
        -: 1397:decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Tp*>(),
        -: 1398:                                           _VSTD::declval<_Args>()...),
        -: 1399:                                           true_type())
        -: 1400:__has_construct_test(_Alloc&& __a, _Tp* __p, _Args&& ...__args);
        -: 1401:
        -: 1402:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1403:false_type
        -: 1404:__has_construct_test(const _Alloc& __a, _Pointer&& __p, _Args&& ...__args);
        -: 1405:
        -: 1406:template <class _Alloc, class _Pointer, class ..._Args>
        -: 1407:struct __has_construct
        -: 1408:    : integral_constant<bool,
        -: 1409:        is_same<
        -: 1410:            decltype(_VSTD::__has_construct_test(declval<_Alloc>(),
        -: 1411:                                          declval<_Pointer>(),
        -: 1412:                                          declval<_Args>()...)),
        -: 1413:            true_type>::value>
        -: 1414:{
        -: 1415:};
        -: 1416:
        -: 1417:template <class _Alloc, class _Pointer>
        -: 1418:auto
        -: 1419:__has_destroy_test(_Alloc&& __a, _Pointer&& __p)
        -: 1420:    -> decltype(__a.destroy(__p), true_type());
        -: 1421:
        -: 1422:template <class _Alloc, class _Pointer>
        -: 1423:auto
        -: 1424:__has_destroy_test(const _Alloc& __a, _Pointer&& __p)
        -: 1425:    -> false_type;
        -: 1426:
        -: 1427:template <class _Alloc, class _Pointer>
        -: 1428:struct __has_destroy
        -: 1429:    : integral_constant<bool,
        -: 1430:        is_same<
        -: 1431:            decltype(_VSTD::__has_destroy_test(declval<_Alloc>(),
        -: 1432:                                        declval<_Pointer>())),
        -: 1433:            true_type>::value>
        -: 1434:{
        -: 1435:};
        -: 1436:
        -: 1437:template <class _Alloc>
        -: 1438:auto
        -: 1439:__has_max_size_test(_Alloc&& __a)
        -: 1440:    -> decltype(__a.max_size(), true_type());
        -: 1441:
        -: 1442:template <class _Alloc>
        -: 1443:auto
        -: 1444:__has_max_size_test(const volatile _Alloc& __a)
        -: 1445:    -> false_type;
        -: 1446:
        -: 1447:template <class _Alloc>
        -: 1448:struct __has_max_size
        -: 1449:    : integral_constant<bool,
        -: 1450:        is_same<
        -: 1451:            decltype(_VSTD::__has_max_size_test(declval<_Alloc&>())),
        -: 1452:            true_type>::value>
        -: 1453:{
        -: 1454:};
        -: 1455:
        -: 1456:template <class _Alloc>
        -: 1457:auto
        -: 1458:__has_select_on_container_copy_construction_test(_Alloc&& __a)
        -: 1459:    -> decltype(__a.select_on_container_copy_construction(), true_type());
        -: 1460:
        -: 1461:template <class _Alloc>
        -: 1462:auto
        -: 1463:__has_select_on_container_copy_construction_test(const volatile _Alloc& __a)
        -: 1464:    -> false_type;
        -: 1465:
        -: 1466:template <class _Alloc>
        -: 1467:struct __has_select_on_container_copy_construction
        -: 1468:    : integral_constant<bool,
        -: 1469:        is_same<
        -: 1470:            decltype(_VSTD::__has_select_on_container_copy_construction_test(declval<_Alloc&>())),
        -: 1471:            true_type>::value>
        -: 1472:{
        -: 1473:};
        -: 1474:
        -: 1475:#else  // _LIBCPP_CXX03_LANG
        -: 1476:
        -: 1477:template <class _Alloc, class _Pointer, class _Tp, class = void>
        -: 1478:struct __has_construct : std::false_type {};
        -: 1479:
        -: 1480:template <class _Alloc, class _Pointer, class _Tp>
        -: 1481:struct __has_construct<_Alloc, _Pointer, _Tp, typename __void_t<
        -: 1482:    decltype(_VSTD::declval<_Alloc>().construct(_VSTD::declval<_Pointer>(), _VSTD::declval<_Tp>()))
        -: 1483:>::type> : std::true_type {};
        -: 1484:
        -: 1485:template <class _Alloc, class _Pointer, class = void>
        -: 1486:struct __has_destroy : false_type {};
        -: 1487:
        -: 1488:template <class _Alloc, class _Pointer>
        -: 1489:struct __has_destroy<_Alloc, _Pointer, typename __void_t<
        -: 1490:    decltype(_VSTD::declval<_Alloc>().destroy(_VSTD::declval<_Pointer>()))
        -: 1491:>::type> : std::true_type {};
        -: 1492:
        -: 1493:template <class _Alloc>
        -: 1494:struct __has_max_size
        -: 1495:    : true_type
        -: 1496:{
        -: 1497:};
        -: 1498:
        -: 1499:template <class _Alloc>
        -: 1500:struct __has_select_on_container_copy_construction
        -: 1501:    : false_type
        -: 1502:{
        -: 1503:};
        -: 1504:
        -: 1505:#endif  // _LIBCPP_CXX03_LANG
        -: 1506:
        -: 1507:template <class _Alloc, class _Ptr, bool = __has_difference_type<_Alloc>::value>
        -: 1508:struct __alloc_traits_difference_type
        -: 1509:{
        -: 1510:    typedef _LIBCPP_NODEBUG_TYPE typename pointer_traits<_Ptr>::difference_type type;
        -: 1511:};
        -: 1512:
        -: 1513:template <class _Alloc, class _Ptr>
        -: 1514:struct __alloc_traits_difference_type<_Alloc, _Ptr, true>
        -: 1515:{
        -: 1516:    typedef _LIBCPP_NODEBUG_TYPE typename _Alloc::difference_type type;
        -: 1517:};
        -: 1518:
        -: 1519:template <class _Tp>
        -: 1520:struct __is_default_allocator : false_type {};
        -: 1521:
        -: 1522:template <class _Tp>
        -: 1523:struct __is_default_allocator<_VSTD::allocator<_Tp> > : true_type {};
        -: 1524:
        -: 1525:
        -: 1526:
        -: 1527:template <class _Alloc,
        -: 1528:    bool = __has_construct<_Alloc, typename _Alloc::value_type*,  typename _Alloc::value_type&&>::value && !__is_default_allocator<_Alloc>::value
        -: 1529:    >
        -: 1530:struct __is_cpp17_move_insertable;
        -: 1531:template <class _Alloc>
        -: 1532:struct __is_cpp17_move_insertable<_Alloc, true> : std::true_type {};
        -: 1533:template <class _Alloc>
        -: 1534:struct __is_cpp17_move_insertable<_Alloc, false> : std::is_move_constructible<typename _Alloc::value_type> {};
        -: 1535:
        -: 1536:template <class _Alloc,
        -: 1537:    bool = __has_construct<_Alloc, typename _Alloc::value_type*, const typename _Alloc::value_type&>::value && !__is_default_allocator<_Alloc>::value
        -: 1538:    >
        -: 1539:struct __is_cpp17_copy_insertable;
        -: 1540:template <class _Alloc>
        -: 1541:struct __is_cpp17_copy_insertable<_Alloc, true> : __is_cpp17_move_insertable<_Alloc> {};
        -: 1542:template <class _Alloc>
        -: 1543:struct __is_cpp17_copy_insertable<_Alloc, false> : integral_constant<bool,
        -: 1544:    std::is_copy_constructible<typename _Alloc::value_type>::value &&
        -: 1545:    __is_cpp17_move_insertable<_Alloc>::value>
        -: 1546:  {};
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:template <class _Alloc>
        -: 1551:struct _LIBCPP_TEMPLATE_VIS allocator_traits
        -: 1552:{
        -: 1553:    typedef _Alloc                              allocator_type;
        -: 1554:    typedef typename allocator_type::value_type value_type;
        -: 1555:
        -: 1556:    typedef typename __pointer_type<value_type, allocator_type>::type pointer;
        -: 1557:    typedef typename __const_pointer<value_type, pointer, allocator_type>::type const_pointer;
        -: 1558:    typedef typename __void_pointer<pointer, allocator_type>::type void_pointer;
        -: 1559:    typedef typename __const_void_pointer<pointer, allocator_type>::type const_void_pointer;
        -: 1560:
        -: 1561:    typedef typename __alloc_traits_difference_type<allocator_type, pointer>::type difference_type;
        -: 1562:    typedef typename __size_type<allocator_type, difference_type>::type size_type;
        -: 1563:
        -: 1564:    typedef typename __propagate_on_container_copy_assignment<allocator_type>::type
        -: 1565:                     propagate_on_container_copy_assignment;
        -: 1566:    typedef typename __propagate_on_container_move_assignment<allocator_type>::type
        -: 1567:                     propagate_on_container_move_assignment;
        -: 1568:    typedef typename __propagate_on_container_swap<allocator_type>::type
        -: 1569:                     propagate_on_container_swap;
        -: 1570:    typedef typename __is_always_equal<allocator_type>::type
        -: 1571:                     is_always_equal;
        -: 1572:
        -: 1573:#ifndef _LIBCPP_CXX03_LANG
        -: 1574:    template <class _Tp> using rebind_alloc =
        -: 1575:                  typename __allocator_traits_rebind<allocator_type, _Tp>::type;
        -: 1576:    template <class _Tp> using rebind_traits = allocator_traits<rebind_alloc<_Tp> >;
        -: 1577:#else  // _LIBCPP_CXX03_LANG
        -: 1578:    template <class _Tp> struct rebind_alloc
        -: 1579:        {typedef typename __allocator_traits_rebind<allocator_type, _Tp>::type other;};
        -: 1580:    template <class _Tp> struct rebind_traits
        -: 1581:        {typedef allocator_traits<typename rebind_alloc<_Tp>::other> other;};
        -: 1582:#endif  // _LIBCPP_CXX03_LANG
        -: 1583:
        -: 1584:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE8allocateERS2_m called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE8allocateERS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorIcEEE8allocateERS2_m called 0 returned 0% blocks executed 0%
    #####: 1585:    static pointer allocate(allocator_type& __a, size_type __n)
    $$$$$: 1585-block  0
    $$$$$: 1585-block  1
    $$$$$: 1585-block  2
    #####: 1586:        {return __a.allocate(__n);}
    $$$$$: 1586-block  0
    $$$$$: 1586-block  1
    $$$$$: 1586-block  2
        -: 1587:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
        -: 1588:    static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
        -: 1589:        {return __allocate(__a, __n, __hint,
        -: 1590:            __has_allocate_hint<allocator_type, size_type, const_void_pointer>());}
        -: 1591:
        -: 1592:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE10deallocateERS2_Pim called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE10deallocateERS5_PS4_m called 0 returned 0% blocks executed 0%
    #####: 1593:    static void deallocate(allocator_type& __a, pointer __p, size_type __n) _NOEXCEPT
    $$$$$: 1593-block  0
    $$$$$: 1593-block  1
    #####: 1594:        {__a.deallocate(__p, __n);}
    $$$$$: 1594-block  0
    $$$$$: 1594-block  1
        -: 1595:
        -: 1596:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1597:    template <class _Tp, class... _Args>
        -: 1598:        _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE9constructIS4_JRKS4_EEEvRS5_PT_DpOT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE9constructIS4_JRS4_EEEvRS5_PT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####: 1599:        static void construct(allocator_type& __a, _Tp* __p, _Args&&... __args)
    $$$$$: 1599-block  0
    $$$$$: 1599-block  1
    #####: 1600:            {__construct(__has_construct<allocator_type, _Tp*, _Args...>(),
    #####: 1601:                         __a, __p, _VSTD::forward<_Args>(__args)...);}
    $$$$$: 1601-block  0
    $$$$$: 1601-block  1
    $$$$$: 1601-block  2
    $$$$$: 1601-block  3
        -: 1602:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1603:    template <class _Tp>
        -: 1604:        _LIBCPP_INLINE_VISIBILITY
        -: 1605:        static void construct(allocator_type&, _Tp* __p)
        -: 1606:            {
        -: 1607:                ::new ((void*)__p) _Tp();
        -: 1608:            }
        -: 1609:    template <class _Tp, class _A0>
        -: 1610:        _LIBCPP_INLINE_VISIBILITY
        -: 1611:        static void construct(allocator_type& __a, _Tp* __p, const _A0& __a0)
        -: 1612:            {
        -: 1613:                __construct(__has_construct<allocator_type, _Tp*, const _A0&>(),
        -: 1614:                            __a, __p, __a0);
        -: 1615:            }
        -: 1616:    template <class _Tp, class _A0, class _A1>
        -: 1617:        _LIBCPP_INLINE_VISIBILITY
        -: 1618:        static void construct(allocator_type&, _Tp* __p, const _A0& __a0,
        -: 1619:                              const _A1& __a1)
        -: 1620:            {
        -: 1621:                ::new ((void*)__p) _Tp(__a0, __a1);
        -: 1622:            }
        -: 1623:    template <class _Tp, class _A0, class _A1, class _A2>
        -: 1624:        _LIBCPP_INLINE_VISIBILITY
        -: 1625:        static void construct(allocator_type&, _Tp* __p, const _A0& __a0,
        -: 1626:                              const _A1& __a1, const _A2& __a2)
        -: 1627:            {
        -: 1628:                ::new ((void*)__p) _Tp(__a0, __a1, __a2);
        -: 1629:            }
        -: 1630:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1631:
        -: 1632:    template <class _Tp>
        -: 1633:        _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE7destroyIiEEvRS2_PT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE7destroyIS4_EEvRS5_PT_ called 0 returned 0% blocks executed 0%
    #####: 1634:        static void destroy(allocator_type& __a, _Tp* __p)
    $$$$$: 1634-block  0
    $$$$$: 1634-block  1
    #####: 1635:            {__destroy(__has_destroy<allocator_type, _Tp*>(), __a, __p);}
    $$$$$: 1635-block  0
    $$$$$: 1635-block  1
        -: 1636:
        -: 1637:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE8max_sizeERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE8max_sizeERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorIcEEE8max_sizeERKS2_ called 0 returned 0% blocks executed 0%
    #####: 1638:    static size_type max_size(const allocator_type& __a) _NOEXCEPT
    $$$$$: 1638-block  0
    $$$$$: 1638-block  1
    $$$$$: 1638-block  2
    #####: 1639:        {return __max_size(__has_max_size<const allocator_type>(), __a);}
    $$$$$: 1639-block  0
    $$$$$: 1639-block  1
    $$$$$: 1639-block  2
        -: 1640:
        -: 1641:    _LIBCPP_INLINE_VISIBILITY
        -: 1642:    static allocator_type
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE37select_on_container_copy_constructionERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE37select_on_container_copy_constructionERKS5_ called 0 returned 0% blocks executed 0%
    #####: 1643:        select_on_container_copy_construction(const allocator_type& __a)
    $$$$$: 1643-block  0
    $$$$$: 1643-block  1
    #####: 1644:            {return __select_on_container_copy_construction(
    $$$$$: 1644-block  0
    $$$$$: 1644-block  1
    #####: 1645:                __has_select_on_container_copy_construction<const allocator_type>(),
    #####: 1646:                __a);}
        -: 1647:
        -: 1648:    template <class _Ptr>
        -: 1649:        _LIBCPP_INLINE_VISIBILITY
        -: 1650:        static
        -: 1651:        void
        -: 1652:        __construct_forward_with_exception_guarantees(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __begin2)
        -: 1653:        {
        -: 1654:            static_assert(__is_cpp17_move_insertable<allocator_type>::value,
        -: 1655:              "The specified type does not meet the requirements of Cpp17MoveInsertible");
        -: 1656:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
        -: 1657:              construct(__a, _VSTD::__to_address(__begin2),
        -: 1658:#ifdef _LIBCPP_NO_EXCEPTIONS
        -: 1659:                        _VSTD::move(*__begin1)
        -: 1660:#else
        -: 1661:                        _VSTD::move_if_noexcept(*__begin1)
        -: 1662:#endif
        -: 1663:                        );
        -: 1664:        }
        -: 1665:
        -: 1666:    template <class _Tp>
        -: 1667:        _LIBCPP_INLINE_VISIBILITY
        -: 1668:        static
        -: 1669:        typename enable_if
        -: 1670:        <
        -: 1671:            (__is_default_allocator<allocator_type>::value
        -: 1672:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1673:             is_trivially_move_constructible<_Tp>::value,
        -: 1674:            void
        -: 1675:        >::type
        -: 1676:        __construct_forward_with_exception_guarantees(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __begin2)
        -: 1677:        {
        -: 1678:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1679:            if (_Np > 0)
        -: 1680:            {
        -: 1681:                _VSTD::memcpy(__begin2, __begin1, _Np * sizeof(_Tp));
        -: 1682:                __begin2 += _Np;
        -: 1683:            }
        -: 1684:        }
        -: 1685:
        -: 1686:    template <class _Iter, class _Ptr>
        -: 1687:        _LIBCPP_INLINE_VISIBILITY
        -: 1688:        static
        -: 1689:        void
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE25__construct_range_forwardIPKS4_PS4_EEvRS5_T_SC_RT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE25__construct_range_forwardIPS4_S8_EEvRS5_T_SA_RT0_ called 0 returned 0% blocks executed 0%
    #####: 1690:        __construct_range_forward(allocator_type& __a, _Iter __begin1, _Iter __end1, _Ptr& __begin2)
    $$$$$: 1690-block  0
    $$$$$: 1690-block  1
        -: 1691:        {
    #####: 1692:            for (; __begin1 != __end1; ++__begin1, (void) ++__begin2)
    $$$$$: 1692-block  0
    $$$$$: 1692-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 1692-block  2
    $$$$$: 1692-block  3
    $$$$$: 1692-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 1692-block  5
    #####: 1693:                construct(__a, _VSTD::__to_address(__begin2), *__begin1);
    $$$$$: 1693-block  0
    $$$$$: 1693-block  1
    #####: 1694:        }
    $$$$$: 1694-block  0
    $$$$$: 1694-block  1
        -: 1695:
        -: 1696:    template <class _SourceTp, class _DestTp,
        -: 1697:              class _RawSourceTp = typename remove_const<_SourceTp>::type,
        -: 1698:              class _RawDestTp = typename remove_const<_DestTp>::type>
        -: 1699:        _LIBCPP_INLINE_VISIBILITY
        -: 1700:        static
        -: 1701:        typename enable_if
        -: 1702:        <
        -: 1703:            is_trivially_copy_constructible<_DestTp>::value &&
        -: 1704:            is_same<_RawSourceTp, _RawDestTp>::value &&
        -: 1705:            (__is_default_allocator<allocator_type>::value ||
        -: 1706:             !__has_construct<allocator_type, _DestTp*, _SourceTp&>::value),
        -: 1707:            void
        -: 1708:        >::type
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE25__construct_range_forwardIKiiiiEENS_9enable_ifIXaaaasr31is_trivially_copy_constructibleIT0_EE5valuesr7is_sameIT1_T2_EE5valueooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructIS2_PS7_RT_EE5valueEvE4typeERS2_PSD_SI_RSC_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE25__construct_range_forwardIiiiiEENS_9enable_ifIXaaaasr31is_trivially_copy_constructibleIT0_EE5valuesr7is_sameIT1_T2_EE5valueooL_ZNS_17integral_constantIbLb1EE5valueEEntsr15__has_constructIS2_PS6_RT_EE5valueEvE4typeERS2_PSC_SH_RSB_ called 0 returned 0% blocks executed 0%
    #####: 1709:        __construct_range_forward(allocator_type&, _SourceTp* __begin1, _SourceTp* __end1, _DestTp*& __begin2)
    $$$$$: 1709-block  0
    $$$$$: 1709-block  1
        -: 1710:        {
    #####: 1711:            ptrdiff_t _Np = __end1 - __begin1;
    #####: 1712:            if (_Np > 0)
    $$$$$: 1712-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1712-block  1
branch  2 never executed
branch  3 never executed
        -: 1713:            {
    #####: 1714:                _VSTD::memcpy(const_cast<_RawDestTp*>(__begin2), __begin1, _Np * sizeof(_DestTp));
    #####: 1715:                __begin2 += _Np;
    #####: 1716:            }
    $$$$$: 1716-block  0
    $$$$$: 1716-block  1
    #####: 1717:        }
    $$$$$: 1717-block  0
    $$$$$: 1717-block  1
        -: 1718:
        -: 1719:    template <class _Ptr>
        -: 1720:        _LIBCPP_INLINE_VISIBILITY
        -: 1721:        static
        -: 1722:        void
        -: 1723:        __construct_backward_with_exception_guarantees(allocator_type& __a, _Ptr __begin1, _Ptr __end1, _Ptr& __end2)
        -: 1724:        {
        -: 1725:            static_assert(__is_cpp17_move_insertable<allocator_type>::value,
        -: 1726:              "The specified type does not meet the requirements of Cpp17MoveInsertable");
        -: 1727:            while (__end1 != __begin1)
        -: 1728:            {
        -: 1729:              construct(__a, _VSTD::__to_address(__end2 - 1),
        -: 1730:#ifdef _LIBCPP_NO_EXCEPTIONS
        -: 1731:                        _VSTD::move(*--__end1)
        -: 1732:#else
        -: 1733:                        _VSTD::move_if_noexcept(*--__end1)
        -: 1734:#endif
        -: 1735:                        );
        -: 1736:              --__end2;
        -: 1737:            }
        -: 1738:        }
        -: 1739:
        -: 1740:    template <class _Tp>
        -: 1741:        _LIBCPP_INLINE_VISIBILITY
        -: 1742:        static
        -: 1743:        typename enable_if
        -: 1744:        <
        -: 1745:            (__is_default_allocator<allocator_type>::value
        -: 1746:                || !__has_construct<allocator_type, _Tp*, _Tp>::value) &&
        -: 1747:             is_trivially_move_constructible<_Tp>::value,
        -: 1748:            void
        -: 1749:        >::type
        -: 1750:        __construct_backward_with_exception_guarantees(allocator_type&, _Tp* __begin1, _Tp* __end1, _Tp*& __end2)
        -: 1751:        {
        -: 1752:            ptrdiff_t _Np = __end1 - __begin1;
        -: 1753:            __end2 -= _Np;
        -: 1754:            if (_Np > 0)
        -: 1755:                _VSTD::memcpy(__end2, __begin1, _Np * sizeof(_Tp));
        -: 1756:        }
        -: 1757:
        -: 1758:private:
        -: 1759:
        -: 1760:    _LIBCPP_INLINE_VISIBILITY
        -: 1761:    static pointer __allocate(allocator_type& __a, size_type __n,
        -: 1762:        const_void_pointer __hint, true_type)
        -: 1763:        {return __a.allocate(__n, __hint);}
        -: 1764:    _LIBCPP_INLINE_VISIBILITY
        -: 1765:    static pointer __allocate(allocator_type& __a, size_type __n,
        -: 1766:        const_void_pointer, false_type)
        -: 1767:        {return __a.allocate(__n);}
        -: 1768:
        -: 1769:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 1770:    template <class _Tp, class... _Args>
        -: 1771:        _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE11__constructIS4_JRKS4_EEEvNS_17integral_constantIbLb1EEERS5_PT_DpOT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE11__constructIS4_JRS4_EEEvNS_17integral_constantIbLb1EEERS5_PT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####: 1772:        static void __construct(true_type, allocator_type& __a, _Tp* __p, _Args&&... __args)
    $$$$$: 1772-block  0
    $$$$$: 1772-block  1
    #####: 1773:            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}
    $$$$$: 1773-block  0
    $$$$$: 1773-block  1
        -: 1774:    template <class _Tp, class... _Args>
        -: 1775:        _LIBCPP_INLINE_VISIBILITY
        -: 1776:        static void __construct(false_type, allocator_type&, _Tp* __p, _Args&&... __args)
        -: 1777:            {
        -: 1778:                ::new ((void*)__p) _Tp(_VSTD::forward<_Args>(__args)...);
        -: 1779:            }
        -: 1780:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 1781:    template <class _Tp, class _A0>
        -: 1782:        _LIBCPP_INLINE_VISIBILITY
        -: 1783:        static void __construct(true_type, allocator_type& __a, _Tp* __p,
        -: 1784:                                const _A0& __a0)
        -: 1785:            {__a.construct(__p, __a0);}
        -: 1786:    template <class _Tp, class _A0>
        -: 1787:        _LIBCPP_INLINE_VISIBILITY
        -: 1788:        static void __construct(false_type, allocator_type&, _Tp* __p,
        -: 1789:                                const _A0& __a0)
        -: 1790:            {
        -: 1791:                ::new ((void*)__p) _Tp(__a0);
        -: 1792:            }
        -: 1793:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 1794:
        -: 1795:    template <class _Tp>
        -: 1796:        _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE9__destroyIiEEvNS_17integral_constantIbLb1EEERS2_PT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE9__destroyIS4_EEvNS_17integral_constantIbLb1EEERS5_PT_ called 0 returned 0% blocks executed 0%
    #####: 1797:        static void __destroy(true_type, allocator_type& __a, _Tp* __p)
    $$$$$: 1797-block  0
    $$$$$: 1797-block  1
    #####: 1798:            {__a.destroy(__p);}
    $$$$$: 1798-block  0
    $$$$$: 1798-block  1
        -: 1799:    template <class _Tp>
        -: 1800:        _LIBCPP_INLINE_VISIBILITY
        -: 1801:        static void __destroy(false_type, allocator_type&, _Tp* __p)
        -: 1802:            {
        -: 1803:                __p->~_Tp();
        -: 1804:            }
        -: 1805:
        -: 1806:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE10__max_sizeENS_17integral_constantIbLb1EEERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorIcEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_ called 0 returned 0% blocks executed 0%
    #####: 1807:    static size_type __max_size(true_type, const allocator_type& __a) _NOEXCEPT
    $$$$$: 1807-block  0
    $$$$$: 1807-block  1
    $$$$$: 1807-block  2
    #####: 1808:            {return __a.max_size();}
    $$$$$: 1808-block  0
    $$$$$: 1808-block  1
    $$$$$: 1808-block  2
        -: 1809:    _LIBCPP_INLINE_VISIBILITY
        -: 1810:    static size_type __max_size(false_type, const allocator_type&) _NOEXCEPT
        -: 1811:            {return numeric_limits<size_type>::max() / sizeof(value_type);}
        -: 1812:
        -: 1813:    _LIBCPP_INLINE_VISIBILITY
        -: 1814:    static allocator_type
        -: 1815:        __select_on_container_copy_construction(true_type, const allocator_type& __a)
        -: 1816:            {return __a.select_on_container_copy_construction();}
        -: 1817:    _LIBCPP_INLINE_VISIBILITY
        -: 1818:    static allocator_type
function _ZNSt3__116allocator_traitsINS_9allocatorIiEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__116allocator_traitsINS_9allocatorINS_6vectorIiNS1_IiEEEEEEE39__select_on_container_copy_constructionENS_17integral_constantIbLb0EEERKS5_ called 0 returned 0% blocks executed 0%
    #####: 1819:        __select_on_container_copy_construction(false_type, const allocator_type& __a)
    $$$$$: 1819-block  0
    $$$$$: 1819-block  1
    #####: 1820:            {return __a;}
    $$$$$: 1820-block  0
    $$$$$: 1820-block  1
        -: 1821:};
        -: 1822:
        -: 1823:template <class _Traits, class _Tp>
        -: 1824:struct __rebind_alloc_helper
        -: 1825:{
        -: 1826:#ifndef _LIBCPP_CXX03_LANG
        -: 1827:    typedef _LIBCPP_NODEBUG_TYPE typename _Traits::template rebind_alloc<_Tp>        type;
        -: 1828:#else
        -: 1829:    typedef typename _Traits::template rebind_alloc<_Tp>::other type;
        -: 1830:#endif
        -: 1831:};
        -: 1832:
        -: 1833:// allocator
        -: 1834:
        -: 1835:template <class _Tp>
        -: 1836:class _LIBCPP_TEMPLATE_VIS allocator
        -: 1837:{
        -: 1838:public:
        -: 1839:    typedef size_t            size_type;
        -: 1840:    typedef ptrdiff_t         difference_type;
        -: 1841:    typedef _Tp*              pointer;
        -: 1842:    typedef const _Tp*        const_pointer;
        -: 1843:    typedef _Tp&              reference;
        -: 1844:    typedef const _Tp&        const_reference;
        -: 1845:    typedef _Tp               value_type;
        -: 1846:
        -: 1847:    typedef true_type propagate_on_container_move_assignment;
        -: 1848:    typedef true_type is_always_equal;
        -: 1849:
        -: 1850:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1851:
        -: 1852:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__19allocatorIcEC2Ev called 4 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIiEC2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIiNS0_IiEEEEEC2Ev called 0 returned 0% blocks executed 0%
        4: 1853:    allocator() _NOEXCEPT {}
        4: 1853-block  0
        4: 1853-block  1
    $$$$$: 1853-block  2
    $$$$$: 1853-block  3
    $$$$$: 1853-block  4
    $$$$$: 1853-block  5
        -: 1854:
        -: 1855:    template <class _Up>
        -: 1856:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1857:    allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1858:
        -: 1859:    _LIBCPP_INLINE_VISIBILITY pointer address(reference __x) const _NOEXCEPT
        -: 1860:        {return _VSTD::addressof(__x);}
        -: 1861:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1862:        {return _VSTD::addressof(__x);}
        -: 1863:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__19allocatorIiE8allocateEmPKv called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIiNS0_IiEEEEE8allocateEmPKv called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIcE8allocateEmPKv called 0 returned 0% blocks executed 0%
    #####: 1864:    pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
    $$$$$: 1864-block  0
    $$$$$: 1864-block  1
    $$$$$: 1864-block  2
        -: 1865:        {
    #####: 1866:        if (__n > max_size())
    $$$$$: 1866-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1866-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1866-block  2
branch  4 never executed
branch  5 never executed
    #####: 1867:            __throw_length_error("allocator<T>::allocate(size_t n)"
    $$$$$: 1867-block  0
    $$$$$: 1867-block  1
    $$$$$: 1867-block  2
        -: 1868:                                 " 'n' exceeds maximum supported size");
    #####: 1869:        return static_cast<pointer>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
    $$$$$: 1869-block  0
    $$$$$: 1869-block  1
    $$$$$: 1869-block  2
        -: 1870:        }
function _ZNSt3__19allocatorIiE10deallocateEPim called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIiNS0_IiEEEEE10deallocateEPS3_m called 0 returned 0% blocks executed 0%
    #####: 1871:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type __n) _NOEXCEPT
    $$$$$: 1871-block  0
    $$$$$: 1871-block  1
    #####: 1872:        {_VSTD::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));}
    $$$$$: 1872-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1872-block  1
    $$$$$: 1872-block  2
    $$$$$: 1872-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 1872-block  4
    $$$$$: 1872-block  5
function _ZNKSt3__19allocatorIiE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__19allocatorINS_6vectorIiNS0_IiEEEEE8max_sizeEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__19allocatorIcE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####: 1873:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
    $$$$$: 1873-block  0
    $$$$$: 1873-block  1
    $$$$$: 1873-block  2
    #####: 1874:        {return size_type(~0) / sizeof(_Tp);}
    $$$$$: 1874-block  0
    $$$$$: 1874-block  1
    $$$$$: 1874-block  2
        -: 1875:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1876:    template <class _Up, class... _Args>
        -: 1877:        _LIBCPP_INLINE_VISIBILITY
        -: 1878:        void
function _ZNSt3__19allocatorINS_6vectorIiNS0_IiEEEEE9constructIS3_JRKS3_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIiNS0_IiEEEEE9constructIS3_JRS3_EEEvPT_DpOT0_ called 0 returned 0% blocks executed 0%
    #####: 1879:        construct(_Up* __p, _Args&&... __args)
    $$$$$: 1879-block  0
    $$$$$: 1879-block  1
        -: 1880:        {
    #####: 1881:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
    #####: 1882:        }
    $$$$$: 1882-block  0
    $$$$$: 1882-block  1
        -: 1883:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1884:        _LIBCPP_INLINE_VISIBILITY
        -: 1885:        void
        -: 1886:        construct(pointer __p)
        -: 1887:        {
        -: 1888:            ::new((void*)__p) _Tp();
        -: 1889:        }
        -: 1890:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1891:
        -: 1892:    template <class _A0>
        -: 1893:        _LIBCPP_INLINE_VISIBILITY
        -: 1894:        void
        -: 1895:        construct(pointer __p, _A0& __a0)
        -: 1896:        {
        -: 1897:            ::new((void*)__p) _Tp(__a0);
        -: 1898:        }
        -: 1899:    template <class _A0>
        -: 1900:        _LIBCPP_INLINE_VISIBILITY
        -: 1901:        void
        -: 1902:        construct(pointer __p, const _A0& __a0)
        -: 1903:        {
        -: 1904:            ::new((void*)__p) _Tp(__a0);
        -: 1905:        }
        -: 1906:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1907:    template <class _A0, class _A1>
        -: 1908:        _LIBCPP_INLINE_VISIBILITY
        -: 1909:        void
        -: 1910:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 1911:        {
        -: 1912:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1913:        }
        -: 1914:    template <class _A0, class _A1>
        -: 1915:        _LIBCPP_INLINE_VISIBILITY
        -: 1916:        void
        -: 1917:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 1918:        {
        -: 1919:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1920:        }
        -: 1921:    template <class _A0, class _A1>
        -: 1922:        _LIBCPP_INLINE_VISIBILITY
        -: 1923:        void
        -: 1924:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 1925:        {
        -: 1926:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1927:        }
        -: 1928:    template <class _A0, class _A1>
        -: 1929:        _LIBCPP_INLINE_VISIBILITY
        -: 1930:        void
        -: 1931:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 1932:        {
        -: 1933:            ::new((void*)__p) _Tp(__a0, __a1);
        -: 1934:        }
        -: 1935:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
function _ZNSt3__19allocatorIiE7destroyEPi called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIiNS0_IiEEEEE7destroyEPS3_ called 0 returned 0% blocks executed 0%
    #####: 1936:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
    $$$$$: 1936-block  0
    $$$$$: 1936-block  1
    $$$$$: 1936-block  2
    $$$$$: 1936-block  3
        -: 1937:};
        -: 1938:
        -: 1939:template <class _Tp>
        -: 1940:class _LIBCPP_TEMPLATE_VIS allocator<const _Tp>
        -: 1941:{
        -: 1942:public:
        -: 1943:    typedef size_t            size_type;
        -: 1944:    typedef ptrdiff_t         difference_type;
        -: 1945:    typedef const _Tp*        pointer;
        -: 1946:    typedef const _Tp*        const_pointer;
        -: 1947:    typedef const _Tp&        reference;
        -: 1948:    typedef const _Tp&        const_reference;
        -: 1949:    typedef const _Tp         value_type;
        -: 1950:
        -: 1951:    typedef true_type propagate_on_container_move_assignment;
        -: 1952:    typedef true_type is_always_equal;
        -: 1953:
        -: 1954:    template <class _Up> struct rebind {typedef allocator<_Up> other;};
        -: 1955:
        -: 1956:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1957:    allocator() _NOEXCEPT {}
        -: 1958:
        -: 1959:    template <class _Up>
        -: 1960:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -: 1961:    allocator(const allocator<_Up>&) _NOEXCEPT {}
        -: 1962:
        -: 1963:    _LIBCPP_INLINE_VISIBILITY const_pointer address(const_reference __x) const _NOEXCEPT
        -: 1964:        {return _VSTD::addressof(__x);}
        -: 1965:    _LIBCPP_INLINE_VISIBILITY pointer allocate(size_type __n, allocator<void>::const_pointer = 0)
        -: 1966:    {
        -: 1967:        if (__n > max_size())
        -: 1968:            __throw_length_error("allocator<const T>::allocate(size_t n)"
        -: 1969:                                 " 'n' exceeds maximum supported size");
        -: 1970:        return static_cast<pointer>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
        -: 1971:    }
        -: 1972:    _LIBCPP_INLINE_VISIBILITY void deallocate(pointer __p, size_type __n) _NOEXCEPT
        -: 1973:        {_VSTD::__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));}
        -: 1974:    _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT
        -: 1975:        {return size_type(~0) / sizeof(_Tp);}
        -: 1976:#if !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1977:    template <class _Up, class... _Args>
        -: 1978:        _LIBCPP_INLINE_VISIBILITY
        -: 1979:        void
        -: 1980:        construct(_Up* __p, _Args&&... __args)
        -: 1981:        {
        -: 1982:            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -: 1983:        }
        -: 1984:#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 1985:        _LIBCPP_INLINE_VISIBILITY
        -: 1986:        void
        -: 1987:        construct(pointer __p)
        -: 1988:        {
        -: 1989:            ::new((void*) const_cast<_Tp *>(__p)) _Tp();
        -: 1990:        }
        -: 1991:# if defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 1992:
        -: 1993:    template <class _A0>
        -: 1994:        _LIBCPP_INLINE_VISIBILITY
        -: 1995:        void
        -: 1996:        construct(pointer __p, _A0& __a0)
        -: 1997:        {
        -: 1998:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0);
        -: 1999:        }
        -: 2000:    template <class _A0>
        -: 2001:        _LIBCPP_INLINE_VISIBILITY
        -: 2002:        void
        -: 2003:        construct(pointer __p, const _A0& __a0)
        -: 2004:        {
        -: 2005:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0);
        -: 2006:        }
        -: 2007:# endif  // defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES)
        -: 2008:    template <class _A0, class _A1>
        -: 2009:        _LIBCPP_INLINE_VISIBILITY
        -: 2010:        void
        -: 2011:        construct(pointer __p, _A0& __a0, _A1& __a1)
        -: 2012:        {
        -: 2013:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 2014:        }
        -: 2015:    template <class _A0, class _A1>
        -: 2016:        _LIBCPP_INLINE_VISIBILITY
        -: 2017:        void
        -: 2018:        construct(pointer __p, const _A0& __a0, _A1& __a1)
        -: 2019:        {
        -: 2020:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 2021:        }
        -: 2022:    template <class _A0, class _A1>
        -: 2023:        _LIBCPP_INLINE_VISIBILITY
        -: 2024:        void
        -: 2025:        construct(pointer __p, _A0& __a0, const _A1& __a1)
        -: 2026:        {
        -: 2027:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 2028:        }
        -: 2029:    template <class _A0, class _A1>
        -: 2030:        _LIBCPP_INLINE_VISIBILITY
        -: 2031:        void
        -: 2032:        construct(pointer __p, const _A0& __a0, const _A1& __a1)
        -: 2033:        {
        -: 2034:            ::new((void*) const_cast<_Tp *>(__p)) _Tp(__a0, __a1);
        -: 2035:        }
        -: 2036:#endif  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) && !defined(_LIBCPP_HAS_NO_VARIADICS)
        -: 2037:    _LIBCPP_INLINE_VISIBILITY void destroy(pointer __p) {__p->~_Tp();}
        -: 2038:};
        -: 2039:
        -: 2040:template <class _Tp, class _Up>
        -: 2041:inline _LIBCPP_INLINE_VISIBILITY
        -: 2042:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -: 2043:
        -: 2044:template <class _Tp, class _Up>
        -: 2045:inline _LIBCPP_INLINE_VISIBILITY
        -: 2046:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -: 2047:
        -: 2048:template <class _OutputIterator, class _Tp>
        -: 2049:class _LIBCPP_TEMPLATE_VIS raw_storage_iterator
        -: 2050:    : public iterator<output_iterator_tag,
        -: 2051:                      _Tp,                                         // purposefully not C++03
        -: 2052:                      ptrdiff_t,                                   // purposefully not C++03
        -: 2053:                      _Tp*,                                        // purposefully not C++03
        -: 2054:                      raw_storage_iterator<_OutputIterator, _Tp>&> // purposefully not C++03
        -: 2055:{
        -: 2056:private:
        -: 2057:    _OutputIterator __x_;
        -: 2058:public:
        -: 2059:    _LIBCPP_INLINE_VISIBILITY explicit raw_storage_iterator(_OutputIterator __x) : __x_(__x) {}
        -: 2060:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator*() {return *this;}
        -: 2061:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(const _Tp& __element)
        -: 2062:        {::new(_VSTD::addressof(*__x_)) _Tp(__element); return *this;}
        -: 2063:#if _LIBCPP_STD_VER >= 14
        -: 2064:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator=(_Tp&& __element)
        -: 2065:        {::new(_VSTD::addressof(*__x_)) _Tp(_VSTD::move(__element)); return *this;}
        -: 2066:#endif
        -: 2067:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator& operator++() {++__x_; return *this;}
        -: 2068:    _LIBCPP_INLINE_VISIBILITY raw_storage_iterator  operator++(int)
        -: 2069:        {raw_storage_iterator __t(*this); ++__x_; return __t;}
        -: 2070:#if _LIBCPP_STD_VER >= 14
        -: 2071:    _LIBCPP_INLINE_VISIBILITY _OutputIterator base() const { return __x_; }
        -: 2072:#endif
        -: 2073:};
        -: 2074:
        -: 2075:template <class _Tp>
        -: 2076:_LIBCPP_NODISCARD_EXT _LIBCPP_NO_CFI
        -: 2077:pair<_Tp*, ptrdiff_t>
        -: 2078:get_temporary_buffer(ptrdiff_t __n) _NOEXCEPT
        -: 2079:{
        -: 2080:    pair<_Tp*, ptrdiff_t> __r(0, 0);
        -: 2081:    const ptrdiff_t __m = (~ptrdiff_t(0) ^
        -: 2082:                           ptrdiff_t(ptrdiff_t(1) << (sizeof(ptrdiff_t) * __CHAR_BIT__ - 1)))
        -: 2083:                           / sizeof(_Tp);
        -: 2084:    if (__n > __m)
        -: 2085:        __n = __m;
        -: 2086:    while (__n > 0)
        -: 2087:    {
        -: 2088:#if !defined(_LIBCPP_HAS_NO_ALIGNED_ALLOCATION)
        -: 2089:    if (__is_overaligned_for_new(_LIBCPP_ALIGNOF(_Tp)))
        -: 2090:        {
        -: 2091:            std::align_val_t __al =
        -: 2092:                std::align_val_t(std::alignment_of<_Tp>::value);
        -: 2093:            __r.first = static_cast<_Tp*>(::operator new(
        -: 2094:                __n * sizeof(_Tp), __al, nothrow));
        -: 2095:        } else {
        -: 2096:            __r.first = static_cast<_Tp*>(::operator new(
        -: 2097:                __n * sizeof(_Tp), nothrow));
        -: 2098:        }
        -: 2099:#else
        -: 2100:    if (__is_overaligned_for_new(_LIBCPP_ALIGNOF(_Tp)))
        -: 2101:        {
        -: 2102:            // Since aligned operator new is unavailable, return an empty
        -: 2103:            // buffer rather than one with invalid alignment.
        -: 2104:            return __r;
        -: 2105:        }
        -: 2106:
        -: 2107:        __r.first = static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), nothrow));
        -: 2108:#endif
        -: 2109:
        -: 2110:        if (__r.first)
        -: 2111:        {
        -: 2112:            __r.second = __n;
        -: 2113:            break;
        -: 2114:        }
        -: 2115:        __n /= 2;
        -: 2116:    }
        -: 2117:    return __r;
        -: 2118:}
        -: 2119:
        -: 2120:template <class _Tp>
        -: 2121:inline _LIBCPP_INLINE_VISIBILITY
        -: 2122:void return_temporary_buffer(_Tp* __p) _NOEXCEPT
        -: 2123:{
        -: 2124:  _VSTD::__libcpp_deallocate_unsized((void*)__p, _LIBCPP_ALIGNOF(_Tp));
        -: 2125:}
        -: 2126:
        -: 2127:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2128:template <class _Tp>
        -: 2129:struct _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr_ref
        -: 2130:{
        -: 2131:    _Tp* __ptr_;
        -: 2132:};
        -: 2133:
        -: 2134:template<class _Tp>
        -: 2135:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr
        -: 2136:{
        -: 2137:private:
        -: 2138:    _Tp* __ptr_;
        -: 2139:public:
        -: 2140:    typedef _Tp element_type;
        -: 2141:
        -: 2142:    _LIBCPP_INLINE_VISIBILITY explicit auto_ptr(_Tp* __p = 0) throw() : __ptr_(__p) {}
        -: 2143:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr& __p) throw() : __ptr_(__p.release()) {}
        -: 2144:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr<_Up>& __p) throw()
        -: 2145:        : __ptr_(__p.release()) {}
        -: 2146:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr& __p) throw()
        -: 2147:        {reset(__p.release()); return *this;}
        -: 2148:    template<class _Up> _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr<_Up>& __p) throw()
        -: 2149:        {reset(__p.release()); return *this;}
        -: 2150:    _LIBCPP_INLINE_VISIBILITY auto_ptr& operator=(auto_ptr_ref<_Tp> __p) throw()
        -: 2151:        {reset(__p.__ptr_); return *this;}
        -: 2152:    _LIBCPP_INLINE_VISIBILITY ~auto_ptr() throw() {delete __ptr_;}
        -: 2153:
        -: 2154:    _LIBCPP_INLINE_VISIBILITY _Tp& operator*() const throw()
        -: 2155:        {return *__ptr_;}
        -: 2156:    _LIBCPP_INLINE_VISIBILITY _Tp* operator->() const throw() {return __ptr_;}
        -: 2157:    _LIBCPP_INLINE_VISIBILITY _Tp* get() const throw() {return __ptr_;}
        -: 2158:    _LIBCPP_INLINE_VISIBILITY _Tp* release() throw()
        -: 2159:    {
        -: 2160:        _Tp* __t = __ptr_;
        -: 2161:        __ptr_ = 0;
        -: 2162:        return __t;
        -: 2163:    }
        -: 2164:    _LIBCPP_INLINE_VISIBILITY void reset(_Tp* __p = 0) throw()
        -: 2165:    {
        -: 2166:        if (__ptr_ != __p)
        -: 2167:            delete __ptr_;
        -: 2168:        __ptr_ = __p;
        -: 2169:    }
        -: 2170:
        -: 2171:    _LIBCPP_INLINE_VISIBILITY auto_ptr(auto_ptr_ref<_Tp> __p) throw() : __ptr_(__p.__ptr_) {}
        -: 2172:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr_ref<_Up>() throw()
        -: 2173:        {auto_ptr_ref<_Up> __t; __t.__ptr_ = release(); return __t;}
        -: 2174:    template<class _Up> _LIBCPP_INLINE_VISIBILITY operator auto_ptr<_Up>() throw()
        -: 2175:        {return auto_ptr<_Up>(release());}
        -: 2176:};
        -: 2177:
        -: 2178:template <>
        -: 2179:class _LIBCPP_TEMPLATE_VIS _LIBCPP_DEPRECATED_IN_CXX11 auto_ptr<void>
        -: 2180:{
        -: 2181:public:
        -: 2182:    typedef void element_type;
        -: 2183:};
        -: 2184:#endif
        -: 2185:
        -: 2186:// Tag used to default initialize one or both of the pair's elements.
        -: 2187:struct __default_init_tag {};
        -: 2188:struct __value_init_tag {};
        -: 2189:
        -: 2190:template <class _Tp, int _Idx,
        -: 2191:          bool _CanBeEmptyBase =
        -: 2192:              is_empty<_Tp>::value && !__libcpp_is_final<_Tp>::value>
        -: 2193:struct __compressed_pair_elem {
        -: 2194:  typedef _Tp _ParamT;
        -: 2195:  typedef _Tp& reference;
        -: 2196:  typedef const _Tp& const_reference;
        -: 2197:
        -: 2198:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__122__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EEC2ENS_18__default_init_tagE called 4 returned 100% blocks executed 100%
        4: 2199:  __compressed_pair_elem(__default_init_tag) {}
        4: 2199-block  0
        4: 2199-block  1
        -: 2200:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 2201:  __compressed_pair_elem(__value_init_tag) : __value_() {}
        -: 2202:
        -: 2203:  template <class _Up, class = typename enable_if<
        -: 2204:      !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 2205:  >::type>
        -: 2206:  _LIBCPP_INLINE_VISIBILITY
        -: 2207:  _LIBCPP_CONSTEXPR explicit
function _ZNSt3__122__compressed_pair_elemIPiLi0ELb0EEC2IDnvEEOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemIPNS_6vectorIiNS_9allocatorIiEEEELi0ELb0EEC2IDnvEEOT_ called 0 returned 0% blocks executed 0%
    #####: 2208:  __compressed_pair_elem(_Up&& __u)
    $$$$$: 2208-block  0
    $$$$$: 2208-block  1
    #####: 2209:      : __value_(_VSTD::forward<_Up>(__u))
        -: 2210:    {
    #####: 2211:    }
    $$$$$: 2211-block  0
    $$$$$: 2211-block  1
        -: 2212:
        -: 2213:
        -: 2214:#ifndef _LIBCPP_CXX03_LANG
        -: 2215:  template <class... _Args, size_t... _Indexes>
        -: 2216:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 2217:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 2218:                         __tuple_indices<_Indexes...>)
        -: 2219:      : __value_(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 2220:#endif
        -: 2221:
        -: 2222:
function _ZNSt3__122__compressed_pair_elemIPiLi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemIPNS_6vectorIiNS_9allocatorIiEEEELi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
    #####: 2223:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return __value_; }
    $$$$$: 2223-block  0
    $$$$$: 2223-block  1
    $$$$$: 2223-block  2
    $$$$$: 2223-block  3
    $$$$$: 2223-block  4
    $$$$$: 2223-block  5
        -: 2224:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__122__compressed_pair_elemINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repELi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__122__compressed_pair_elemIPiLi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__122__compressed_pair_elemIPNS_6vectorIiNS_9allocatorIiEEEELi0ELb0EE5__getEv called 0 returned 0% blocks executed 0%
    #####: 2225:  const_reference __get() const _NOEXCEPT { return __value_; }
    $$$$$: 2225-block  0
    $$$$$: 2225-block  1
    $$$$$: 2225-block  2
    $$$$$: 2225-block  3
    $$$$$: 2225-block  4
    $$$$$: 2225-block  5
        -: 2226:
        -: 2227:private:
        -: 2228:  _Tp __value_;
        -: 2229:};
        -: 2230:
        -: 2231:template <class _Tp, int _Idx>
        -: 2232:struct __compressed_pair_elem<_Tp, _Idx, true> : private _Tp {
        -: 2233:  typedef _Tp _ParamT;
        -: 2234:  typedef _Tp& reference;
        -: 2235:  typedef const _Tp& const_reference;
        -: 2236:  typedef _Tp __value_type;
        -: 2237:
        -: 2238:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR __compressed_pair_elem() = default;
        -: 2239:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2ENS_18__default_init_tagE called 4 returned 100% blocks executed 100%
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIiEELi1ELb1EEC2ENS_18__default_init_tagE called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_9allocatorINS_6vectorIiNS1_IiEEEEEELi1ELb1EEC2ENS_18__default_init_tagE called 0 returned 0% blocks executed 0%
        4: 2240:  __compressed_pair_elem(__default_init_tag) {}
        4: 2240-block  0
        4: 2240-block  1
    $$$$$: 2240-block  2
    $$$$$: 2240-block  3
    $$$$$: 2240-block  4
    $$$$$: 2240-block  5
        -: 2241:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 2242:  __compressed_pair_elem(__value_init_tag) : __value_type() {}
        -: 2243:
        -: 2244:  template <class _Up, class = typename enable_if<
        -: 2245:        !is_same<__compressed_pair_elem, typename decay<_Up>::type>::value
        -: 2246:  >::type>
        -: 2247:  _LIBCPP_INLINE_VISIBILITY
        -: 2248:  _LIBCPP_CONSTEXPR explicit
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIiEELi1ELb1EEC2IS2_vEEOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_9allocatorINS_6vectorIiNS1_IiEEEEEELi1ELb1EEC2IS5_vEEOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EEC2IRKS2_vEEOT_ called 0 returned 0% blocks executed 0%
    #####: 2249:  __compressed_pair_elem(_Up&& __u)
    $$$$$: 2249-block  0
    $$$$$: 2249-block  1
    $$$$$: 2249-block  2
    #####: 2250:      : __value_type(_VSTD::forward<_Up>(__u))
    #####: 2251:  {}
    $$$$$: 2251-block  0
    $$$$$: 2251-block  1
    $$$$$: 2251-block  2
    $$$$$: 2251-block  3
    $$$$$: 2251-block  4
    $$$$$: 2251-block  5
        -: 2252:
        -: 2253:#ifndef _LIBCPP_CXX03_LANG
        -: 2254:  template <class... _Args, size_t... _Indexes>
        -: 2255:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 2256:  __compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args,
        -: 2257:                         __tuple_indices<_Indexes...>)
        -: 2258:      : __value_type(_VSTD::forward<_Args>(_VSTD::get<_Indexes>(__args))...) {}
        -: 2259:#endif
        -: 2260:
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIiEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_9allocatorINS_6vectorIiNS1_IiEEEEEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
    #####: 2261:  _LIBCPP_INLINE_VISIBILITY reference __get() _NOEXCEPT { return *this; }
    $$$$$: 2261-block  0
    $$$$$: 2261-block  1
    $$$$$: 2261-block  2
    $$$$$: 2261-block  3
    $$$$$: 2261-block  4
    $$$$$: 2261-block  5
        -: 2262:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__122__compressed_pair_elemINS_9allocatorIiEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__122__compressed_pair_elemINS_9allocatorINS_6vectorIiNS1_IiEEEEEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__122__compressed_pair_elemINS_9allocatorIcEELi1ELb1EE5__getEv called 0 returned 0% blocks executed 0%
    #####: 2263:  const_reference __get() const _NOEXCEPT { return *this; }
    $$$$$: 2263-block  0
    $$$$$: 2263-block  1
    $$$$$: 2263-block  2
    $$$$$: 2263-block  3
    $$$$$: 2263-block  4
    $$$$$: 2263-block  5
        -: 2264:};
        -: 2265:
        -: 2266:template <class _T1, class _T2>
        -: 2267:class __compressed_pair : private __compressed_pair_elem<_T1, 0>,
        -: 2268:                          private __compressed_pair_elem<_T2, 1> {
        -: 2269:  typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T1, 0> _Base1;
        -: 2270:  typedef _LIBCPP_NODEBUG_TYPE __compressed_pair_elem<_T2, 1> _Base2;
        -: 2271:
        -: 2272:  // NOTE: This static assert should never fire because __compressed_pair
        -: 2273:  // is *almost never* used in a scenario where it's possible for T1 == T2.
        -: 2274:  // (The exception is std::function where it is possible that the function
        -: 2275:  //  object and the allocator have the same type).
        -: 2276:  static_assert((!is_same<_T1, _T2>::value),
        -: 2277:    "__compressed_pair cannot be instantated when T1 and T2 are the same type; "
        -: 2278:    "The current implementation is NOT ABI-compatible with the previous "
        -: 2279:    "implementation for this configuration");
        -: 2280:
        -: 2281:public:
        -: 2282:    template <bool _Dummy = true,
        -: 2283:      class = typename enable_if<
        -: 2284:          __dependent_type<is_default_constructible<_T1>, _Dummy>::value &&
        -: 2285:          __dependent_type<is_default_constructible<_T2>, _Dummy>::value
        -: 2286:      >::type
        -: 2287:  >
        -: 2288:  _LIBCPP_INLINE_VISIBILITY
        -: 2289:  _LIBCPP_CONSTEXPR __compressed_pair() : _Base1(__value_init_tag()), _Base2(__value_init_tag()) {}
        -: 2290:
        -: 2291:  template <class _U1, class _U2>
        -: 2292:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC1INS_18__default_init_tagESA_EEOT_OT0_ called 4 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagESA_EEOT_OT0_ called 4 returned 100% blocks executed 100%
function _ZNSt3__117__compressed_pairIPiNS_9allocatorIiEEEC1IDnNS_18__default_init_tagEEEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPiNS_9allocatorIiEEEC2IDnNS_18__default_init_tagEEEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEEC1IDnNS_18__default_init_tagEEEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEEC2IDnNS_18__default_init_tagEEEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPiNS_9allocatorIiEEEC1IDnS3_EEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPiNS_9allocatorIiEEEC2IDnS3_EEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEEC1IDnS6_EEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEEC2IDnS6_EEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC1INS_18__default_init_tagERKS5_EEOT_OT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_EC2INS_18__default_init_tagERKS5_EEOT_OT0_ called 0 returned 0% blocks executed 0%
        8: 2293:  __compressed_pair(_U1&& __t1, _U2&& __t2)
        4: 2293-block  0
        4: 2293-block  1
    $$$$$: 2293-block  2
    $$$$$: 2293-block  3
    $$$$$: 2293-block  4
    $$$$$: 2293-block  5
    $$$$$: 2293-block  6
    $$$$$: 2293-block  7
    $$$$$: 2293-block  8
    $$$$$: 2293-block  9
    $$$$$: 2293-block 10
    $$$$$: 2293-block 11
        8: 2294:      : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2)) {}
        4: 2294-block  0
        4: 2294-block  1
    $$$$$: 2294-block  2
    $$$$$: 2294-block  3
    $$$$$: 2294-block  4
    $$$$$: 2294-block  5
    $$$$$: 2294-block  6
    $$$$$: 2294-block  7
    $$$$$: 2294-block  8
    $$$$$: 2294-block  9
    $$$$$: 2294-block 10
    $$$$$: 2294-block 11
        -: 2295:
        -: 2296:#ifndef _LIBCPP_CXX03_LANG
        -: 2297:  template <class... _Args1, class... _Args2>
        -: 2298:  _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -: 2299:  __compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args,
        -: 2300:                    tuple<_Args2...> __second_args)
        -: 2301:      : _Base1(__pc, _VSTD::move(__first_args),
        -: 2302:               typename __make_tuple_indices<sizeof...(_Args1)>::type()),
        -: 2303:        _Base2(__pc, _VSTD::move(__second_args),
        -: 2304:               typename __make_tuple_indices<sizeof...(_Args2)>::type()) {}
        -: 2305:#endif
        -: 2306:
        -: 2307:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__117__compressed_pairIPiNS_9allocatorIiEEE5firstEv called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEE5firstEv called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv called 0 returned 0% blocks executed 0%
    #####: 2308:  typename _Base1::reference first() _NOEXCEPT {
    $$$$$: 2308-block  0
    $$$$$: 2308-block  1
    $$$$$: 2308-block  2
    #####: 2309:    return static_cast<_Base1&>(*this).__get();
    $$$$$: 2309-block  0
    $$$$$: 2309-block  1
    $$$$$: 2309-block  2
        -: 2310:  }
        -: 2311:
        -: 2312:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__117__compressed_pairIPiNS_9allocatorIiEEE5firstEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEE5firstEv called 0 returned 0% blocks executed 0%
    #####: 2313:  typename _Base1::const_reference first() const _NOEXCEPT {
    $$$$$: 2313-block  0
    $$$$$: 2313-block  1
    $$$$$: 2313-block  2
    #####: 2314:    return static_cast<_Base1 const&>(*this).__get();
    $$$$$: 2314-block  0
    $$$$$: 2314-block  1
    $$$$$: 2314-block  2
        -: 2315:  }
        -: 2316:
        -: 2317:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__117__compressed_pairIPiNS_9allocatorIiEEE6secondEv called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEE6secondEv called 0 returned 0% blocks executed 0%
function _ZNSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv called 0 returned 0% blocks executed 0%
    #####: 2318:  typename _Base2::reference second() _NOEXCEPT {
    $$$$$: 2318-block  0
    $$$$$: 2318-block  1
    $$$$$: 2318-block  2
    #####: 2319:    return static_cast<_Base2&>(*this).__get();
    $$$$$: 2319-block  0
    $$$$$: 2319-block  1
    $$$$$: 2319-block  2
        -: 2320:  }
        -: 2321:
        -: 2322:  _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__117__compressed_pairIPiNS_9allocatorIiEEE6secondEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__117__compressed_pairIPNS_6vectorIiNS_9allocatorIiEEEENS2_IS4_EEE6secondEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E6secondEv called 0 returned 0% blocks executed 0%
    #####: 2323:  typename _Base2::const_reference second() const _NOEXCEPT {
    $$$$$: 2323-block  0
    $$$$$: 2323-block  1
    $$$$$: 2323-block  2
    #####: 2324:    return static_cast<_Base2 const&>(*this).__get();
    $$$$$: 2324-block  0
    $$$$$: 2324-block  1
    $$$$$: 2324-block  2
        -: 2325:  }
        -: 2326:
        -: 2327:  _LIBCPP_INLINE_VISIBILITY
        -: 2328:  void swap(__compressed_pair& __x)
        -: 2329:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2330:               __is_nothrow_swappable<_T2>::value)
        -: 2331:  {
        -: 2332:    using std::swap;
        -: 2333:    swap(first(), __x.first());
        -: 2334:    swap(second(), __x.second());
        -: 2335:  }
        -: 2336:};
        -: 2337:
        -: 2338:template <class _T1, class _T2>
        -: 2339:inline _LIBCPP_INLINE_VISIBILITY
        -: 2340:void swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y)
        -: 2341:    _NOEXCEPT_(__is_nothrow_swappable<_T1>::value &&
        -: 2342:               __is_nothrow_swappable<_T2>::value) {
        -: 2343:  __x.swap(__y);
        -: 2344:}
        -: 2345:
        -: 2346:// default_delete
        -: 2347:
        -: 2348:template <class _Tp>
        -: 2349:struct _LIBCPP_TEMPLATE_VIS default_delete {
        -: 2350:    static_assert(!is_function<_Tp>::value,
        -: 2351:                  "default_delete cannot be instantiated for function types");
        -: 2352:#ifndef _LIBCPP_CXX03_LANG
        -: 2353:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;
        -: 2354:#else
        -: 2355:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 2356:#endif
        -: 2357:  template <class _Up>
        -: 2358:  _LIBCPP_INLINE_VISIBILITY
        -: 2359:  default_delete(const default_delete<_Up>&,
        -: 2360:                 typename enable_if<is_convertible<_Up*, _Tp*>::value>::type* =
        -: 2361:                     0) _NOEXCEPT {}
        -: 2362:
        -: 2363:  _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __ptr) const _NOEXCEPT {
        -: 2364:    static_assert(sizeof(_Tp) > 0,
        -: 2365:                  "default_delete can not delete incomplete type");
        -: 2366:    static_assert(!is_void<_Tp>::value,
        -: 2367:                  "default_delete can not delete incomplete type");
        -: 2368:    delete __ptr;
        -: 2369:  }
        -: 2370:};
        -: 2371:
        -: 2372:template <class _Tp>
        -: 2373:struct _LIBCPP_TEMPLATE_VIS default_delete<_Tp[]> {
        -: 2374:private:
        -: 2375:  template <class _Up>
        -: 2376:  struct _EnableIfConvertible
        -: 2377:      : enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value> {};
        -: 2378:
        -: 2379:public:
        -: 2380:#ifndef _LIBCPP_CXX03_LANG
        -: 2381:  _LIBCPP_INLINE_VISIBILITY constexpr default_delete() _NOEXCEPT = default;
        -: 2382:#else
        -: 2383:  _LIBCPP_INLINE_VISIBILITY default_delete() {}
        -: 2384:#endif
        -: 2385:
        -: 2386:  template <class _Up>
        -: 2387:  _LIBCPP_INLINE_VISIBILITY
        -: 2388:  default_delete(const default_delete<_Up[]>&,
        -: 2389:                 typename _EnableIfConvertible<_Up>::type* = 0) _NOEXCEPT {}
        -: 2390:
        -: 2391:  template <class _Up>
        -: 2392:  _LIBCPP_INLINE_VISIBILITY
        -: 2393:  typename _EnableIfConvertible<_Up>::type
        -: 2394:  operator()(_Up* __ptr) const _NOEXCEPT {
        -: 2395:    static_assert(sizeof(_Tp) > 0,
        -: 2396:                  "default_delete can not delete incomplete type");
        -: 2397:    static_assert(!is_void<_Tp>::value,
        -: 2398:                  "default_delete can not delete void type");
        -: 2399:    delete[] __ptr;
        -: 2400:  }
        -: 2401:};
        -: 2402:
        -: 2403:template <class _Deleter>
        -: 2404:struct __unique_ptr_deleter_sfinae {
        -: 2405:  static_assert(!is_reference<_Deleter>::value, "incorrect specialization");
        -: 2406:  typedef const _Deleter& __lval_ref_type;
        -: 2407:  typedef _Deleter&& __good_rval_ref_type;
        -: 2408:  typedef true_type __enable_rval_overload;
        -: 2409:};
        -: 2410:
        -: 2411:template <class _Deleter>
        -: 2412:struct __unique_ptr_deleter_sfinae<_Deleter const&> {
        -: 2413:  typedef const _Deleter& __lval_ref_type;
        -: 2414:  typedef const _Deleter&& __bad_rval_ref_type;
        -: 2415:  typedef false_type __enable_rval_overload;
        -: 2416:};
        -: 2417:
        -: 2418:template <class _Deleter>
        -: 2419:struct __unique_ptr_deleter_sfinae<_Deleter&> {
        -: 2420:  typedef _Deleter& __lval_ref_type;
        -: 2421:  typedef _Deleter&& __bad_rval_ref_type;
        -: 2422:  typedef false_type __enable_rval_overload;
        -: 2423:};
        -: 2424:
        -: 2425:template <class _Tp, class _Dp = default_delete<_Tp> >
        -: 2426:class _LIBCPP_TEMPLATE_VIS unique_ptr {
        -: 2427:public:
        -: 2428:  typedef _Tp element_type;
        -: 2429:  typedef _Dp deleter_type;
        -: 2430:  typedef _LIBCPP_NODEBUG_TYPE typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2431:
        -: 2432:  static_assert(!is_rvalue_reference<deleter_type>::value,
        -: 2433:                "the specified deleter type cannot be an rvalue reference");
        -: 2434:
        -: 2435:private:
        -: 2436:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2437:
        -: 2438:  struct __nat { int __for_bool_; };
        -: 2439:
        -: 2440:  typedef _LIBCPP_NODEBUG_TYPE __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 2441:
        -: 2442:  template <bool _Dummy>
        -: 2443:  using _LValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2444:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 2445:
        -: 2446:  template <bool _Dummy>
        -: 2447:  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2448:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 2449:
        -: 2450:  template <bool _Dummy>
        -: 2451:  using _BadRValRefType _LIBCPP_NODEBUG_TYPE  =
        -: 2452:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 2453:
        -: 2454:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 2455:                             __identity<deleter_type>, _Dummy>::type>
        -: 2456:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE =
        -: 2457:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 2458:                         !is_pointer<_Deleter>::value>::type;
        -: 2459:
        -: 2460:  template <class _ArgType>
        -: 2461:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 2462:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 2463:
        -: 2464:  template <class _UPtr, class _Up>
        -: 2465:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2466:      is_convertible<typename _UPtr::pointer, pointer>::value &&
        -: 2467:      !is_array<_Up>::value
        -: 2468:  >::type;
        -: 2469:
        -: 2470:  template <class _UDel>
        -: 2471:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2472:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 2473:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 2474:    >::type;
        -: 2475:
        -: 2476:  template <class _UDel>
        -: 2477:  using _EnableIfDeleterAssignable = typename enable_if<
        -: 2478:      is_assignable<_Dp&, _UDel&&>::value
        -: 2479:    >::type;
        -: 2480:
        -: 2481:public:
        -: 2482:  template <bool _Dummy = true,
        -: 2483:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2484:  _LIBCPP_INLINE_VISIBILITY
        -: 2485:  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2486:
        -: 2487:  template <bool _Dummy = true,
        -: 2488:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2489:  _LIBCPP_INLINE_VISIBILITY
        -: 2490:  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2491:
        -: 2492:  template <bool _Dummy = true,
        -: 2493:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2494:  _LIBCPP_INLINE_VISIBILITY
        -: 2495:  explicit unique_ptr(pointer __p) _NOEXCEPT : __ptr_(__p, __default_init_tag()) {}
        -: 2496:
        -: 2497:  template <bool _Dummy = true,
        -: 2498:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -: 2499:  _LIBCPP_INLINE_VISIBILITY
        -: 2500:  unique_ptr(pointer __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 2501:      : __ptr_(__p, __d) {}
        -: 2502:
        -: 2503:  template <bool _Dummy = true,
        -: 2504:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -: 2505:  _LIBCPP_INLINE_VISIBILITY
        -: 2506:  unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 2507:      : __ptr_(__p, _VSTD::move(__d)) {
        -: 2508:    static_assert(!is_reference<deleter_type>::value,
        -: 2509:                  "rvalue deleter bound to reference");
        -: 2510:  }
        -: 2511:
        -: 2512:  template <bool _Dummy = true,
        -: 2513:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> > >
        -: 2514:  _LIBCPP_INLINE_VISIBILITY
        -: 2515:  unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 2516:
        -: 2517:  _LIBCPP_INLINE_VISIBILITY
        -: 2518:  unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2519:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
        -: 2520:  }
        -: 2521:
        -: 2522:  template <class _Up, class _Ep,
        -: 2523:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2524:      class = _EnableIfDeleterConvertible<_Ep>
        -: 2525:  >
        -: 2526:  _LIBCPP_INLINE_VISIBILITY
        -: 2527:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2528:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {}
        -: 2529:
        -: 2530:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2531:  template <class _Up>
        -: 2532:  _LIBCPP_INLINE_VISIBILITY
        -: 2533:  unique_ptr(auto_ptr<_Up>&& __p,
        -: 2534:             typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 2535:                                    is_same<_Dp, default_delete<_Tp> >::value,
        -: 2536:                                __nat>::type = __nat()) _NOEXCEPT
        -: 2537:      : __ptr_(__p.release(), __default_init_tag()) {}
        -: 2538:#endif
        -: 2539:
        -: 2540:  _LIBCPP_INLINE_VISIBILITY
        -: 2541:  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -: 2542:    reset(__u.release());
        -: 2543:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2544:    return *this;
        -: 2545:  }
        -: 2546:
        -: 2547:  template <class _Up, class _Ep,
        -: 2548:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2549:      class = _EnableIfDeleterAssignable<_Ep>
        -: 2550:  >
        -: 2551:  _LIBCPP_INLINE_VISIBILITY
        -: 2552:  unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -: 2553:    reset(__u.release());
        -: 2554:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2555:    return *this;
        -: 2556:  }
        -: 2557:
        -: 2558:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 2559:  template <class _Up>
        -: 2560:  _LIBCPP_INLINE_VISIBILITY
        -: 2561:      typename enable_if<is_convertible<_Up*, _Tp*>::value &&
        -: 2562:                             is_same<_Dp, default_delete<_Tp> >::value,
        -: 2563:                         unique_ptr&>::type
        -: 2564:      operator=(auto_ptr<_Up> __p) {
        -: 2565:    reset(__p.release());
        -: 2566:    return *this;
        -: 2567:  }
        -: 2568:#endif
        -: 2569:
        -: 2570:#ifdef _LIBCPP_CXX03_LANG
        -: 2571:  unique_ptr(unique_ptr const&) = delete;
        -: 2572:  unique_ptr& operator=(unique_ptr const&) = delete;
        -: 2573:#endif
        -: 2574:
        -: 2575:
        -: 2576:  _LIBCPP_INLINE_VISIBILITY
        -: 2577:  ~unique_ptr() { reset(); }
        -: 2578:
        -: 2579:  _LIBCPP_INLINE_VISIBILITY
        -: 2580:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 2581:    reset();
        -: 2582:    return *this;
        -: 2583:  }
        -: 2584:
        -: 2585:  _LIBCPP_INLINE_VISIBILITY
        -: 2586:  typename add_lvalue_reference<_Tp>::type
        -: 2587:  operator*() const {
        -: 2588:    return *__ptr_.first();
        -: 2589:  }
        -: 2590:  _LIBCPP_INLINE_VISIBILITY
        -: 2591:  pointer operator->() const _NOEXCEPT {
        -: 2592:    return __ptr_.first();
        -: 2593:  }
        -: 2594:  _LIBCPP_INLINE_VISIBILITY
        -: 2595:  pointer get() const _NOEXCEPT {
        -: 2596:    return __ptr_.first();
        -: 2597:  }
        -: 2598:  _LIBCPP_INLINE_VISIBILITY
        -: 2599:  deleter_type& get_deleter() _NOEXCEPT {
        -: 2600:    return __ptr_.second();
        -: 2601:  }
        -: 2602:  _LIBCPP_INLINE_VISIBILITY
        -: 2603:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 2604:    return __ptr_.second();
        -: 2605:  }
        -: 2606:  _LIBCPP_INLINE_VISIBILITY
        -: 2607:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
        -: 2608:    return __ptr_.first() != nullptr;
        -: 2609:  }
        -: 2610:
        -: 2611:  _LIBCPP_INLINE_VISIBILITY
        -: 2612:  pointer release() _NOEXCEPT {
        -: 2613:    pointer __t = __ptr_.first();
        -: 2614:    __ptr_.first() = pointer();
        -: 2615:    return __t;
        -: 2616:  }
        -: 2617:
        -: 2618:  _LIBCPP_INLINE_VISIBILITY
        -: 2619:  void reset(pointer __p = pointer()) _NOEXCEPT {
        -: 2620:    pointer __tmp = __ptr_.first();
        -: 2621:    __ptr_.first() = __p;
        -: 2622:    if (__tmp)
        -: 2623:      __ptr_.second()(__tmp);
        -: 2624:  }
        -: 2625:
        -: 2626:  _LIBCPP_INLINE_VISIBILITY
        -: 2627:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 2628:    __ptr_.swap(__u.__ptr_);
        -: 2629:  }
        -: 2630:};
        -: 2631:
        -: 2632:
        -: 2633:template <class _Tp, class _Dp>
        -: 2634:class _LIBCPP_TEMPLATE_VIS unique_ptr<_Tp[], _Dp> {
        -: 2635:public:
        -: 2636:  typedef _Tp element_type;
        -: 2637:  typedef _Dp deleter_type;
        -: 2638:  typedef typename __pointer_type<_Tp, deleter_type>::type pointer;
        -: 2639:
        -: 2640:private:
        -: 2641:  __compressed_pair<pointer, deleter_type> __ptr_;
        -: 2642:
        -: 2643:  template <class _From>
        -: 2644:  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};
        -: 2645:
        -: 2646:  template <class _FromElem>
        -: 2647:  struct _CheckArrayPointerConversion<_FromElem*>
        -: 2648:      : integral_constant<bool,
        -: 2649:          is_same<_FromElem*, pointer>::value ||
        -: 2650:            (is_same<pointer, element_type*>::value &&
        -: 2651:             is_convertible<_FromElem(*)[], element_type(*)[]>::value)
        -: 2652:      >
        -: 2653:  {};
        -: 2654:
        -: 2655:  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -: 2656:
        -: 2657:  template <bool _Dummy>
        -: 2658:  using _LValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2659:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -: 2660:
        -: 2661:  template <bool _Dummy>
        -: 2662:  using _GoodRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2663:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -: 2664:
        -: 2665:  template <bool _Dummy>
        -: 2666:  using _BadRValRefType _LIBCPP_NODEBUG_TYPE =
        -: 2667:      typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -: 2668:
        -: 2669:  template <bool _Dummy, class _Deleter = typename __dependent_type<
        -: 2670:                             __identity<deleter_type>, _Dummy>::type>
        -: 2671:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 2672:      typename enable_if<is_default_constructible<_Deleter>::value &&
        -: 2673:                         !is_pointer<_Deleter>::value>::type;
        -: 2674:
        -: 2675:  template <class _ArgType>
        -: 2676:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG_TYPE  =
        -: 2677:      typename enable_if<is_constructible<deleter_type, _ArgType>::value>::type;
        -: 2678:
        -: 2679:  template <class _Pp>
        -: 2680:  using _EnableIfPointerConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2681:      _CheckArrayPointerConversion<_Pp>::value
        -: 2682:  >::type;
        -: 2683:
        -: 2684:  template <class _UPtr, class _Up,
        -: 2685:        class _ElemT = typename _UPtr::element_type>
        -: 2686:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2687:      is_array<_Up>::value &&
        -: 2688:      is_same<pointer, element_type*>::value &&
        -: 2689:      is_same<typename _UPtr::pointer, _ElemT*>::value &&
        -: 2690:      is_convertible<_ElemT(*)[], element_type(*)[]>::value
        -: 2691:    >::type;
        -: 2692:
        -: 2693:  template <class _UDel>
        -: 2694:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2695:      (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -: 2696:      (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value)
        -: 2697:    >::type;
        -: 2698:
        -: 2699:  template <class _UDel>
        -: 2700:  using _EnableIfDeleterAssignable _LIBCPP_NODEBUG_TYPE  = typename enable_if<
        -: 2701:      is_assignable<_Dp&, _UDel&&>::value
        -: 2702:    >::type;
        -: 2703:
        -: 2704:public:
        -: 2705:  template <bool _Dummy = true,
        -: 2706:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2707:  _LIBCPP_INLINE_VISIBILITY
        -: 2708:  _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2709:
        -: 2710:  template <bool _Dummy = true,
        -: 2711:            class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -: 2712:  _LIBCPP_INLINE_VISIBILITY
        -: 2713:  _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT : __ptr_(pointer(), __default_init_tag()) {}
        -: 2714:
        -: 2715:  template <class _Pp, bool _Dummy = true,
        -: 2716:            class = _EnableIfDeleterDefaultConstructible<_Dummy>,
        -: 2717:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2718:  _LIBCPP_INLINE_VISIBILITY
        -: 2719:  explicit unique_ptr(_Pp __p) _NOEXCEPT
        -: 2720:      : __ptr_(__p, __default_init_tag()) {}
        -: 2721:
        -: 2722:  template <class _Pp, bool _Dummy = true,
        -: 2723:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> >,
        -: 2724:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2725:  _LIBCPP_INLINE_VISIBILITY
        -: 2726:  unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 2727:      : __ptr_(__p, __d) {}
        -: 2728:
        -: 2729:  template <bool _Dummy = true,
        -: 2730:            class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -: 2731:  _LIBCPP_INLINE_VISIBILITY
        -: 2732:  unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) _NOEXCEPT
        -: 2733:      : __ptr_(nullptr, __d) {}
        -: 2734:
        -: 2735:  template <class _Pp, bool _Dummy = true,
        -: 2736:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> >,
        -: 2737:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2738:  _LIBCPP_INLINE_VISIBILITY
        -: 2739:  unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 2740:      : __ptr_(__p, _VSTD::move(__d)) {
        -: 2741:    static_assert(!is_reference<deleter_type>::value,
        -: 2742:                  "rvalue deleter bound to reference");
        -: 2743:  }
        -: 2744:
        -: 2745:  template <bool _Dummy = true,
        -: 2746:            class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -: 2747:  _LIBCPP_INLINE_VISIBILITY
        -: 2748:  unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -: 2749:      : __ptr_(nullptr, _VSTD::move(__d)) {
        -: 2750:    static_assert(!is_reference<deleter_type>::value,
        -: 2751:                  "rvalue deleter bound to reference");
        -: 2752:  }
        -: 2753:
        -: 2754:  template <class _Pp, bool _Dummy = true,
        -: 2755:            class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> >,
        -: 2756:            class = _EnableIfPointerConvertible<_Pp> >
        -: 2757:  _LIBCPP_INLINE_VISIBILITY
        -: 2758:  unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;
        -: 2759:
        -: 2760:  _LIBCPP_INLINE_VISIBILITY
        -: 2761:  unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -: 2762:      : __ptr_(__u.release(), _VSTD::forward<deleter_type>(__u.get_deleter())) {
        -: 2763:  }
        -: 2764:
        -: 2765:  _LIBCPP_INLINE_VISIBILITY
        -: 2766:  unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -: 2767:    reset(__u.release());
        -: 2768:    __ptr_.second() = _VSTD::forward<deleter_type>(__u.get_deleter());
        -: 2769:    return *this;
        -: 2770:  }
        -: 2771:
        -: 2772:  template <class _Up, class _Ep,
        -: 2773:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2774:      class = _EnableIfDeleterConvertible<_Ep>
        -: 2775:  >
        -: 2776:  _LIBCPP_INLINE_VISIBILITY
        -: 2777:  unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -: 2778:      : __ptr_(__u.release(), _VSTD::forward<_Ep>(__u.get_deleter())) {
        -: 2779:  }
        -: 2780:
        -: 2781:  template <class _Up, class _Ep,
        -: 2782:      class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -: 2783:      class = _EnableIfDeleterAssignable<_Ep>
        -: 2784:  >
        -: 2785:  _LIBCPP_INLINE_VISIBILITY
        -: 2786:  unique_ptr&
        -: 2787:  operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -: 2788:    reset(__u.release());
        -: 2789:    __ptr_.second() = _VSTD::forward<_Ep>(__u.get_deleter());
        -: 2790:    return *this;
        -: 2791:  }
        -: 2792:
        -: 2793:#ifdef _LIBCPP_CXX03_LANG
        -: 2794:  unique_ptr(unique_ptr const&) = delete;
        -: 2795:  unique_ptr& operator=(unique_ptr const&) = delete;
        -: 2796:#endif
        -: 2797:
        -: 2798:public:
        -: 2799:  _LIBCPP_INLINE_VISIBILITY
        -: 2800:  ~unique_ptr() { reset(); }
        -: 2801:
        -: 2802:  _LIBCPP_INLINE_VISIBILITY
        -: 2803:  unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -: 2804:    reset();
        -: 2805:    return *this;
        -: 2806:  }
        -: 2807:
        -: 2808:  _LIBCPP_INLINE_VISIBILITY
        -: 2809:  typename add_lvalue_reference<_Tp>::type
        -: 2810:  operator[](size_t __i) const {
        -: 2811:    return __ptr_.first()[__i];
        -: 2812:  }
        -: 2813:  _LIBCPP_INLINE_VISIBILITY
        -: 2814:  pointer get() const _NOEXCEPT {
        -: 2815:    return __ptr_.first();
        -: 2816:  }
        -: 2817:
        -: 2818:  _LIBCPP_INLINE_VISIBILITY
        -: 2819:  deleter_type& get_deleter() _NOEXCEPT {
        -: 2820:    return __ptr_.second();
        -: 2821:  }
        -: 2822:
        -: 2823:  _LIBCPP_INLINE_VISIBILITY
        -: 2824:  const deleter_type& get_deleter() const _NOEXCEPT {
        -: 2825:    return __ptr_.second();
        -: 2826:  }
        -: 2827:  _LIBCPP_INLINE_VISIBILITY
        -: 2828:  _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {
        -: 2829:    return __ptr_.first() != nullptr;
        -: 2830:  }
        -: 2831:
        -: 2832:  _LIBCPP_INLINE_VISIBILITY
        -: 2833:  pointer release() _NOEXCEPT {
        -: 2834:    pointer __t = __ptr_.first();
        -: 2835:    __ptr_.first() = pointer();
        -: 2836:    return __t;
        -: 2837:  }
        -: 2838:
        -: 2839:  template <class _Pp>
        -: 2840:  _LIBCPP_INLINE_VISIBILITY
        -: 2841:  typename enable_if<
        -: 2842:      _CheckArrayPointerConversion<_Pp>::value
        -: 2843:  >::type
        -: 2844:  reset(_Pp __p) _NOEXCEPT {
        -: 2845:    pointer __tmp = __ptr_.first();
        -: 2846:    __ptr_.first() = __p;
        -: 2847:    if (__tmp)
        -: 2848:      __ptr_.second()(__tmp);
        -: 2849:  }
        -: 2850:
        -: 2851:  _LIBCPP_INLINE_VISIBILITY
        -: 2852:  void reset(nullptr_t = nullptr) _NOEXCEPT {
        -: 2853:    pointer __tmp = __ptr_.first();
        -: 2854:    __ptr_.first() = nullptr;
        -: 2855:    if (__tmp)
        -: 2856:      __ptr_.second()(__tmp);
        -: 2857:  }
        -: 2858:
        -: 2859:  _LIBCPP_INLINE_VISIBILITY
        -: 2860:  void swap(unique_ptr& __u) _NOEXCEPT {
        -: 2861:    __ptr_.swap(__u.__ptr_);
        -: 2862:  }
        -: 2863:
        -: 2864:};
        -: 2865:
        -: 2866:template <class _Tp, class _Dp>
        -: 2867:inline _LIBCPP_INLINE_VISIBILITY
        -: 2868:typename enable_if<
        -: 2869:    __is_swappable<_Dp>::value,
        -: 2870:    void
        -: 2871:>::type
        -: 2872:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {__x.swap(__y);}
        -: 2873:
        -: 2874:template <class _T1, class _D1, class _T2, class _D2>
        -: 2875:inline _LIBCPP_INLINE_VISIBILITY
        -: 2876:bool
        -: 2877:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __x.get() == __y.get();}
        -: 2878:
        -: 2879:template <class _T1, class _D1, class _T2, class _D2>
        -: 2880:inline _LIBCPP_INLINE_VISIBILITY
        -: 2881:bool
        -: 2882:operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x == __y);}
        -: 2883:
        -: 2884:template <class _T1, class _D1, class _T2, class _D2>
        -: 2885:inline _LIBCPP_INLINE_VISIBILITY
        -: 2886:bool
        -: 2887:operator< (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y)
        -: 2888:{
        -: 2889:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2890:    typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -: 2891:    typedef typename common_type<_P1, _P2>::type _Vp;
        -: 2892:    return less<_Vp>()(__x.get(), __y.get());
        -: 2893:}
        -: 2894:
        -: 2895:template <class _T1, class _D1, class _T2, class _D2>
        -: 2896:inline _LIBCPP_INLINE_VISIBILITY
        -: 2897:bool
        -: 2898:operator> (const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return __y < __x;}
        -: 2899:
        -: 2900:template <class _T1, class _D1, class _T2, class _D2>
        -: 2901:inline _LIBCPP_INLINE_VISIBILITY
        -: 2902:bool
        -: 2903:operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__y < __x);}
        -: 2904:
        -: 2905:template <class _T1, class _D1, class _T2, class _D2>
        -: 2906:inline _LIBCPP_INLINE_VISIBILITY
        -: 2907:bool
        -: 2908:operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {return !(__x < __y);}
        -: 2909:
        -: 2910:template <class _T1, class _D1>
        -: 2911:inline _LIBCPP_INLINE_VISIBILITY
        -: 2912:bool
        -: 2913:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 2914:{
        -: 2915:    return !__x;
        -: 2916:}
        -: 2917:
        -: 2918:template <class _T1, class _D1>
        -: 2919:inline _LIBCPP_INLINE_VISIBILITY
        -: 2920:bool
        -: 2921:operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 2922:{
        -: 2923:    return !__x;
        -: 2924:}
        -: 2925:
        -: 2926:template <class _T1, class _D1>
        -: 2927:inline _LIBCPP_INLINE_VISIBILITY
        -: 2928:bool
        -: 2929:operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT
        -: 2930:{
        -: 2931:    return static_cast<bool>(__x);
        -: 2932:}
        -: 2933:
        -: 2934:template <class _T1, class _D1>
        -: 2935:inline _LIBCPP_INLINE_VISIBILITY
        -: 2936:bool
        -: 2937:operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT
        -: 2938:{
        -: 2939:    return static_cast<bool>(__x);
        -: 2940:}
        -: 2941:
        -: 2942:template <class _T1, class _D1>
        -: 2943:inline _LIBCPP_INLINE_VISIBILITY
        -: 2944:bool
        -: 2945:operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2946:{
        -: 2947:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2948:    return less<_P1>()(__x.get(), nullptr);
        -: 2949:}
        -: 2950:
        -: 2951:template <class _T1, class _D1>
        -: 2952:inline _LIBCPP_INLINE_VISIBILITY
        -: 2953:bool
        -: 2954:operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2955:{
        -: 2956:    typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -: 2957:    return less<_P1>()(nullptr, __x.get());
        -: 2958:}
        -: 2959:
        -: 2960:template <class _T1, class _D1>
        -: 2961:inline _LIBCPP_INLINE_VISIBILITY
        -: 2962:bool
        -: 2963:operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2964:{
        -: 2965:    return nullptr < __x;
        -: 2966:}
        -: 2967:
        -: 2968:template <class _T1, class _D1>
        -: 2969:inline _LIBCPP_INLINE_VISIBILITY
        -: 2970:bool
        -: 2971:operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2972:{
        -: 2973:    return __x < nullptr;
        -: 2974:}
        -: 2975:
        -: 2976:template <class _T1, class _D1>
        -: 2977:inline _LIBCPP_INLINE_VISIBILITY
        -: 2978:bool
        -: 2979:operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2980:{
        -: 2981:    return !(nullptr < __x);
        -: 2982:}
        -: 2983:
        -: 2984:template <class _T1, class _D1>
        -: 2985:inline _LIBCPP_INLINE_VISIBILITY
        -: 2986:bool
        -: 2987:operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 2988:{
        -: 2989:    return !(__x < nullptr);
        -: 2990:}
        -: 2991:
        -: 2992:template <class _T1, class _D1>
        -: 2993:inline _LIBCPP_INLINE_VISIBILITY
        -: 2994:bool
        -: 2995:operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t)
        -: 2996:{
        -: 2997:    return !(__x < nullptr);
        -: 2998:}
        -: 2999:
        -: 3000:template <class _T1, class _D1>
        -: 3001:inline _LIBCPP_INLINE_VISIBILITY
        -: 3002:bool
        -: 3003:operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x)
        -: 3004:{
        -: 3005:    return !(nullptr < __x);
        -: 3006:}
        -: 3007:
        -: 3008:#if _LIBCPP_STD_VER > 11
        -: 3009:
        -: 3010:template<class _Tp>
        -: 3011:struct __unique_if
        -: 3012:{
        -: 3013:    typedef unique_ptr<_Tp> __unique_single;
        -: 3014:};
        -: 3015:
        -: 3016:template<class _Tp>
        -: 3017:struct __unique_if<_Tp[]>
        -: 3018:{
        -: 3019:    typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -: 3020:};
        -: 3021:
        -: 3022:template<class _Tp, size_t _Np>
        -: 3023:struct __unique_if<_Tp[_Np]>
        -: 3024:{
        -: 3025:    typedef void __unique_array_known_bound;
        -: 3026:};
        -: 3027:
        -: 3028:template<class _Tp, class... _Args>
        -: 3029:inline _LIBCPP_INLINE_VISIBILITY
        -: 3030:typename __unique_if<_Tp>::__unique_single
        -: 3031:make_unique(_Args&&... __args)
        -: 3032:{
        -: 3033:    return unique_ptr<_Tp>(new _Tp(_VSTD::forward<_Args>(__args)...));
        -: 3034:}
        -: 3035:
        -: 3036:template<class _Tp>
        -: 3037:inline _LIBCPP_INLINE_VISIBILITY
        -: 3038:typename __unique_if<_Tp>::__unique_array_unknown_bound
        -: 3039:make_unique(size_t __n)
        -: 3040:{
        -: 3041:    typedef typename remove_extent<_Tp>::type _Up;
        -: 3042:    return unique_ptr<_Tp>(new _Up[__n]());
        -: 3043:}
        -: 3044:
        -: 3045:template<class _Tp, class... _Args>
        -: 3046:    typename __unique_if<_Tp>::__unique_array_known_bound
        -: 3047:    make_unique(_Args&&...) = delete;
        -: 3048:
        -: 3049:#endif  // _LIBCPP_STD_VER > 11
        -: 3050:
        -: 3051:template <class _Tp, class _Dp>
        -: 3052:#ifdef _LIBCPP_CXX03_LANG
        -: 3053:struct _LIBCPP_TEMPLATE_VIS hash<unique_ptr<_Tp, _Dp> >
        -: 3054:#else
        -: 3055:struct _LIBCPP_TEMPLATE_VIS hash<__enable_hash_helper<
        -: 3056:    unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer> >
        -: 3057:#endif
        -: 3058:{
        -: 3059:    typedef unique_ptr<_Tp, _Dp> argument_type;
        -: 3060:    typedef size_t               result_type;
        -: 3061:    _LIBCPP_INLINE_VISIBILITY
        -: 3062:    result_type operator()(const argument_type& __ptr) const
        -: 3063:    {
        -: 3064:        typedef typename argument_type::pointer pointer;
        -: 3065:        return hash<pointer>()(__ptr.get());
        -: 3066:    }
        -: 3067:};
        -: 3068:
        -: 3069:struct __destruct_n
        -: 3070:{
        -: 3071:private:
        -: 3072:    size_t __size_;
        -: 3073:
        -: 3074:    template <class _Tp>
        -: 3075:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp* __p, false_type) _NOEXCEPT
        -: 3076:        {for (size_t __i = 0; __i < __size_; ++__i, ++__p) __p->~_Tp();}
        -: 3077:
        -: 3078:    template <class _Tp>
        -: 3079:    _LIBCPP_INLINE_VISIBILITY void __process(_Tp*, true_type) _NOEXCEPT
        -: 3080:        {}
        -: 3081:
        -: 3082:    _LIBCPP_INLINE_VISIBILITY void __incr(false_type) _NOEXCEPT
        -: 3083:        {++__size_;}
        -: 3084:    _LIBCPP_INLINE_VISIBILITY void __incr(true_type) _NOEXCEPT
        -: 3085:        {}
        -: 3086:
        -: 3087:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, false_type) _NOEXCEPT
        -: 3088:        {__size_ = __s;}
        -: 3089:    _LIBCPP_INLINE_VISIBILITY void __set(size_t, true_type) _NOEXCEPT
        -: 3090:        {}
        -: 3091:public:
        -: 3092:    _LIBCPP_INLINE_VISIBILITY explicit __destruct_n(size_t __s) _NOEXCEPT
        -: 3093:        : __size_(__s) {}
        -: 3094:
        -: 3095:    template <class _Tp>
        -: 3096:    _LIBCPP_INLINE_VISIBILITY void __incr(_Tp*) _NOEXCEPT
        -: 3097:        {__incr(integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3098:
        -: 3099:    template <class _Tp>
        -: 3100:    _LIBCPP_INLINE_VISIBILITY void __set(size_t __s, _Tp*) _NOEXCEPT
        -: 3101:        {__set(__s, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3102:
        -: 3103:    template <class _Tp>
        -: 3104:    _LIBCPP_INLINE_VISIBILITY void operator()(_Tp* __p) _NOEXCEPT
        -: 3105:        {__process(__p, integral_constant<bool, is_trivially_destructible<_Tp>::value>());}
        -: 3106:};
        -: 3107:
        -: 3108:template <class _Alloc>
        -: 3109:class __allocator_destructor
        -: 3110:{
        -: 3111:    typedef _LIBCPP_NODEBUG_TYPE allocator_traits<_Alloc> __alloc_traits;
        -: 3112:public:
        -: 3113:    typedef _LIBCPP_NODEBUG_TYPE typename __alloc_traits::pointer pointer;
        -: 3114:    typedef _LIBCPP_NODEBUG_TYPE typename __alloc_traits::size_type size_type;
        -: 3115:private:
        -: 3116:    _Alloc& __alloc_;
        -: 3117:    size_type __s_;
        -: 3118:public:
        -: 3119:    _LIBCPP_INLINE_VISIBILITY __allocator_destructor(_Alloc& __a, size_type __s)
        -: 3120:             _NOEXCEPT
        -: 3121:        : __alloc_(__a), __s_(__s) {}
        -: 3122:    _LIBCPP_INLINE_VISIBILITY
        -: 3123:    void operator()(pointer __p) _NOEXCEPT
        -: 3124:        {__alloc_traits::deallocate(__alloc_, __p, __s_);}
        -: 3125:};
        -: 3126:
        -: 3127:template <class _InputIterator, class _ForwardIterator>
        -: 3128:_ForwardIterator
        -: 3129:uninitialized_copy(_InputIterator __f, _InputIterator __l, _ForwardIterator __r)
        -: 3130:{
        -: 3131:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3132:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3133:    _ForwardIterator __s = __r;
        -: 3134:    try
        -: 3135:    {
        -: 3136:#endif
        -: 3137:        for (; __f != __l; ++__f, (void) ++__r)
        -: 3138:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3139:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3140:    }
        -: 3141:    catch (...)
        -: 3142:    {
        -: 3143:        for (; __s != __r; ++__s)
        -: 3144:            __s->~value_type();
        -: 3145:        throw;
        -: 3146:    }
        -: 3147:#endif
        -: 3148:    return __r;
        -: 3149:}
        -: 3150:
        -: 3151:template <class _InputIterator, class _Size, class _ForwardIterator>
        -: 3152:_ForwardIterator
        -: 3153:uninitialized_copy_n(_InputIterator __f, _Size __n, _ForwardIterator __r)
        -: 3154:{
        -: 3155:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3156:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3157:    _ForwardIterator __s = __r;
        -: 3158:    try
        -: 3159:    {
        -: 3160:#endif
        -: 3161:        for (; __n > 0; ++__f, (void) ++__r, (void) --__n)
        -: 3162:            ::new (static_cast<void*>(_VSTD::addressof(*__r))) value_type(*__f);
        -: 3163:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3164:    }
        -: 3165:    catch (...)
        -: 3166:    {
        -: 3167:        for (; __s != __r; ++__s)
        -: 3168:            __s->~value_type();
        -: 3169:        throw;
        -: 3170:    }
        -: 3171:#endif
        -: 3172:    return __r;
        -: 3173:}
        -: 3174:
        -: 3175:template <class _ForwardIterator, class _Tp>
        -: 3176:void
        -: 3177:uninitialized_fill(_ForwardIterator __f, _ForwardIterator __l, const _Tp& __x)
        -: 3178:{
        -: 3179:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3180:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3181:    _ForwardIterator __s = __f;
        -: 3182:    try
        -: 3183:    {
        -: 3184:#endif
        -: 3185:        for (; __f != __l; ++__f)
        -: 3186:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3187:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3188:    }
        -: 3189:    catch (...)
        -: 3190:    {
        -: 3191:        for (; __s != __f; ++__s)
        -: 3192:            __s->~value_type();
        -: 3193:        throw;
        -: 3194:    }
        -: 3195:#endif
        -: 3196:}
        -: 3197:
        -: 3198:template <class _ForwardIterator, class _Size, class _Tp>
        -: 3199:_ForwardIterator
        -: 3200:uninitialized_fill_n(_ForwardIterator __f, _Size __n, const _Tp& __x)
        -: 3201:{
        -: 3202:    typedef typename iterator_traits<_ForwardIterator>::value_type value_type;
        -: 3203:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3204:    _ForwardIterator __s = __f;
        -: 3205:    try
        -: 3206:    {
        -: 3207:#endif
        -: 3208:        for (; __n > 0; ++__f, (void) --__n)
        -: 3209:            ::new (static_cast<void*>(_VSTD::addressof(*__f))) value_type(__x);
        -: 3210:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3211:    }
        -: 3212:    catch (...)
        -: 3213:    {
        -: 3214:        for (; __s != __f; ++__s)
        -: 3215:            __s->~value_type();
        -: 3216:        throw;
        -: 3217:    }
        -: 3218:#endif
        -: 3219:    return __f;
        -: 3220:}
        -: 3221:
        -: 3222:#if _LIBCPP_STD_VER > 14
        -: 3223:
        -: 3224:template <class _Tp>
        -: 3225:inline _LIBCPP_INLINE_VISIBILITY
        -: 3226:void destroy_at(_Tp* __loc) {
        -: 3227:    _LIBCPP_ASSERT(__loc, "null pointer given to destroy_at");
        -: 3228:    __loc->~_Tp();
        -: 3229:}
        -: 3230:
        -: 3231:template <class _ForwardIterator>
        -: 3232:inline _LIBCPP_INLINE_VISIBILITY
        -: 3233:void destroy(_ForwardIterator __first, _ForwardIterator __last) {
        -: 3234:    for (; __first != __last; ++__first)
        -: 3235:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 3236:}
        -: 3237:
        -: 3238:template <class _ForwardIterator, class _Size>
        -: 3239:inline _LIBCPP_INLINE_VISIBILITY
        -: 3240:_ForwardIterator destroy_n(_ForwardIterator __first, _Size __n) {
        -: 3241:    for (; __n > 0; (void)++__first, --__n)
        -: 3242:        _VSTD::destroy_at(_VSTD::addressof(*__first));
        -: 3243:    return __first;
        -: 3244:}
        -: 3245:
        -: 3246:template <class _ForwardIterator>
        -: 3247:inline _LIBCPP_INLINE_VISIBILITY
        -: 3248:void uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 3249:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3250:    auto __idx = __first;
        -: 3251:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3252:    try {
        -: 3253:#endif
        -: 3254:    for (; __idx != __last; ++__idx)
        -: 3255:        ::new((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 3256:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3257:    } catch (...) {
        -: 3258:        _VSTD::destroy(__first, __idx);
        -: 3259:        throw;
        -: 3260:    }
        -: 3261:#endif
        -: 3262:}
        -: 3263:
        -: 3264:template <class _ForwardIterator, class _Size>
        -: 3265:inline _LIBCPP_INLINE_VISIBILITY
        -: 3266:_ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __n) {
        -: 3267:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3268:    auto __idx = __first;
        -: 3269:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3270:    try {
        -: 3271:#endif
        -: 3272:    for (; __n > 0; (void)++__idx, --__n)
        -: 3273:        ::new((void*)_VSTD::addressof(*__idx)) _Vt;
        -: 3274:    return __idx;
        -: 3275:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3276:    } catch (...) {
        -: 3277:        _VSTD::destroy(__first, __idx);
        -: 3278:        throw;
        -: 3279:    }
        -: 3280:#endif
        -: 3281:}
        -: 3282:
        -: 3283:
        -: 3284:template <class _ForwardIterator>
        -: 3285:inline _LIBCPP_INLINE_VISIBILITY
        -: 3286:void uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last) {
        -: 3287:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3288:    auto __idx = __first;
        -: 3289:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3290:    try {
        -: 3291:#endif
        -: 3292:    for (; __idx != __last; ++__idx)
        -: 3293:        ::new((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 3294:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3295:    } catch (...) {
        -: 3296:        _VSTD::destroy(__first, __idx);
        -: 3297:        throw;
        -: 3298:    }
        -: 3299:#endif
        -: 3300:}
        -: 3301:
        -: 3302:template <class _ForwardIterator, class _Size>
        -: 3303:inline _LIBCPP_INLINE_VISIBILITY
        -: 3304:_ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __n) {
        -: 3305:    using _Vt = typename iterator_traits<_ForwardIterator>::value_type;
        -: 3306:    auto __idx = __first;
        -: 3307:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3308:    try {
        -: 3309:#endif
        -: 3310:    for (; __n > 0; (void)++__idx, --__n)
        -: 3311:        ::new((void*)_VSTD::addressof(*__idx)) _Vt();
        -: 3312:    return __idx;
        -: 3313:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3314:    } catch (...) {
        -: 3315:        _VSTD::destroy(__first, __idx);
        -: 3316:        throw;
        -: 3317:    }
        -: 3318:#endif
        -: 3319:}
        -: 3320:
        -: 3321:
        -: 3322:template <class _InputIt, class _ForwardIt>
        -: 3323:inline _LIBCPP_INLINE_VISIBILITY
        -: 3324:_ForwardIt uninitialized_move(_InputIt __first, _InputIt __last, _ForwardIt __first_res) {
        -: 3325:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 3326:    auto __idx = __first_res;
        -: 3327:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3328:    try {
        -: 3329:#endif
        -: 3330:    for (; __first != __last; (void)++__idx, ++__first)
        -: 3331:        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));
        -: 3332:    return __idx;
        -: 3333:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3334:    } catch (...) {
        -: 3335:        _VSTD::destroy(__first_res, __idx);
        -: 3336:        throw;
        -: 3337:    }
        -: 3338:#endif
        -: 3339:}
        -: 3340:
        -: 3341:template <class _InputIt, class _Size, class _ForwardIt>
        -: 3342:inline _LIBCPP_INLINE_VISIBILITY
        -: 3343:pair<_InputIt, _ForwardIt>
        -: 3344:uninitialized_move_n(_InputIt __first, _Size __n, _ForwardIt __first_res) {
        -: 3345:    using _Vt = typename iterator_traits<_ForwardIt>::value_type;
        -: 3346:    auto __idx = __first_res;
        -: 3347:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3348:    try {
        -: 3349:#endif
        -: 3350:    for (; __n > 0; ++__idx, (void)++__first, --__n)
        -: 3351:        ::new((void*)_VSTD::addressof(*__idx)) _Vt(std::move(*__first));
        -: 3352:    return {__first, __idx};
        -: 3353:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3354:    } catch (...) {
        -: 3355:        _VSTD::destroy(__first_res, __idx);
        -: 3356:        throw;
        -: 3357:    }
        -: 3358:#endif
        -: 3359:}
        -: 3360:
        -: 3361:
        -: 3362:#endif // _LIBCPP_STD_VER > 14
        -: 3363:
        -: 3364:// NOTE: Relaxed and acq/rel atomics (for increment and decrement respectively)
        -: 3365:// should be sufficient for thread safety.
        -: 3366:// See https://bugs.llvm.org/show_bug.cgi?id=22803
        -: 3367:#if defined(__clang__) && __has_builtin(__atomic_add_fetch)          \
        -: 3368:                       && defined(__ATOMIC_RELAXED)                  \
        -: 3369:                       && defined(__ATOMIC_ACQ_REL)
        -: 3370:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 3371:#elif defined(_LIBCPP_COMPILER_GCC)
        -: 3372:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -: 3373:#endif
        -: 3374:
        -: 3375:template <class _Tp>
        -: 3376:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 3377:__libcpp_atomic_refcount_increment(_Tp& __t) _NOEXCEPT
        -: 3378:{
        -: 3379:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 3380:    return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED);
        -: 3381:#else
        -: 3382:    return __t += 1;
        -: 3383:#endif
        -: 3384:}
        -: 3385:
        -: 3386:template <class _Tp>
        -: 3387:inline _LIBCPP_INLINE_VISIBILITY _Tp
        -: 3388:__libcpp_atomic_refcount_decrement(_Tp& __t) _NOEXCEPT
        -: 3389:{
        -: 3390:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        -: 3391:    return __atomic_add_fetch(&__t, -1, __ATOMIC_ACQ_REL);
        -: 3392:#else
        -: 3393:    return __t -= 1;
        -: 3394:#endif
        -: 3395:}
        -: 3396:
        -: 3397:class _LIBCPP_EXCEPTION_ABI bad_weak_ptr
        -: 3398:    : public std::exception
        -: 3399:{
        -: 3400:public:
        -: 3401:    virtual ~bad_weak_ptr() _NOEXCEPT;
        -: 3402:    virtual const char* what() const  _NOEXCEPT;
        -: 3403:};
        -: 3404:
        -: 3405:_LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY
        -: 3406:void __throw_bad_weak_ptr()
        -: 3407:{
        -: 3408:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3409:    throw bad_weak_ptr();
        -: 3410:#else
        -: 3411:    _VSTD::abort();
        -: 3412:#endif
        -: 3413:}
        -: 3414:
        -: 3415:template<class _Tp> class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 3416:
        -: 3417:class _LIBCPP_TYPE_VIS __shared_count
        -: 3418:{
        -: 3419:    __shared_count(const __shared_count&);
        -: 3420:    __shared_count& operator=(const __shared_count&);
        -: 3421:
        -: 3422:protected:
        -: 3423:    long __shared_owners_;
        -: 3424:    virtual ~__shared_count();
        -: 3425:private:
        -: 3426:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -: 3427:
        -: 3428:public:
        -: 3429:    _LIBCPP_INLINE_VISIBILITY
        -: 3430:    explicit __shared_count(long __refs = 0) _NOEXCEPT
        -: 3431:        : __shared_owners_(__refs) {}
        -: 3432:
        -: 3433:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 3434:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 3435:    void __add_shared() _NOEXCEPT;
        -: 3436:    bool __release_shared() _NOEXCEPT;
        -: 3437:#else
        -: 3438:    _LIBCPP_INLINE_VISIBILITY
        -: 3439:    void __add_shared() _NOEXCEPT {
        -: 3440:      __libcpp_atomic_refcount_increment(__shared_owners_);
        -: 3441:    }
        -: 3442:    _LIBCPP_INLINE_VISIBILITY
        -: 3443:    bool __release_shared() _NOEXCEPT {
        -: 3444:      if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) {
        -: 3445:        __on_zero_shared();
        -: 3446:        return true;
        -: 3447:      }
        -: 3448:      return false;
        -: 3449:    }
        -: 3450:#endif
        -: 3451:    _LIBCPP_INLINE_VISIBILITY
        -: 3452:    long use_count() const _NOEXCEPT {
        -: 3453:        return __libcpp_relaxed_load(&__shared_owners_) + 1;
        -: 3454:    }
        -: 3455:};
        -: 3456:
        -: 3457:class _LIBCPP_TYPE_VIS __shared_weak_count
        -: 3458:    : private __shared_count
        -: 3459:{
        -: 3460:    long __shared_weak_owners_;
        -: 3461:
        -: 3462:public:
        -: 3463:    _LIBCPP_INLINE_VISIBILITY
        -: 3464:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
        -: 3465:        : __shared_count(__refs),
        -: 3466:          __shared_weak_owners_(__refs) {}
        -: 3467:protected:
        -: 3468:    virtual ~__shared_weak_count();
        -: 3469:
        -: 3470:public:
        -: 3471:#if defined(_LIBCPP_BUILDING_LIBRARY) && \
        -: 3472:    defined(_LIBCPP_DEPRECATED_ABI_LEGACY_LIBRARY_DEFINITIONS_FOR_INLINE_FUNCTIONS)
        -: 3473:    void __add_shared() _NOEXCEPT;
        -: 3474:    void __add_weak() _NOEXCEPT;
        -: 3475:    void __release_shared() _NOEXCEPT;
        -: 3476:#else
        -: 3477:    _LIBCPP_INLINE_VISIBILITY
        -: 3478:    void __add_shared() _NOEXCEPT {
        -: 3479:      __shared_count::__add_shared();
        -: 3480:    }
        -: 3481:    _LIBCPP_INLINE_VISIBILITY
        -: 3482:    void __add_weak() _NOEXCEPT {
        -: 3483:      __libcpp_atomic_refcount_increment(__shared_weak_owners_);
        -: 3484:    }
        -: 3485:    _LIBCPP_INLINE_VISIBILITY
        -: 3486:    void __release_shared() _NOEXCEPT {
        -: 3487:      if (__shared_count::__release_shared())
        -: 3488:        __release_weak();
        -: 3489:    }
        -: 3490:#endif
        -: 3491:    void __release_weak() _NOEXCEPT;
        -: 3492:    _LIBCPP_INLINE_VISIBILITY
        -: 3493:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -: 3494:    __shared_weak_count* lock() _NOEXCEPT;
        -: 3495:
        -: 3496:    // Define the function out only if we build static libc++ without RTTI.
        -: 3497:    // Otherwise we may break clients who need to compile their projects with
        -: 3498:    // -fno-rtti and yet link against a libc++.dylib compiled
        -: 3499:    // without -fno-rtti.
        -: 3500:#if !defined(_LIBCPP_NO_RTTI) || !defined(_LIBCPP_BUILD_STATIC)
        -: 3501:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3502:#endif
        -: 3503:private:
        -: 3504:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -: 3505:};
        -: 3506:
        -: 3507:template <class _Tp, class _Dp, class _Alloc>
        -: 3508:class __shared_ptr_pointer
        -: 3509:    : public __shared_weak_count
        -: 3510:{
        -: 3511:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -: 3512:public:
        -: 3513:    _LIBCPP_INLINE_VISIBILITY
        -: 3514:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
        -: 3515:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -: 3516:
        -: 3517:#ifndef _LIBCPP_NO_RTTI
        -: 3518:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -: 3519:#endif
        -: 3520:
        -: 3521:private:
        -: 3522:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3523:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3524:};
        -: 3525:
        -: 3526:#ifndef _LIBCPP_NO_RTTI
        -: 3527:
        -: 3528:template <class _Tp, class _Dp, class _Alloc>
        -: 3529:const void*
        -: 3530:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -: 3531:{
        -: 3532:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : nullptr;
        -: 3533:}
        -: 3534:
        -: 3535:#endif  // _LIBCPP_NO_RTTI
        -: 3536:
        -: 3537:template <class _Tp, class _Dp, class _Alloc>
        -: 3538:void
        -: 3539:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3540:{
        -: 3541:    __data_.first().second()(__data_.first().first());
        -: 3542:    __data_.first().second().~_Dp();
        -: 3543:}
        -: 3544:
        -: 3545:template <class _Tp, class _Dp, class _Alloc>
        -: 3546:void
        -: 3547:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3548:{
        -: 3549:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -: 3550:    typedef allocator_traits<_Al> _ATraits;
        -: 3551:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3552:
        -: 3553:    _Al __a(__data_.second());
        -: 3554:    __data_.second().~_Alloc();
        -: 3555:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3556:}
        -: 3557:
        -: 3558:template <class _Tp, class _Alloc>
        -: 3559:class __shared_ptr_emplace
        -: 3560:    : public __shared_weak_count
        -: 3561:{
        -: 3562:    __compressed_pair<_Alloc, _Tp> __data_;
        -: 3563:public:
        -: 3564:
        -: 3565:    _LIBCPP_INLINE_VISIBILITY
        -: 3566:    __shared_ptr_emplace(_Alloc __a)
        -: 3567:        :  __data_(_VSTD::move(__a), __value_init_tag()) {}
        -: 3568:
        -: 3569:
        -: 3570:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 3571:    template <class ..._Args>
        -: 3572:        _LIBCPP_INLINE_VISIBILITY
        -: 3573:        __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        -: 3574:            :  __data_(piecewise_construct, _VSTD::forward_as_tuple(__a),
        -: 3575:                   _VSTD::forward_as_tuple(_VSTD::forward<_Args>(__args)...)) {}
        -: 3576:#else  // _LIBCPP_HAS_NO_VARIADICS
        -: 3577:
        -: 3578:    template <class _A0>
        -: 3579:        _LIBCPP_INLINE_VISIBILITY
        -: 3580:        __shared_ptr_emplace(_Alloc __a, _A0& __a0)
        -: 3581:            :  __data_(__a, _Tp(__a0)) {}
        -: 3582:
        -: 3583:    template <class _A0, class _A1>
        -: 3584:        _LIBCPP_INLINE_VISIBILITY
        -: 3585:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1)
        -: 3586:            :  __data_(__a, _Tp(__a0, __a1)) {}
        -: 3587:
        -: 3588:    template <class _A0, class _A1, class _A2>
        -: 3589:        _LIBCPP_INLINE_VISIBILITY
        -: 3590:        __shared_ptr_emplace(_Alloc __a, _A0& __a0, _A1& __a1, _A2& __a2)
        -: 3591:            :  __data_(__a, _Tp(__a0, __a1, __a2)) {}
        -: 3592:
        -: 3593:#endif  // _LIBCPP_HAS_NO_VARIADICS
        -: 3594:
        -: 3595:private:
        -: 3596:    virtual void __on_zero_shared() _NOEXCEPT;
        -: 3597:    virtual void __on_zero_shared_weak() _NOEXCEPT;
        -: 3598:public:
        -: 3599:    _LIBCPP_INLINE_VISIBILITY
        -: 3600:    _Tp* get() _NOEXCEPT {return _VSTD::addressof(__data_.second());}
        -: 3601:};
        -: 3602:
        -: 3603:template <class _Tp, class _Alloc>
        -: 3604:void
        -: 3605:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -: 3606:{
        -: 3607:    __data_.second().~_Tp();
        -: 3608:}
        -: 3609:
        -: 3610:template <class _Tp, class _Alloc>
        -: 3611:void
        -: 3612:__shared_ptr_emplace<_Tp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -: 3613:{
        -: 3614:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type _Al;
        -: 3615:    typedef allocator_traits<_Al> _ATraits;
        -: 3616:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -: 3617:    _Al __a(__data_.first());
        -: 3618:    __data_.first().~_Alloc();
        -: 3619:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -: 3620:}
        -: 3621:
        -: 3622:struct __shared_ptr_dummy_rebind_allocator_type;
        -: 3623:template <>
        -: 3624:class _LIBCPP_TEMPLATE_VIS allocator<__shared_ptr_dummy_rebind_allocator_type>
        -: 3625:{
        -: 3626:public:
        -: 3627:    template <class _Other>
        -: 3628:    struct rebind
        -: 3629:    {
        -: 3630:        typedef allocator<_Other> other;
        -: 3631:    };
        -: 3632:};
        -: 3633:
        -: 3634:template<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this;
        -: 3635:
        -: 3636:template<class _Tp>
        -: 3637:class _LIBCPP_TEMPLATE_VIS shared_ptr
        -: 3638:{
        -: 3639:public:
        -: 3640:    typedef _Tp element_type;
        -: 3641:
        -: 3642:#if _LIBCPP_STD_VER > 14
        -: 3643:    typedef weak_ptr<_Tp> weak_type;
        -: 3644:#endif
        -: 3645:private:
        -: 3646:    element_type*      __ptr_;
        -: 3647:    __shared_weak_count* __cntrl_;
        -: 3648:
        -: 3649:    struct __nat {int __for_bool_;};
        -: 3650:public:
        -: 3651:    _LIBCPP_INLINE_VISIBILITY
        -: 3652:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT;
        -: 3653:    _LIBCPP_INLINE_VISIBILITY
        -: 3654:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT;
        -: 3655:    template<class _Yp>
        -: 3656:        explicit shared_ptr(_Yp* __p,
        -: 3657:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3658:    template<class _Yp, class _Dp>
        -: 3659:        shared_ptr(_Yp* __p, _Dp __d,
        -: 3660:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3661:    template<class _Yp, class _Dp, class _Alloc>
        -: 3662:        shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3663:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3664:    template <class _Dp> shared_ptr(nullptr_t __p, _Dp __d);
        -: 3665:    template <class _Dp, class _Alloc> shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a);
        -: 3666:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) _NOEXCEPT;
        -: 3667:    _LIBCPP_INLINE_VISIBILITY
        -: 3668:    shared_ptr(const shared_ptr& __r) _NOEXCEPT;
        -: 3669:    template<class _Yp>
        -: 3670:        _LIBCPP_INLINE_VISIBILITY
        -: 3671:        shared_ptr(const shared_ptr<_Yp>& __r,
        -: 3672:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat())
        -: 3673:                       _NOEXCEPT;
        -: 3674:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3675:    _LIBCPP_INLINE_VISIBILITY
        -: 3676:    shared_ptr(shared_ptr&& __r) _NOEXCEPT;
        -: 3677:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY  shared_ptr(shared_ptr<_Yp>&& __r,
        -: 3678:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat())
        -: 3679:                       _NOEXCEPT;
        -: 3680:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3681:    template<class _Yp> explicit shared_ptr(const weak_ptr<_Yp>& __r,
        -: 3682:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type= __nat());
        -: 3683:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3684:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3685:    template<class _Yp>
        -: 3686:        shared_ptr(auto_ptr<_Yp>&& __r,
        -: 3687:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3688:#else
        -: 3689:    template<class _Yp>
        -: 3690:        shared_ptr(auto_ptr<_Yp> __r,
        -: 3691:                   typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type = __nat());
        -: 3692:#endif
        -: 3693:#endif
        -: 3694:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3695:    template <class _Yp, class _Dp>
        -: 3696:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3697:                   typename enable_if
        -: 3698:                   <
        -: 3699:                       !is_lvalue_reference<_Dp>::value &&
        -: 3700:                       !is_array<_Yp>::value &&
        -: 3701:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3702:                       __nat
        -: 3703:                   >::type = __nat());
        -: 3704:    template <class _Yp, class _Dp>
        -: 3705:        shared_ptr(unique_ptr<_Yp, _Dp>&&,
        -: 3706:                   typename enable_if
        -: 3707:                   <
        -: 3708:                       is_lvalue_reference<_Dp>::value &&
        -: 3709:                       !is_array<_Yp>::value &&
        -: 3710:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3711:                       __nat
        -: 3712:                   >::type = __nat());
        -: 3713:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3714:    template <class _Yp, class _Dp>
        -: 3715:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3716:                   typename enable_if
        -: 3717:                   <
        -: 3718:                       !is_lvalue_reference<_Dp>::value &&
        -: 3719:                       !is_array<_Yp>::value &&
        -: 3720:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3721:                       __nat
        -: 3722:                   >::type = __nat());
        -: 3723:    template <class _Yp, class _Dp>
        -: 3724:        shared_ptr(unique_ptr<_Yp, _Dp>,
        -: 3725:                   typename enable_if
        -: 3726:                   <
        -: 3727:                       is_lvalue_reference<_Dp>::value &&
        -: 3728:                       !is_array<_Yp>::value &&
        -: 3729:                       is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3730:                       __nat
        -: 3731:                   >::type = __nat());
        -: 3732:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3733:
        -: 3734:    ~shared_ptr();
        -: 3735:
        -: 3736:    _LIBCPP_INLINE_VISIBILITY
        -: 3737:    shared_ptr& operator=(const shared_ptr& __r) _NOEXCEPT;
        -: 3738:    template<class _Yp>
        -: 3739:        typename enable_if
        -: 3740:        <
        -: 3741:            is_convertible<_Yp*, element_type*>::value,
        -: 3742:            shared_ptr&
        -: 3743:        >::type
        -: 3744:        _LIBCPP_INLINE_VISIBILITY
        -: 3745:        operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT;
        -: 3746:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3747:    _LIBCPP_INLINE_VISIBILITY
        -: 3748:    shared_ptr& operator=(shared_ptr&& __r) _NOEXCEPT;
        -: 3749:    template<class _Yp>
        -: 3750:        typename enable_if
        -: 3751:        <
        -: 3752:            is_convertible<_Yp*, element_type*>::value,
        -: 3753:            shared_ptr<_Tp>&
        -: 3754:        >::type
        -: 3755:        _LIBCPP_INLINE_VISIBILITY
        -: 3756:        operator=(shared_ptr<_Yp>&& __r);
        -: 3757:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3758:    template<class _Yp>
        -: 3759:        _LIBCPP_INLINE_VISIBILITY
        -: 3760:        typename enable_if
        -: 3761:        <
        -: 3762:            !is_array<_Yp>::value &&
        -: 3763:            is_convertible<_Yp*, element_type*>::value,
        -: 3764:            shared_ptr
        -: 3765:        >::type&
        -: 3766:        operator=(auto_ptr<_Yp>&& __r);
        -: 3767:#endif
        -: 3768:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3769:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 3770:    template<class _Yp>
        -: 3771:        _LIBCPP_INLINE_VISIBILITY
        -: 3772:        typename enable_if
        -: 3773:        <
        -: 3774:            !is_array<_Yp>::value &&
        -: 3775:            is_convertible<_Yp*, element_type*>::value,
        -: 3776:            shared_ptr&
        -: 3777:        >::type
        -: 3778:        operator=(auto_ptr<_Yp> __r);
        -: 3779:#endif
        -: 3780:#endif
        -: 3781:    template <class _Yp, class _Dp>
        -: 3782:        typename enable_if
        -: 3783:        <
        -: 3784:            !is_array<_Yp>::value &&
        -: 3785:            is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 3786:            shared_ptr&
        -: 3787:        >::type
        -: 3788:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3789:        _LIBCPP_INLINE_VISIBILITY
        -: 3790:        operator=(unique_ptr<_Yp, _Dp>&& __r);
        -: 3791:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 3792:        _LIBCPP_INLINE_VISIBILITY
        -: 3793:        operator=(unique_ptr<_Yp, _Dp> __r);
        -: 3794:#endif
        -: 3795:
        -: 3796:    _LIBCPP_INLINE_VISIBILITY
        -: 3797:    void swap(shared_ptr& __r) _NOEXCEPT;
        -: 3798:    _LIBCPP_INLINE_VISIBILITY
        -: 3799:    void reset() _NOEXCEPT;
        -: 3800:    template<class _Yp>
        -: 3801:        typename enable_if
        -: 3802:        <
        -: 3803:            is_convertible<_Yp*, element_type*>::value,
        -: 3804:            void
        -: 3805:        >::type
        -: 3806:        _LIBCPP_INLINE_VISIBILITY
        -: 3807:        reset(_Yp* __p);
        -: 3808:    template<class _Yp, class _Dp>
        -: 3809:        typename enable_if
        -: 3810:        <
        -: 3811:            is_convertible<_Yp*, element_type*>::value,
        -: 3812:            void
        -: 3813:        >::type
        -: 3814:        _LIBCPP_INLINE_VISIBILITY
        -: 3815:        reset(_Yp* __p, _Dp __d);
        -: 3816:    template<class _Yp, class _Dp, class _Alloc>
        -: 3817:        typename enable_if
        -: 3818:        <
        -: 3819:            is_convertible<_Yp*, element_type*>::value,
        -: 3820:            void
        -: 3821:        >::type
        -: 3822:        _LIBCPP_INLINE_VISIBILITY
        -: 3823:        reset(_Yp* __p, _Dp __d, _Alloc __a);
        -: 3824:
        -: 3825:    _LIBCPP_INLINE_VISIBILITY
        -: 3826:    element_type* get() const _NOEXCEPT {return __ptr_;}
        -: 3827:    _LIBCPP_INLINE_VISIBILITY
        -: 3828:    typename add_lvalue_reference<element_type>::type operator*() const _NOEXCEPT
        -: 3829:        {return *__ptr_;}
        -: 3830:    _LIBCPP_INLINE_VISIBILITY
        -: 3831:    element_type* operator->() const _NOEXCEPT {return __ptr_;}
        -: 3832:    _LIBCPP_INLINE_VISIBILITY
        -: 3833:    long use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 3834:    _LIBCPP_INLINE_VISIBILITY
        -: 3835:    bool unique() const _NOEXCEPT {return use_count() == 1;}
        -: 3836:    _LIBCPP_INLINE_VISIBILITY
        -: 3837:    _LIBCPP_EXPLICIT operator bool() const _NOEXCEPT {return get() != 0;}
        -: 3838:    template <class _Up>
        -: 3839:        _LIBCPP_INLINE_VISIBILITY
        -: 3840:        bool owner_before(shared_ptr<_Up> const& __p) const _NOEXCEPT
        -: 3841:        {return __cntrl_ < __p.__cntrl_;}
        -: 3842:    template <class _Up>
        -: 3843:        _LIBCPP_INLINE_VISIBILITY
        -: 3844:        bool owner_before(weak_ptr<_Up> const& __p) const _NOEXCEPT
        -: 3845:        {return __cntrl_ < __p.__cntrl_;}
        -: 3846:    _LIBCPP_INLINE_VISIBILITY
        -: 3847:    bool
        -: 3848:    __owner_equivalent(const shared_ptr& __p) const
        -: 3849:        {return __cntrl_ == __p.__cntrl_;}
        -: 3850:
        -: 3851:#ifndef _LIBCPP_NO_RTTI
        -: 3852:    template <class _Dp>
        -: 3853:        _LIBCPP_INLINE_VISIBILITY
        -: 3854:        _Dp* __get_deleter() const _NOEXCEPT
        -: 3855:            {return static_cast<_Dp*>(__cntrl_
        -: 3856:                    ? const_cast<void *>(__cntrl_->__get_deleter(typeid(_Dp)))
        -: 3857:                      : nullptr);}
        -: 3858:#endif  // _LIBCPP_NO_RTTI
        -: 3859:
        -: 3860:    template<class _Yp, class _CntrlBlk>
        -: 3861:    static shared_ptr<_Tp>
        -: 3862:    __create_with_control_block(_Yp* __p, _CntrlBlk* __cntrl)
        -: 3863:    {
        -: 3864:        shared_ptr<_Tp> __r;
        -: 3865:        __r.__ptr_ = __p;
        -: 3866:        __r.__cntrl_ = __cntrl;
        -: 3867:        __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 3868:        return __r;
        -: 3869:    }
        -: 3870:
        -: 3871:    template<class _Alloc, class ..._Args>
        -: 3872:        static
        -: 3873:        shared_ptr<_Tp>
        -: 3874:        allocate_shared(const _Alloc& __a, _Args&& ...__args);
        -: 3875:
        -: 3876:private:
        -: 3877:    template <class _Yp, bool = is_function<_Yp>::value>
        -: 3878:        struct __shared_ptr_default_allocator
        -: 3879:        {
        -: 3880:            typedef allocator<_Yp> type;
        -: 3881:        };
        -: 3882:
        -: 3883:    template <class _Yp>
        -: 3884:        struct __shared_ptr_default_allocator<_Yp, true>
        -: 3885:        {
        -: 3886:            typedef allocator<__shared_ptr_dummy_rebind_allocator_type> type;
        -: 3887:        };
        -: 3888:
        -: 3889:    template <class _Yp, class _OrigPtr>
        -: 3890:        _LIBCPP_INLINE_VISIBILITY
        -: 3891:        typename enable_if<is_convertible<_OrigPtr*,
        -: 3892:                                          const enable_shared_from_this<_Yp>*
        -: 3893:        >::value,
        -: 3894:            void>::type
        -: 3895:        __enable_weak_this(const enable_shared_from_this<_Yp>* __e,
        -: 3896:                           _OrigPtr* __ptr) _NOEXCEPT
        -: 3897:        {
        -: 3898:            typedef typename remove_cv<_Yp>::type _RawYp;
        -: 3899:            if (__e && __e->__weak_this_.expired())
        -: 3900:            {
        -: 3901:                __e->__weak_this_ = shared_ptr<_RawYp>(*this,
        -: 3902:                    const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
        -: 3903:            }
        -: 3904:        }
        -: 3905:
        -: 3906:    _LIBCPP_INLINE_VISIBILITY void __enable_weak_this(...) _NOEXCEPT {}
        -: 3907:
        -: 3908:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 3909:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 3910:};
        -: 3911:
        -: 3912:
        -: 3913:template<class _Tp>
        -: 3914:inline
        -: 3915:_LIBCPP_CONSTEXPR
        -: 3916:shared_ptr<_Tp>::shared_ptr() _NOEXCEPT
        -: 3917:    : __ptr_(0),
        -: 3918:      __cntrl_(0)
        -: 3919:{
        -: 3920:}
        -: 3921:
        -: 3922:template<class _Tp>
        -: 3923:inline
        -: 3924:_LIBCPP_CONSTEXPR
        -: 3925:shared_ptr<_Tp>::shared_ptr(nullptr_t) _NOEXCEPT
        -: 3926:    : __ptr_(0),
        -: 3927:      __cntrl_(0)
        -: 3928:{
        -: 3929:}
        -: 3930:
        -: 3931:template<class _Tp>
        -: 3932:template<class _Yp>
        -: 3933:shared_ptr<_Tp>::shared_ptr(_Yp* __p,
        -: 3934:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 3935:    : __ptr_(__p)
        -: 3936:{
        -: 3937:    unique_ptr<_Yp> __hold(__p);
        -: 3938:    typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3939:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, _AllocT > _CntrlBlk;
        -: 3940:    __cntrl_ = new _CntrlBlk(__p, default_delete<_Yp>(), _AllocT());
        -: 3941:    __hold.release();
        -: 3942:    __enable_weak_this(__p, __p);
        -: 3943:}
        -: 3944:
        -: 3945:template<class _Tp>
        -: 3946:template<class _Yp, class _Dp>
        -: 3947:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d,
        -: 3948:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 3949:    : __ptr_(__p)
        -: 3950:{
        -: 3951:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3952:    try
        -: 3953:    {
        -: 3954:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3955:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 3956:        typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT > _CntrlBlk;
        -: 3957:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 3958:        __enable_weak_this(__p, __p);
        -: 3959:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3960:    }
        -: 3961:    catch (...)
        -: 3962:    {
        -: 3963:        __d(__p);
        -: 3964:        throw;
        -: 3965:    }
        -: 3966:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3967:}
        -: 3968:
        -: 3969:template<class _Tp>
        -: 3970:template<class _Dp>
        -: 3971:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d)
        -: 3972:    : __ptr_(0)
        -: 3973:{
        -: 3974:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3975:    try
        -: 3976:    {
        -: 3977:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3978:        typedef typename __shared_ptr_default_allocator<_Tp>::type _AllocT;
        -: 3979:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _AllocT > _CntrlBlk;
        -: 3980:        __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -: 3981:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3982:    }
        -: 3983:    catch (...)
        -: 3984:    {
        -: 3985:        __d(__p);
        -: 3986:        throw;
        -: 3987:    }
        -: 3988:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 3989:}
        -: 3990:
        -: 3991:template<class _Tp>
        -: 3992:template<class _Yp, class _Dp, class _Alloc>
        -: 3993:shared_ptr<_Tp>::shared_ptr(_Yp* __p, _Dp __d, _Alloc __a,
        -: 3994:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 3995:    : __ptr_(__p)
        -: 3996:{
        -: 3997:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 3998:    try
        -: 3999:    {
        -: 4000:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4001:        typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -: 4002:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4003:        typedef __allocator_destructor<_A2> _D2;
        -: 4004:        _A2 __a2(__a);
        -: 4005:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4006:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4007:            _CntrlBlk(__p, __d, __a);
        -: 4008:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4009:        __enable_weak_this(__p, __p);
        -: 4010:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4011:    }
        -: 4012:    catch (...)
        -: 4013:    {
        -: 4014:        __d(__p);
        -: 4015:        throw;
        -: 4016:    }
        -: 4017:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4018:}
        -: 4019:
        -: 4020:template<class _Tp>
        -: 4021:template<class _Dp, class _Alloc>
        -: 4022:shared_ptr<_Tp>::shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -: 4023:    : __ptr_(0)
        -: 4024:{
        -: 4025:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4026:    try
        -: 4027:    {
        -: 4028:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4029:        typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -: 4030:        typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4031:        typedef __allocator_destructor<_A2> _D2;
        -: 4032:        _A2 __a2(__a);
        -: 4033:        unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4034:        ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4035:            _CntrlBlk(__p, __d, __a);
        -: 4036:        __cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4037:#ifndef _LIBCPP_NO_EXCEPTIONS
        -: 4038:    }
        -: 4039:    catch (...)
        -: 4040:    {
        -: 4041:        __d(__p);
        -: 4042:        throw;
        -: 4043:    }
        -: 4044:#endif  // _LIBCPP_NO_EXCEPTIONS
        -: 4045:}
        -: 4046:
        -: 4047:template<class _Tp>
        -: 4048:template<class _Yp>
        -: 4049:inline
        -: 4050:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
        -: 4051:    : __ptr_(__p),
        -: 4052:      __cntrl_(__r.__cntrl_)
        -: 4053:{
        -: 4054:    if (__cntrl_)
        -: 4055:        __cntrl_->__add_shared();
        -: 4056:}
        -: 4057:
        -: 4058:template<class _Tp>
        -: 4059:inline
        -: 4060:shared_ptr<_Tp>::shared_ptr(const shared_ptr& __r) _NOEXCEPT
        -: 4061:    : __ptr_(__r.__ptr_),
        -: 4062:      __cntrl_(__r.__cntrl_)
        -: 4063:{
        -: 4064:    if (__cntrl_)
        -: 4065:        __cntrl_->__add_shared();
        -: 4066:}
        -: 4067:
        -: 4068:template<class _Tp>
        -: 4069:template<class _Yp>
        -: 4070:inline
        -: 4071:shared_ptr<_Tp>::shared_ptr(const shared_ptr<_Yp>& __r,
        -: 4072:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4073:         _NOEXCEPT
        -: 4074:    : __ptr_(__r.__ptr_),
        -: 4075:      __cntrl_(__r.__cntrl_)
        -: 4076:{
        -: 4077:    if (__cntrl_)
        -: 4078:        __cntrl_->__add_shared();
        -: 4079:}
        -: 4080:
        -: 4081:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4082:
        -: 4083:template<class _Tp>
        -: 4084:inline
        -: 4085:shared_ptr<_Tp>::shared_ptr(shared_ptr&& __r) _NOEXCEPT
        -: 4086:    : __ptr_(__r.__ptr_),
        -: 4087:      __cntrl_(__r.__cntrl_)
        -: 4088:{
        -: 4089:    __r.__ptr_ = 0;
        -: 4090:    __r.__cntrl_ = 0;
        -: 4091:}
        -: 4092:
        -: 4093:template<class _Tp>
        -: 4094:template<class _Yp>
        -: 4095:inline
        -: 4096:shared_ptr<_Tp>::shared_ptr(shared_ptr<_Yp>&& __r,
        -: 4097:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4098:         _NOEXCEPT
        -: 4099:    : __ptr_(__r.__ptr_),
        -: 4100:      __cntrl_(__r.__cntrl_)
        -: 4101:{
        -: 4102:    __r.__ptr_ = 0;
        -: 4103:    __r.__cntrl_ = 0;
        -: 4104:}
        -: 4105:
        -: 4106:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4107:
        -: 4108:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 4109:template<class _Tp>
        -: 4110:template<class _Yp>
        -: 4111:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4112:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp>&& __r,
        -: 4113:#else
        -: 4114:shared_ptr<_Tp>::shared_ptr(auto_ptr<_Yp> __r,
        -: 4115:#endif
        -: 4116:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4117:    : __ptr_(__r.get())
        -: 4118:{
        -: 4119:    typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -: 4120:    __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -: 4121:    __enable_weak_this(__r.get(), __r.get());
        -: 4122:    __r.release();
        -: 4123:}
        -: 4124:#endif
        -: 4125:
        -: 4126:template<class _Tp>
        -: 4127:template <class _Yp, class _Dp>
        -: 4128:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4129:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4130:#else
        -: 4131:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4132:#endif
        -: 4133:                            typename enable_if
        -: 4134:                            <
        -: 4135:                                !is_lvalue_reference<_Dp>::value &&
        -: 4136:                                !is_array<_Yp>::value &&
        -: 4137:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4138:                                __nat
        -: 4139:                            >::type)
        -: 4140:    : __ptr_(__r.get())
        -: 4141:{
        -: 4142:#if _LIBCPP_STD_VER > 11
        -: 4143:    if (__ptr_ == nullptr)
        -: 4144:        __cntrl_ = nullptr;
        -: 4145:    else
        -: 4146:#endif
        -: 4147:    {
        -: 4148:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 4149:        typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT > _CntrlBlk;
        -: 4150:        __cntrl_ = new _CntrlBlk(__r.get(), __r.get_deleter(), _AllocT());
        -: 4151:        __enable_weak_this(__r.get(), __r.get());
        -: 4152:    }
        -: 4153:    __r.release();
        -: 4154:}
        -: 4155:
        -: 4156:template<class _Tp>
        -: 4157:template <class _Yp, class _Dp>
        -: 4158:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4159:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp>&& __r,
        -: 4160:#else
        -: 4161:shared_ptr<_Tp>::shared_ptr(unique_ptr<_Yp, _Dp> __r,
        -: 4162:#endif
        -: 4163:                            typename enable_if
        -: 4164:                            <
        -: 4165:                                is_lvalue_reference<_Dp>::value &&
        -: 4166:                                !is_array<_Yp>::value &&
        -: 4167:                                is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value,
        -: 4168:                                __nat
        -: 4169:                            >::type)
        -: 4170:    : __ptr_(__r.get())
        -: 4171:{
        -: 4172:#if _LIBCPP_STD_VER > 11
        -: 4173:    if (__ptr_ == nullptr)
        -: 4174:        __cntrl_ = nullptr;
        -: 4175:    else
        -: 4176:#endif
        -: 4177:    {
        -: 4178:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -: 4179:        typedef __shared_ptr_pointer<_Yp*,
        -: 4180:                                     reference_wrapper<typename remove_reference<_Dp>::type>,
        -: 4181:                                     _AllocT > _CntrlBlk;
        -: 4182:        __cntrl_ = new _CntrlBlk(__r.get(), ref(__r.get_deleter()), _AllocT());
        -: 4183:        __enable_weak_this(__r.get(), __r.get());
        -: 4184:    }
        -: 4185:    __r.release();
        -: 4186:}
        -: 4187:
        -: 4188:template<class _Tp>
        -: 4189:template<class _Alloc, class ..._Args>
        -: 4190:shared_ptr<_Tp>
        -: 4191:shared_ptr<_Tp>::allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4192:{
        -: 4193:    static_assert( is_constructible<_Tp, _Args...>::value, "Can't construct object in allocate_shared" );
        -: 4194:    typedef __shared_ptr_emplace<_Tp, _Alloc> _CntrlBlk;
        -: 4195:    typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -: 4196:    typedef __allocator_destructor<_A2> _D2;
        -: 4197:    _A2 __a2(__a);
        -: 4198:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4199:    ::new(static_cast<void*>(_VSTD::addressof(*__hold2.get())))
        -: 4200:        _CntrlBlk(__a, _VSTD::forward<_Args>(__args)...);
        -: 4201:    shared_ptr<_Tp> __r;
        -: 4202:    __r.__ptr_ = __hold2.get()->get();
        -: 4203:    __r.__cntrl_ = _VSTD::addressof(*__hold2.release());
        -: 4204:    __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        -: 4205:    return __r;
        -: 4206:}
        -: 4207:
        -: 4208:template<class _Tp>
        -: 4209:shared_ptr<_Tp>::~shared_ptr()
        -: 4210:{
        -: 4211:    if (__cntrl_)
        -: 4212:        __cntrl_->__release_shared();
        -: 4213:}
        -: 4214:
        -: 4215:template<class _Tp>
        -: 4216:inline
        -: 4217:shared_ptr<_Tp>&
        -: 4218:shared_ptr<_Tp>::operator=(const shared_ptr& __r) _NOEXCEPT
        -: 4219:{
        -: 4220:    shared_ptr(__r).swap(*this);
        -: 4221:    return *this;
        -: 4222:}
        -: 4223:
        -: 4224:template<class _Tp>
        -: 4225:template<class _Yp>
        -: 4226:inline
        -: 4227:typename enable_if
        -: 4228:<
        -: 4229:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4230:    shared_ptr<_Tp>&
        -: 4231:>::type
        -: 4232:shared_ptr<_Tp>::operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -: 4233:{
        -: 4234:    shared_ptr(__r).swap(*this);
        -: 4235:    return *this;
        -: 4236:}
        -: 4237:
        -: 4238:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4239:
        -: 4240:template<class _Tp>
        -: 4241:inline
        -: 4242:shared_ptr<_Tp>&
        -: 4243:shared_ptr<_Tp>::operator=(shared_ptr&& __r) _NOEXCEPT
        -: 4244:{
        -: 4245:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4246:    return *this;
        -: 4247:}
        -: 4248:
        -: 4249:template<class _Tp>
        -: 4250:template<class _Yp>
        -: 4251:inline
        -: 4252:typename enable_if
        -: 4253:<
        -: 4254:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4255:    shared_ptr<_Tp>&
        -: 4256:>::type
        -: 4257:shared_ptr<_Tp>::operator=(shared_ptr<_Yp>&& __r)
        -: 4258:{
        -: 4259:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4260:    return *this;
        -: 4261:}
        -: 4262:
        -: 4263:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 4264:template<class _Tp>
        -: 4265:template<class _Yp>
        -: 4266:inline
        -: 4267:typename enable_if
        -: 4268:<
        -: 4269:    !is_array<_Yp>::value &&
        -: 4270:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4271:    shared_ptr<_Tp>
        -: 4272:>::type&
        -: 4273:shared_ptr<_Tp>::operator=(auto_ptr<_Yp>&& __r)
        -: 4274:{
        -: 4275:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4276:    return *this;
        -: 4277:}
        -: 4278:#endif
        -: 4279:
        -: 4280:template<class _Tp>
        -: 4281:template <class _Yp, class _Dp>
        -: 4282:inline
        -: 4283:typename enable_if
        -: 4284:<
        -: 4285:    !is_array<_Yp>::value &&
        -: 4286:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer,
        -: 4287:                   typename shared_ptr<_Tp>::element_type*>::value,
        -: 4288:    shared_ptr<_Tp>&
        -: 4289:>::type
        -: 4290:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp>&& __r)
        -: 4291:{
        -: 4292:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4293:    return *this;
        -: 4294:}
        -: 4295:
        -: 4296:#else  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4297:
        -: 4298:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -: 4299:template<class _Tp>
        -: 4300:template<class _Yp>
        -: 4301:inline _LIBCPP_INLINE_VISIBILITY
        -: 4302:typename enable_if
        -: 4303:<
        -: 4304:    !is_array<_Yp>::value &&
        -: 4305:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4306:    shared_ptr<_Tp>&
        -: 4307:>::type
        -: 4308:shared_ptr<_Tp>::operator=(auto_ptr<_Yp> __r)
        -: 4309:{
        -: 4310:    shared_ptr(__r).swap(*this);
        -: 4311:    return *this;
        -: 4312:}
        -: 4313:#endif
        -: 4314:
        -: 4315:template<class _Tp>
        -: 4316:template <class _Yp, class _Dp>
        -: 4317:inline _LIBCPP_INLINE_VISIBILITY
        -: 4318:typename enable_if
        -: 4319:<
        -: 4320:    !is_array<_Yp>::value &&
        -: 4321:    is_convertible<typename unique_ptr<_Yp, _Dp>::pointer,
        -: 4322:                   typename shared_ptr<_Tp>::element_type*>::value,
        -: 4323:    shared_ptr<_Tp>&
        -: 4324:>::type
        -: 4325:shared_ptr<_Tp>::operator=(unique_ptr<_Yp, _Dp> __r)
        -: 4326:{
        -: 4327:    shared_ptr(_VSTD::move(__r)).swap(*this);
        -: 4328:    return *this;
        -: 4329:}
        -: 4330:
        -: 4331:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4332:
        -: 4333:template<class _Tp>
        -: 4334:inline
        -: 4335:void
        -: 4336:shared_ptr<_Tp>::swap(shared_ptr& __r) _NOEXCEPT
        -: 4337:{
        -: 4338:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 4339:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 4340:}
        -: 4341:
        -: 4342:template<class _Tp>
        -: 4343:inline
        -: 4344:void
        -: 4345:shared_ptr<_Tp>::reset() _NOEXCEPT
        -: 4346:{
        -: 4347:    shared_ptr().swap(*this);
        -: 4348:}
        -: 4349:
        -: 4350:template<class _Tp>
        -: 4351:template<class _Yp>
        -: 4352:inline
        -: 4353:typename enable_if
        -: 4354:<
        -: 4355:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4356:    void
        -: 4357:>::type
        -: 4358:shared_ptr<_Tp>::reset(_Yp* __p)
        -: 4359:{
        -: 4360:    shared_ptr(__p).swap(*this);
        -: 4361:}
        -: 4362:
        -: 4363:template<class _Tp>
        -: 4364:template<class _Yp, class _Dp>
        -: 4365:inline
        -: 4366:typename enable_if
        -: 4367:<
        -: 4368:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4369:    void
        -: 4370:>::type
        -: 4371:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d)
        -: 4372:{
        -: 4373:    shared_ptr(__p, __d).swap(*this);
        -: 4374:}
        -: 4375:
        -: 4376:template<class _Tp>
        -: 4377:template<class _Yp, class _Dp, class _Alloc>
        -: 4378:inline
        -: 4379:typename enable_if
        -: 4380:<
        -: 4381:    is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value,
        -: 4382:    void
        -: 4383:>::type
        -: 4384:shared_ptr<_Tp>::reset(_Yp* __p, _Dp __d, _Alloc __a)
        -: 4385:{
        -: 4386:    shared_ptr(__p, __d, __a).swap(*this);
        -: 4387:}
        -: 4388:
        -: 4389:template<class _Tp, class ..._Args>
        -: 4390:inline _LIBCPP_INLINE_VISIBILITY
        -: 4391:typename enable_if
        -: 4392:<
        -: 4393:    !is_array<_Tp>::value,
        -: 4394:    shared_ptr<_Tp>
        -: 4395:>::type
        -: 4396:make_shared(_Args&& ...__args)
        -: 4397:{
        -: 4398:    static_assert(is_constructible<_Tp, _Args...>::value, "Can't construct object in make_shared");
        -: 4399:    typedef __shared_ptr_emplace<_Tp, allocator<_Tp> > _CntrlBlk;
        -: 4400:    typedef allocator<_CntrlBlk> _A2;
        -: 4401:    typedef __allocator_destructor<_A2> _D2;
        -: 4402:
        -: 4403:    _A2 __a2;
        -: 4404:    unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -: 4405:    ::new(__hold2.get()) _CntrlBlk(__a2, _VSTD::forward<_Args>(__args)...);
        -: 4406:
        -: 4407:    _Tp *__ptr = __hold2.get()->get();
        -: 4408:    return shared_ptr<_Tp>::__create_with_control_block(__ptr, __hold2.release());
        -: 4409:}
        -: 4410:
        -: 4411:template<class _Tp, class _Alloc, class ..._Args>
        -: 4412:inline _LIBCPP_INLINE_VISIBILITY
        -: 4413:typename enable_if
        -: 4414:<
        -: 4415:    !is_array<_Tp>::value,
        -: 4416:    shared_ptr<_Tp>
        -: 4417:>::type
        -: 4418:allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 4419:{
        -: 4420:    return shared_ptr<_Tp>::allocate_shared(__a, _VSTD::forward<_Args>(__args)...);
        -: 4421:}
        -: 4422:
        -: 4423:template<class _Tp, class _Up>
        -: 4424:inline _LIBCPP_INLINE_VISIBILITY
        -: 4425:bool
        -: 4426:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4427:{
        -: 4428:    return __x.get() == __y.get();
        -: 4429:}
        -: 4430:
        -: 4431:template<class _Tp, class _Up>
        -: 4432:inline _LIBCPP_INLINE_VISIBILITY
        -: 4433:bool
        -: 4434:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4435:{
        -: 4436:    return !(__x == __y);
        -: 4437:}
        -: 4438:
        -: 4439:template<class _Tp, class _Up>
        -: 4440:inline _LIBCPP_INLINE_VISIBILITY
        -: 4441:bool
        -: 4442:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4443:{
        -: 4444:#if _LIBCPP_STD_VER <= 11
        -: 4445:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 4446:    return less<_Vp>()(__x.get(), __y.get());
        -: 4447:#else
        -: 4448:    return less<>()(__x.get(), __y.get());
        -: 4449:#endif
        -: 4450:
        -: 4451:}
        -: 4452:
        -: 4453:template<class _Tp, class _Up>
        -: 4454:inline _LIBCPP_INLINE_VISIBILITY
        -: 4455:bool
        -: 4456:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4457:{
        -: 4458:    return __y < __x;
        -: 4459:}
        -: 4460:
        -: 4461:template<class _Tp, class _Up>
        -: 4462:inline _LIBCPP_INLINE_VISIBILITY
        -: 4463:bool
        -: 4464:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4465:{
        -: 4466:    return !(__y < __x);
        -: 4467:}
        -: 4468:
        -: 4469:template<class _Tp, class _Up>
        -: 4470:inline _LIBCPP_INLINE_VISIBILITY
        -: 4471:bool
        -: 4472:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 4473:{
        -: 4474:    return !(__x < __y);
        -: 4475:}
        -: 4476:
        -: 4477:template<class _Tp>
        -: 4478:inline _LIBCPP_INLINE_VISIBILITY
        -: 4479:bool
        -: 4480:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4481:{
        -: 4482:    return !__x;
        -: 4483:}
        -: 4484:
        -: 4485:template<class _Tp>
        -: 4486:inline _LIBCPP_INLINE_VISIBILITY
        -: 4487:bool
        -: 4488:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4489:{
        -: 4490:    return !__x;
        -: 4491:}
        -: 4492:
        -: 4493:template<class _Tp>
        -: 4494:inline _LIBCPP_INLINE_VISIBILITY
        -: 4495:bool
        -: 4496:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4497:{
        -: 4498:    return static_cast<bool>(__x);
        -: 4499:}
        -: 4500:
        -: 4501:template<class _Tp>
        -: 4502:inline _LIBCPP_INLINE_VISIBILITY
        -: 4503:bool
        -: 4504:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4505:{
        -: 4506:    return static_cast<bool>(__x);
        -: 4507:}
        -: 4508:
        -: 4509:template<class _Tp>
        -: 4510:inline _LIBCPP_INLINE_VISIBILITY
        -: 4511:bool
        -: 4512:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4513:{
        -: 4514:    return less<_Tp*>()(__x.get(), nullptr);
        -: 4515:}
        -: 4516:
        -: 4517:template<class _Tp>
        -: 4518:inline _LIBCPP_INLINE_VISIBILITY
        -: 4519:bool
        -: 4520:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4521:{
        -: 4522:    return less<_Tp*>()(nullptr, __x.get());
        -: 4523:}
        -: 4524:
        -: 4525:template<class _Tp>
        -: 4526:inline _LIBCPP_INLINE_VISIBILITY
        -: 4527:bool
        -: 4528:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4529:{
        -: 4530:    return nullptr < __x;
        -: 4531:}
        -: 4532:
        -: 4533:template<class _Tp>
        -: 4534:inline _LIBCPP_INLINE_VISIBILITY
        -: 4535:bool
        -: 4536:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4537:{
        -: 4538:    return __x < nullptr;
        -: 4539:}
        -: 4540:
        -: 4541:template<class _Tp>
        -: 4542:inline _LIBCPP_INLINE_VISIBILITY
        -: 4543:bool
        -: 4544:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4545:{
        -: 4546:    return !(nullptr < __x);
        -: 4547:}
        -: 4548:
        -: 4549:template<class _Tp>
        -: 4550:inline _LIBCPP_INLINE_VISIBILITY
        -: 4551:bool
        -: 4552:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4553:{
        -: 4554:    return !(__x < nullptr);
        -: 4555:}
        -: 4556:
        -: 4557:template<class _Tp>
        -: 4558:inline _LIBCPP_INLINE_VISIBILITY
        -: 4559:bool
        -: 4560:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 4561:{
        -: 4562:    return !(__x < nullptr);
        -: 4563:}
        -: 4564:
        -: 4565:template<class _Tp>
        -: 4566:inline _LIBCPP_INLINE_VISIBILITY
        -: 4567:bool
        -: 4568:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 4569:{
        -: 4570:    return !(nullptr < __x);
        -: 4571:}
        -: 4572:
        -: 4573:template<class _Tp>
        -: 4574:inline _LIBCPP_INLINE_VISIBILITY
        -: 4575:void
        -: 4576:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 4577:{
        -: 4578:    __x.swap(__y);
        -: 4579:}
        -: 4580:
        -: 4581:template<class _Tp, class _Up>
        -: 4582:inline _LIBCPP_INLINE_VISIBILITY
        -: 4583:typename enable_if
        -: 4584:<
        -: 4585:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 4586:    shared_ptr<_Tp>
        -: 4587:>::type
        -: 4588:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4589:{
        -: 4590:    return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get()));
        -: 4591:}
        -: 4592:
        -: 4593:template<class _Tp, class _Up>
        -: 4594:inline _LIBCPP_INLINE_VISIBILITY
        -: 4595:typename enable_if
        -: 4596:<
        -: 4597:    !is_array<_Tp>::value && !is_array<_Up>::value,
        -: 4598:    shared_ptr<_Tp>
        -: 4599:>::type
        -: 4600:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4601:{
        -: 4602:    _Tp* __p = dynamic_cast<_Tp*>(__r.get());
        -: 4603:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 4604:}
        -: 4605:
        -: 4606:template<class _Tp, class _Up>
        -: 4607:typename enable_if
        -: 4608:<
        -: 4609:    is_array<_Tp>::value == is_array<_Up>::value,
        -: 4610:    shared_ptr<_Tp>
        -: 4611:>::type
        -: 4612:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 4613:{
        -: 4614:    typedef typename remove_extent<_Tp>::type _RTp;
        -: 4615:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 4616:}
        -: 4617:
        -: 4618:#ifndef _LIBCPP_NO_RTTI
        -: 4619:
        -: 4620:template<class _Dp, class _Tp>
        -: 4621:inline _LIBCPP_INLINE_VISIBILITY
        -: 4622:_Dp*
        -: 4623:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 4624:{
        -: 4625:    return __p.template __get_deleter<_Dp>();
        -: 4626:}
        -: 4627:
        -: 4628:#endif  // _LIBCPP_NO_RTTI
        -: 4629:
        -: 4630:template<class _Tp>
        -: 4631:class _LIBCPP_TEMPLATE_VIS weak_ptr
        -: 4632:{
        -: 4633:public:
        -: 4634:    typedef _Tp element_type;
        -: 4635:private:
        -: 4636:    element_type*        __ptr_;
        -: 4637:    __shared_weak_count* __cntrl_;
        -: 4638:
        -: 4639:public:
        -: 4640:    _LIBCPP_INLINE_VISIBILITY
        -: 4641:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 4642:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,
        -: 4643:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4644:                        _NOEXCEPT;
        -: 4645:    _LIBCPP_INLINE_VISIBILITY
        -: 4646:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 4647:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,
        -: 4648:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4649:                         _NOEXCEPT;
        -: 4650:
        -: 4651:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4652:    _LIBCPP_INLINE_VISIBILITY
        -: 4653:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 4654:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,
        -: 4655:                   typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type = 0)
        -: 4656:                         _NOEXCEPT;
        -: 4657:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4658:    ~weak_ptr();
        -: 4659:
        -: 4660:    _LIBCPP_INLINE_VISIBILITY
        -: 4661:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 4662:    template<class _Yp>
        -: 4663:        typename enable_if
        -: 4664:        <
        -: 4665:            is_convertible<_Yp*, element_type*>::value,
        -: 4666:            weak_ptr&
        -: 4667:        >::type
        -: 4668:        _LIBCPP_INLINE_VISIBILITY
        -: 4669:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 4670:
        -: 4671:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4672:
        -: 4673:    _LIBCPP_INLINE_VISIBILITY
        -: 4674:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 4675:    template<class _Yp>
        -: 4676:        typename enable_if
        -: 4677:        <
        -: 4678:            is_convertible<_Yp*, element_type*>::value,
        -: 4679:            weak_ptr&
        -: 4680:        >::type
        -: 4681:        _LIBCPP_INLINE_VISIBILITY
        -: 4682:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 4683:
        -: 4684:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4685:
        -: 4686:    template<class _Yp>
        -: 4687:        typename enable_if
        -: 4688:        <
        -: 4689:            is_convertible<_Yp*, element_type*>::value,
        -: 4690:            weak_ptr&
        -: 4691:        >::type
        -: 4692:        _LIBCPP_INLINE_VISIBILITY
        -: 4693:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 4694:
        -: 4695:    _LIBCPP_INLINE_VISIBILITY
        -: 4696:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 4697:    _LIBCPP_INLINE_VISIBILITY
        -: 4698:    void reset() _NOEXCEPT;
        -: 4699:
        -: 4700:    _LIBCPP_INLINE_VISIBILITY
        -: 4701:    long use_count() const _NOEXCEPT
        -: 4702:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 4703:    _LIBCPP_INLINE_VISIBILITY
        -: 4704:    bool expired() const _NOEXCEPT
        -: 4705:        {return __cntrl_ == 0 || __cntrl_->use_count() == 0;}
        -: 4706:    shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 4707:    template<class _Up>
        -: 4708:        _LIBCPP_INLINE_VISIBILITY
        -: 4709:        bool owner_before(const shared_ptr<_Up>& __r) const _NOEXCEPT
        -: 4710:        {return __cntrl_ < __r.__cntrl_;}
        -: 4711:    template<class _Up>
        -: 4712:        _LIBCPP_INLINE_VISIBILITY
        -: 4713:        bool owner_before(const weak_ptr<_Up>& __r) const _NOEXCEPT
        -: 4714:        {return __cntrl_ < __r.__cntrl_;}
        -: 4715:
        -: 4716:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 4717:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 4718:};
        -: 4719:
        -: 4720:template<class _Tp>
        -: 4721:inline
        -: 4722:_LIBCPP_CONSTEXPR
        -: 4723:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 4724:    : __ptr_(0),
        -: 4725:      __cntrl_(0)
        -: 4726:{
        -: 4727:}
        -: 4728:
        -: 4729:template<class _Tp>
        -: 4730:inline
        -: 4731:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 4732:    : __ptr_(__r.__ptr_),
        -: 4733:      __cntrl_(__r.__cntrl_)
        -: 4734:{
        -: 4735:    if (__cntrl_)
        -: 4736:        __cntrl_->__add_weak();
        -: 4737:}
        -: 4738:
        -: 4739:template<class _Tp>
        -: 4740:template<class _Yp>
        -: 4741:inline
        -: 4742:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 4743:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 4744:                         _NOEXCEPT
        -: 4745:    : __ptr_(__r.__ptr_),
        -: 4746:      __cntrl_(__r.__cntrl_)
        -: 4747:{
        -: 4748:    if (__cntrl_)
        -: 4749:        __cntrl_->__add_weak();
        -: 4750:}
        -: 4751:
        -: 4752:template<class _Tp>
        -: 4753:template<class _Yp>
        -: 4754:inline
        -: 4755:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 4756:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 4757:         _NOEXCEPT
        -: 4758:    : __ptr_(__r.__ptr_),
        -: 4759:      __cntrl_(__r.__cntrl_)
        -: 4760:{
        -: 4761:    if (__cntrl_)
        -: 4762:        __cntrl_->__add_weak();
        -: 4763:}
        -: 4764:
        -: 4765:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4766:
        -: 4767:template<class _Tp>
        -: 4768:inline
        -: 4769:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 4770:    : __ptr_(__r.__ptr_),
        -: 4771:      __cntrl_(__r.__cntrl_)
        -: 4772:{
        -: 4773:    __r.__ptr_ = 0;
        -: 4774:    __r.__cntrl_ = 0;
        -: 4775:}
        -: 4776:
        -: 4777:template<class _Tp>
        -: 4778:template<class _Yp>
        -: 4779:inline
        -: 4780:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 4781:                        typename enable_if<is_convertible<_Yp*, _Tp*>::value, __nat*>::type)
        -: 4782:         _NOEXCEPT
        -: 4783:    : __ptr_(__r.__ptr_),
        -: 4784:      __cntrl_(__r.__cntrl_)
        -: 4785:{
        -: 4786:    __r.__ptr_ = 0;
        -: 4787:    __r.__cntrl_ = 0;
        -: 4788:}
        -: 4789:
        -: 4790:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4791:
        -: 4792:template<class _Tp>
        -: 4793:weak_ptr<_Tp>::~weak_ptr()
        -: 4794:{
        -: 4795:    if (__cntrl_)
        -: 4796:        __cntrl_->__release_weak();
        -: 4797:}
        -: 4798:
        -: 4799:template<class _Tp>
        -: 4800:inline
        -: 4801:weak_ptr<_Tp>&
        -: 4802:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 4803:{
        -: 4804:    weak_ptr(__r).swap(*this);
        -: 4805:    return *this;
        -: 4806:}
        -: 4807:
        -: 4808:template<class _Tp>
        -: 4809:template<class _Yp>
        -: 4810:inline
        -: 4811:typename enable_if
        -: 4812:<
        -: 4813:    is_convertible<_Yp*, _Tp*>::value,
        -: 4814:    weak_ptr<_Tp>&
        -: 4815:>::type
        -: 4816:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 4817:{
        -: 4818:    weak_ptr(__r).swap(*this);
        -: 4819:    return *this;
        -: 4820:}
        -: 4821:
        -: 4822:#ifndef _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4823:
        -: 4824:template<class _Tp>
        -: 4825:inline
        -: 4826:weak_ptr<_Tp>&
        -: 4827:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 4828:{
        -: 4829:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 4830:    return *this;
        -: 4831:}
        -: 4832:
        -: 4833:template<class _Tp>
        -: 4834:template<class _Yp>
        -: 4835:inline
        -: 4836:typename enable_if
        -: 4837:<
        -: 4838:    is_convertible<_Yp*, _Tp*>::value,
        -: 4839:    weak_ptr<_Tp>&
        -: 4840:>::type
        -: 4841:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 4842:{
        -: 4843:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 4844:    return *this;
        -: 4845:}
        -: 4846:
        -: 4847:#endif  // _LIBCPP_HAS_NO_RVALUE_REFERENCES
        -: 4848:
        -: 4849:template<class _Tp>
        -: 4850:template<class _Yp>
        -: 4851:inline
        -: 4852:typename enable_if
        -: 4853:<
        -: 4854:    is_convertible<_Yp*, _Tp*>::value,
        -: 4855:    weak_ptr<_Tp>&
        -: 4856:>::type
        -: 4857:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 4858:{
        -: 4859:    weak_ptr(__r).swap(*this);
        -: 4860:    return *this;
        -: 4861:}
        -: 4862:
        -: 4863:template<class _Tp>
        -: 4864:inline
        -: 4865:void
        -: 4866:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 4867:{
        -: 4868:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 4869:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 4870:}
        -: 4871:
        -: 4872:template<class _Tp>
        -: 4873:inline _LIBCPP_INLINE_VISIBILITY
        -: 4874:void
        -: 4875:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 4876:{
        -: 4877:    __x.swap(__y);
        -: 4878:}
        -: 4879:
        -: 4880:template<class _Tp>
        -: 4881:inline
        -: 4882:void
        -: 4883:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 4884:{
        -: 4885:    weak_ptr().swap(*this);
        -: 4886:}
        -: 4887:
        -: 4888:template<class _Tp>
        -: 4889:template<class _Yp>
        -: 4890:shared_ptr<_Tp>::shared_ptr(const weak_ptr<_Yp>& __r,
        -: 4891:                            typename enable_if<is_convertible<_Yp*, element_type*>::value, __nat>::type)
        -: 4892:    : __ptr_(__r.__ptr_),
        -: 4893:      __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -: 4894:{
        -: 4895:    if (__cntrl_ == 0)
        -: 4896:        __throw_bad_weak_ptr();
        -: 4897:}
        -: 4898:
        -: 4899:template<class _Tp>
        -: 4900:shared_ptr<_Tp>
        -: 4901:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 4902:{
        -: 4903:    shared_ptr<_Tp> __r;
        -: 4904:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 4905:    if (__r.__cntrl_)
        -: 4906:        __r.__ptr_ = __ptr_;
        -: 4907:    return __r;
        -: 4908:}
        -: 4909:
        -: 4910:#if _LIBCPP_STD_VER > 14
        -: 4911:template <class _Tp = void> struct owner_less;
        -: 4912:#else
        -: 4913:template <class _Tp> struct owner_less;
        -: 4914:#endif
        -: 4915:
        -: 4916:template <class _Tp>
        -: 4917:struct _LIBCPP_TEMPLATE_VIS owner_less<shared_ptr<_Tp> >
        -: 4918:    : binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 4919:{
        -: 4920:    typedef bool result_type;
        -: 4921:    _LIBCPP_INLINE_VISIBILITY
        -: 4922:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4923:        {return __x.owner_before(__y);}
        -: 4924:    _LIBCPP_INLINE_VISIBILITY
        -: 4925:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4926:        {return __x.owner_before(__y);}
        -: 4927:    _LIBCPP_INLINE_VISIBILITY
        -: 4928:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4929:        {return __x.owner_before(__y);}
        -: 4930:};
        -: 4931:
        -: 4932:template <class _Tp>
        -: 4933:struct _LIBCPP_TEMPLATE_VIS owner_less<weak_ptr<_Tp> >
        -: 4934:    : binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 4935:{
        -: 4936:    typedef bool result_type;
        -: 4937:    _LIBCPP_INLINE_VISIBILITY
        -: 4938:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4939:        {return __x.owner_before(__y);}
        -: 4940:    _LIBCPP_INLINE_VISIBILITY
        -: 4941:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4942:        {return __x.owner_before(__y);}
        -: 4943:    _LIBCPP_INLINE_VISIBILITY
        -: 4944:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 4945:        {return __x.owner_before(__y);}
        -: 4946:};
        -: 4947:
        -: 4948:#if _LIBCPP_STD_VER > 14
        -: 4949:template <>
        -: 4950:struct _LIBCPP_TEMPLATE_VIS owner_less<void>
        -: 4951:{
        -: 4952:    template <class _Tp, class _Up>
        -: 4953:    _LIBCPP_INLINE_VISIBILITY
        -: 4954:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4955:        {return __x.owner_before(__y);}
        -: 4956:    template <class _Tp, class _Up>
        -: 4957:    _LIBCPP_INLINE_VISIBILITY
        -: 4958:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4959:        {return __x.owner_before(__y);}
        -: 4960:    template <class _Tp, class _Up>
        -: 4961:    _LIBCPP_INLINE_VISIBILITY
        -: 4962:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4963:        {return __x.owner_before(__y);}
        -: 4964:    template <class _Tp, class _Up>
        -: 4965:    _LIBCPP_INLINE_VISIBILITY
        -: 4966:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 4967:        {return __x.owner_before(__y);}
        -: 4968:    typedef void is_transparent;
        -: 4969:};
        -: 4970:#endif
        -: 4971:
        -: 4972:template<class _Tp>
        -: 4973:class _LIBCPP_TEMPLATE_VIS enable_shared_from_this
        -: 4974:{
        -: 4975:    mutable weak_ptr<_Tp> __weak_this_;
        -: 4976:protected:
        -: 4977:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 4978:    enable_shared_from_this() _NOEXCEPT {}
        -: 4979:    _LIBCPP_INLINE_VISIBILITY
        -: 4980:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 4981:    _LIBCPP_INLINE_VISIBILITY
        -: 4982:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 4983:        {return *this;}
        -: 4984:    _LIBCPP_INLINE_VISIBILITY
        -: 4985:    ~enable_shared_from_this() {}
        -: 4986:public:
        -: 4987:    _LIBCPP_INLINE_VISIBILITY
        -: 4988:    shared_ptr<_Tp> shared_from_this()
        -: 4989:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 4990:    _LIBCPP_INLINE_VISIBILITY
        -: 4991:    shared_ptr<_Tp const> shared_from_this() const
        -: 4992:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 4993:
        -: 4994:#if _LIBCPP_STD_VER > 14
        -: 4995:    _LIBCPP_INLINE_VISIBILITY
        -: 4996:    weak_ptr<_Tp> weak_from_this() _NOEXCEPT
        -: 4997:       { return __weak_this_; }
        -: 4998:
        -: 4999:    _LIBCPP_INLINE_VISIBILITY
        -: 5000:    weak_ptr<const _Tp> weak_from_this() const _NOEXCEPT
        -: 5001:        { return __weak_this_; }
        -: 5002:#endif // _LIBCPP_STD_VER > 14
        -: 5003:
        -: 5004:    template <class _Up> friend class shared_ptr;
        -: 5005:};
        -: 5006:
        -: 5007:template <class _Tp>
        -: 5008:struct _LIBCPP_TEMPLATE_VIS hash<shared_ptr<_Tp> >
        -: 5009:{
        -: 5010:    typedef shared_ptr<_Tp>      argument_type;
        -: 5011:    typedef size_t               result_type;
        -: 5012:
        -: 5013:    _LIBCPP_INLINE_VISIBILITY
        -: 5014:    result_type operator()(const argument_type& __ptr) const _NOEXCEPT
        -: 5015:    {
        -: 5016:        return hash<_Tp*>()(__ptr.get());
        -: 5017:    }
        -: 5018:};
        -: 5019:
        -: 5020:template<class _CharT, class _Traits, class _Yp>
        -: 5021:inline _LIBCPP_INLINE_VISIBILITY
        -: 5022:basic_ostream<_CharT, _Traits>&
        -: 5023:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 5024:
        -: 5025:
        -: 5026:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 5027:
        -: 5028:class _LIBCPP_TYPE_VIS __sp_mut
        -: 5029:{
        -: 5030:    void* __lx;
        -: 5031:public:
        -: 5032:    void lock() _NOEXCEPT;
        -: 5033:    void unlock() _NOEXCEPT;
        -: 5034:
        -: 5035:private:
        -: 5036:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 5037:    __sp_mut(const __sp_mut&);
        -: 5038:    __sp_mut& operator=(const __sp_mut&);
        -: 5039:
        -: 5040:    friend _LIBCPP_FUNC_VIS __sp_mut& __get_sp_mut(const void*);
        -: 5041:};
        -: 5042:
        -: 5043:_LIBCPP_FUNC_VIS _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5044:__sp_mut& __get_sp_mut(const void*);
        -: 5045:
        -: 5046:template <class _Tp>
        -: 5047:inline _LIBCPP_INLINE_VISIBILITY
        -: 5048:bool
        -: 5049:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 5050:{
        -: 5051:    return false;
        -: 5052:}
        -: 5053:
        -: 5054:template <class _Tp>
        -: 5055:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5056:shared_ptr<_Tp>
        -: 5057:atomic_load(const shared_ptr<_Tp>* __p)
        -: 5058:{
        -: 5059:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5060:    __m.lock();
        -: 5061:    shared_ptr<_Tp> __q = *__p;
        -: 5062:    __m.unlock();
        -: 5063:    return __q;
        -: 5064:}
        -: 5065:
        -: 5066:template <class _Tp>
        -: 5067:inline _LIBCPP_INLINE_VISIBILITY
        -: 5068:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5069:shared_ptr<_Tp>
        -: 5070:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 5071:{
        -: 5072:    return atomic_load(__p);
        -: 5073:}
        -: 5074:
        -: 5075:template <class _Tp>
        -: 5076:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5077:void
        -: 5078:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5079:{
        -: 5080:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5081:    __m.lock();
        -: 5082:    __p->swap(__r);
        -: 5083:    __m.unlock();
        -: 5084:}
        -: 5085:
        -: 5086:template <class _Tp>
        -: 5087:inline _LIBCPP_INLINE_VISIBILITY
        -: 5088:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5089:void
        -: 5090:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5091:{
        -: 5092:    atomic_store(__p, __r);
        -: 5093:}
        -: 5094:
        -: 5095:template <class _Tp>
        -: 5096:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5097:shared_ptr<_Tp>
        -: 5098:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 5099:{
        -: 5100:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5101:    __m.lock();
        -: 5102:    __p->swap(__r);
        -: 5103:    __m.unlock();
        -: 5104:    return __r;
        -: 5105:}
        -: 5106:
        -: 5107:template <class _Tp>
        -: 5108:inline _LIBCPP_INLINE_VISIBILITY
        -: 5109:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5110:shared_ptr<_Tp>
        -: 5111:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 5112:{
        -: 5113:    return atomic_exchange(__p, __r);
        -: 5114:}
        -: 5115:
        -: 5116:template <class _Tp>
        -: 5117:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5118:bool
        -: 5119:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5120:{
        -: 5121:    shared_ptr<_Tp> __temp;
        -: 5122:    __sp_mut& __m = __get_sp_mut(__p);
        -: 5123:    __m.lock();
        -: 5124:    if (__p->__owner_equivalent(*__v))
        -: 5125:    {
        -: 5126:        _VSTD::swap(__temp, *__p);
        -: 5127:        *__p = __w;
        -: 5128:        __m.unlock();
        -: 5129:        return true;
        -: 5130:    }
        -: 5131:    _VSTD::swap(__temp, *__v);
        -: 5132:    *__v = *__p;
        -: 5133:    __m.unlock();
        -: 5134:    return false;
        -: 5135:}
        -: 5136:
        -: 5137:template <class _Tp>
        -: 5138:inline _LIBCPP_INLINE_VISIBILITY
        -: 5139:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5140:bool
        -: 5141:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 5142:{
        -: 5143:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5144:}
        -: 5145:
        -: 5146:template <class _Tp>
        -: 5147:inline _LIBCPP_INLINE_VISIBILITY
        -: 5148:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5149:bool
        -: 5150:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5151:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5152:{
        -: 5153:    return atomic_compare_exchange_strong(__p, __v, __w);
        -: 5154:}
        -: 5155:
        -: 5156:template <class _Tp>
        -: 5157:inline _LIBCPP_INLINE_VISIBILITY
        -: 5158:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 5159:bool
        -: 5160:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 5161:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 5162:{
        -: 5163:    return atomic_compare_exchange_weak(__p, __v, __w);
        -: 5164:}
        -: 5165:
        -: 5166:#endif  // !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -: 5167:
        -: 5168://enum class
        -: 5169:#if defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE)
        -: 5170:# ifndef _LIBCPP_CXX03_LANG
        -: 5171:enum class pointer_safety : unsigned char {
        -: 5172:  relaxed,
        -: 5173:  preferred,
        -: 5174:  strict
        -: 5175:};
        -: 5176:# endif
        -: 5177:#else
        -: 5178:struct _LIBCPP_TYPE_VIS pointer_safety
        -: 5179:{
        -: 5180:    enum __lx
        -: 5181:    {
        -: 5182:        relaxed,
        -: 5183:        preferred,
        -: 5184:        strict
        -: 5185:    };
        -: 5186:
        -: 5187:    __lx __v_;
        -: 5188:
        -: 5189:    _LIBCPP_INLINE_VISIBILITY
        -: 5190:    pointer_safety() : __v_() {}
        -: 5191:
        -: 5192:    _LIBCPP_INLINE_VISIBILITY
        -: 5193:    pointer_safety(__lx __v) : __v_(__v) {}
        -: 5194:    _LIBCPP_INLINE_VISIBILITY
        -: 5195:    operator int() const {return __v_;}
        -: 5196:};
        -: 5197:#endif
        -: 5198:
        -: 5199:#if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) && \
        -: 5200:    defined(_LIBCPP_BUILDING_LIBRARY)
        -: 5201:_LIBCPP_FUNC_VIS pointer_safety get_pointer_safety() _NOEXCEPT;
        -: 5202:#else
        -: 5203:// This function is only offered in C++03 under ABI v1.
        -: 5204:# if !defined(_LIBCPP_ABI_POINTER_SAFETY_ENUM_TYPE) || !defined(_LIBCPP_CXX03_LANG)
        -: 5205:inline _LIBCPP_INLINE_VISIBILITY
        -: 5206:pointer_safety get_pointer_safety() _NOEXCEPT {
        -: 5207:  return pointer_safety::relaxed;
        -: 5208:}
        -: 5209:# endif
        -: 5210:#endif
        -: 5211:
        -: 5212:
        -: 5213:_LIBCPP_FUNC_VIS void declare_reachable(void* __p);
        -: 5214:_LIBCPP_FUNC_VIS void declare_no_pointers(char* __p, size_t __n);
        -: 5215:_LIBCPP_FUNC_VIS void undeclare_no_pointers(char* __p, size_t __n);
        -: 5216:_LIBCPP_FUNC_VIS void* __undeclare_reachable(void* __p);
        -: 5217:
        -: 5218:template <class _Tp>
        -: 5219:inline _LIBCPP_INLINE_VISIBILITY
        -: 5220:_Tp*
        -: 5221:undeclare_reachable(_Tp* __p)
        -: 5222:{
        -: 5223:    return static_cast<_Tp*>(__undeclare_reachable(__p));
        -: 5224:}
        -: 5225:
        -: 5226:_LIBCPP_FUNC_VIS void* align(size_t __align, size_t __sz, void*& __ptr, size_t& __space);
        -: 5227:
        -: 5228:// --- Helper for container swap --
        -: 5229:template <typename _Alloc>
        -: 5230:inline _LIBCPP_INLINE_VISIBILITY
        -: 5231:void __swap_allocator(_Alloc & __a1, _Alloc & __a2)
        -: 5232:#if _LIBCPP_STD_VER >= 14
        -: 5233:    _NOEXCEPT
        -: 5234:#else
        -: 5235:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5236:#endif
        -: 5237:{
        -: 5238:    __swap_allocator(__a1, __a2,
        -: 5239:      integral_constant<bool, _VSTD::allocator_traits<_Alloc>::propagate_on_container_swap::value>());
        -: 5240:}
        -: 5241:
        -: 5242:template <typename _Alloc>
        -: 5243:_LIBCPP_INLINE_VISIBILITY
        -: 5244:void __swap_allocator(_Alloc & __a1, _Alloc & __a2, true_type)
        -: 5245:#if _LIBCPP_STD_VER >= 14
        -: 5246:    _NOEXCEPT
        -: 5247:#else
        -: 5248:    _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)
        -: 5249:#endif
        -: 5250:{
        -: 5251:    using _VSTD::swap;
        -: 5252:    swap(__a1, __a2);
        -: 5253:}
        -: 5254:
        -: 5255:template <typename _Alloc>
        -: 5256:inline _LIBCPP_INLINE_VISIBILITY
        -: 5257:void __swap_allocator(_Alloc &, _Alloc &, false_type) _NOEXCEPT {}
        -: 5258:
        -: 5259:template <typename _Alloc, typename _Traits=allocator_traits<_Alloc> >
        -: 5260:struct __noexcept_move_assign_container : public integral_constant<bool,
        -: 5261:    _Traits::propagate_on_container_move_assignment::value
        -: 5262:#if _LIBCPP_STD_VER > 14
        -: 5263:        || _Traits::is_always_equal::value
        -: 5264:#else
        -: 5265:        && is_nothrow_move_assignable<_Alloc>::value
        -: 5266:#endif
        -: 5267:    > {};
        -: 5268:
        -: 5269:
        -: 5270:#ifndef _LIBCPP_HAS_NO_VARIADICS
        -: 5271:template <class _Tp, class _Alloc>
        -: 5272:struct __temp_value {
        -: 5273:    typedef allocator_traits<_Alloc> _Traits;
        -: 5274:
        -: 5275:    typename aligned_storage<sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)>::type __v;
        -: 5276:    _Alloc &__a;
        -: 5277:
        -: 5278:    _Tp *__addr() { return reinterpret_cast<_Tp *>(addressof(__v)); }
        -: 5279:    _Tp &   get() { return *__addr(); }
        -: 5280:
        -: 5281:    template<class... _Args>
        -: 5282:    _LIBCPP_NO_CFI
        -: 5283:    __temp_value(_Alloc &__alloc, _Args&& ... __args) : __a(__alloc) {
        -: 5284:      _Traits::construct(__a, reinterpret_cast<_Tp*>(addressof(__v)),
        -: 5285:                         _VSTD::forward<_Args>(__args)...);
        -: 5286:    }
        -: 5287:
        -: 5288:    ~__temp_value() { _Traits::destroy(__a, __addr()); }
        -: 5289:    };
        -: 5290:#endif
        -: 5291:
        -: 5292:template<typename _Alloc, typename = void, typename = void>
        -: 5293:struct __is_allocator : false_type {};
        -: 5294:
        -: 5295:template<typename _Alloc>
        -: 5296:struct __is_allocator<_Alloc,
        -: 5297:       typename __void_t<typename _Alloc::value_type>::type,
        -: 5298:       typename __void_t<decltype(_VSTD::declval<_Alloc&>().allocate(size_t(0)))>::type
        -: 5299:     >
        -: 5300:   : true_type {};
        -: 5301:
        -: 5302:// __builtin_new_allocator -- A non-templated helper for allocating and
        -: 5303:// deallocating memory using __builtin_operator_new and
        -: 5304:// __builtin_operator_delete. It should be used in preference to
        -: 5305:// `std::allocator<T>` to avoid additional instantiations.
        -: 5306:struct __builtin_new_allocator {
        -: 5307:  struct __builtin_new_deleter {
        -: 5308:    typedef void* pointer_type;
        -: 5309:
        -: 5310:    _LIBCPP_CONSTEXPR explicit __builtin_new_deleter(size_t __size, size_t __align)
        -: 5311:        : __size_(__size), __align_(__align) {}
        -: 5312:
        -: 5313:    void operator()(void* p) const _NOEXCEPT {
        -: 5314:        std::__libcpp_deallocate(p, __size_, __align_);
        -: 5315:    }
        -: 5316:
        -: 5317:   private:
        -: 5318:    size_t __size_;
        -: 5319:    size_t __align_;
        -: 5320:  };
        -: 5321:
        -: 5322:  typedef unique_ptr<void, __builtin_new_deleter> __holder_t;
        -: 5323:
        -: 5324:  static __holder_t __allocate_bytes(size_t __s, size_t __align) {
        -: 5325:      return __holder_t(std::__libcpp_allocate(__s, __align),
        -: 5326:                     __builtin_new_deleter(__s, __align));
        -: 5327:  }
        -: 5328:
        -: 5329:  static void __deallocate_bytes(void* __p, size_t __s,
        -: 5330:                                 size_t __align) _NOEXCEPT {
        -: 5331:      std::__libcpp_deallocate(__p, __s, __align);
        -: 5332:  }
        -: 5333:
        -: 5334:  template <class _Tp>
        -: 5335:  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE
        -: 5336:  static __holder_t __allocate_type(size_t __n) {
        -: 5337:      return __allocate_bytes(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -: 5338:  }
        -: 5339:
        -: 5340:  template <class _Tp>
        -: 5341:  _LIBCPP_NODEBUG _LIBCPP_ALWAYS_INLINE
        -: 5342:  static void __deallocate_type(void* __p, size_t __n) _NOEXCEPT {
        -: 5343:      __deallocate_bytes(__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -: 5344:  }
        -: 5345:};
        -: 5346:
        -: 5347:
        -: 5348:_LIBCPP_END_NAMESPACE_STD
        -: 5349:
        -: 5350:_LIBCPP_POP_MACROS
        -: 5351:
        -: 5352:#if defined(_LIBCPP_HAS_PARALLEL_ALGORITHMS) && _LIBCPP_STD_VER >= 17
        -: 5353:#   include <__pstl_memory>
        -: 5354:#endif
        -: 5355:
        -: 5356:#endif  // _LIBCPP_MEMORY
